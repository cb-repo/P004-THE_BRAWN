
THE_BRAWN_alpha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002510  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080025d0  080025d0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080025d0  080025d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080025d0  080025d0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025d0  080025d0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025d0  080025d0  000125d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025d4  080025d4  000125d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080025d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000074  0800264c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000014c  0800264c  0002014c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006b8f  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ae5  00000000  00000000  00026c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  00028710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000538  00000000  00000000  00028d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000113cb  00000000  00000000  00029258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007cfc  00000000  00000000  0003a623  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00068d44  00000000  00000000  0004231f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ab063  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000134c  00000000  00000000  000ab0b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080025b8 	.word	0x080025b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080025b8 	.word	0x080025b8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <ADC_Init>:
 * PUBLIC FUNCTIONS
 */


void ADC_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	CLK_EnableADCCLK();
 8000224:	f000 f94e 	bl	80004c4 <CLK_EnableADCCLK>
	__HAL_RCC_ADC1_CLK_ENABLE();
 8000228:	4b29      	ldr	r3, [pc, #164]	; (80002d0 <ADC_Init+0xb0>)
 800022a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800022c:	4b28      	ldr	r3, [pc, #160]	; (80002d0 <ADC_Init+0xb0>)
 800022e:	2180      	movs	r1, #128	; 0x80
 8000230:	0089      	lsls	r1, r1, #2
 8000232:	430a      	orrs	r2, r1
 8000234:	635a      	str	r2, [r3, #52]	; 0x34

	gAdc.Instance = ADC1;
 8000236:	4b27      	ldr	r3, [pc, #156]	; (80002d4 <ADC_Init+0xb4>)
 8000238:	4a27      	ldr	r2, [pc, #156]	; (80002d8 <ADC_Init+0xb8>)
 800023a:	601a      	str	r2, [r3, #0]
	gAdc.Init.ClockPrescaler = ADC_CLOCK_PRESCALAR;
 800023c:	4b25      	ldr	r3, [pc, #148]	; (80002d4 <ADC_Init+0xb4>)
 800023e:	2280      	movs	r2, #128	; 0x80
 8000240:	0312      	lsls	r2, r2, #12
 8000242:	605a      	str	r2, [r3, #4]
	gAdc.Init.Resolution = ADC_RESOLUTION_12B;
 8000244:	4b23      	ldr	r3, [pc, #140]	; (80002d4 <ADC_Init+0xb4>)
 8000246:	2200      	movs	r2, #0
 8000248:	609a      	str	r2, [r3, #8]
	gAdc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800024a:	4b22      	ldr	r3, [pc, #136]	; (80002d4 <ADC_Init+0xb4>)
 800024c:	2200      	movs	r2, #0
 800024e:	60da      	str	r2, [r3, #12]
	gAdc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000250:	4b20      	ldr	r3, [pc, #128]	; (80002d4 <ADC_Init+0xb4>)
 8000252:	2201      	movs	r2, #1
 8000254:	611a      	str	r2, [r3, #16]
	gAdc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000256:	4b1f      	ldr	r3, [pc, #124]	; (80002d4 <ADC_Init+0xb4>)
 8000258:	2204      	movs	r2, #4
 800025a:	615a      	str	r2, [r3, #20]
	gAdc.Init.LowPowerAutoWait = DISABLE;
 800025c:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <ADC_Init+0xb4>)
 800025e:	2200      	movs	r2, #0
 8000260:	619a      	str	r2, [r3, #24]
	gAdc.Init.LowPowerAutoPowerOff = DISABLE;
 8000262:	4b1c      	ldr	r3, [pc, #112]	; (80002d4 <ADC_Init+0xb4>)
 8000264:	2200      	movs	r2, #0
 8000266:	61da      	str	r2, [r3, #28]
	gAdc.Init.ContinuousConvMode = DISABLE;
 8000268:	4b1a      	ldr	r3, [pc, #104]	; (80002d4 <ADC_Init+0xb4>)
 800026a:	2220      	movs	r2, #32
 800026c:	2100      	movs	r1, #0
 800026e:	5499      	strb	r1, [r3, r2]
	gAdc.Init.DiscontinuousConvMode = DISABLE;
 8000270:	4b18      	ldr	r3, [pc, #96]	; (80002d4 <ADC_Init+0xb4>)
 8000272:	2221      	movs	r2, #33	; 0x21
 8000274:	2100      	movs	r1, #0
 8000276:	5499      	strb	r1, [r3, r2]
	gAdc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000278:	4b16      	ldr	r3, [pc, #88]	; (80002d4 <ADC_Init+0xb4>)
 800027a:	22c2      	movs	r2, #194	; 0xc2
 800027c:	32ff      	adds	r2, #255	; 0xff
 800027e:	625a      	str	r2, [r3, #36]	; 0x24
	gAdc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000280:	4b14      	ldr	r3, [pc, #80]	; (80002d4 <ADC_Init+0xb4>)
 8000282:	2200      	movs	r2, #0
 8000284:	629a      	str	r2, [r3, #40]	; 0x28
	gAdc.Init.DMAContinuousRequests = DISABLE;
 8000286:	4b13      	ldr	r3, [pc, #76]	; (80002d4 <ADC_Init+0xb4>)
 8000288:	222c      	movs	r2, #44	; 0x2c
 800028a:	2100      	movs	r1, #0
 800028c:	5499      	strb	r1, [r3, r2]
	gAdc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800028e:	4b11      	ldr	r3, [pc, #68]	; (80002d4 <ADC_Init+0xb4>)
 8000290:	2200      	movs	r2, #0
 8000292:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32L0)
	gAdc.Init.LowPowerFrequencyMode = DISABLE;
 8000294:	4b0f      	ldr	r3, [pc, #60]	; (80002d4 <ADC_Init+0xb4>)
 8000296:	2200      	movs	r2, #0
 8000298:	635a      	str	r2, [r3, #52]	; 0x34
	gAdc.Init.OversamplingMode = DISABLE;
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <ADC_Init+0xb4>)
 800029c:	2200      	movs	r2, #0
 800029e:	63da      	str	r2, [r3, #60]	; 0x3c
	gAdc.Init.SamplingTime = ADC_SAMPLETIME;
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <ADC_Init+0xb4>)
 80002a2:	2206      	movs	r2, #6
 80002a4:	639a      	str	r2, [r3, #56]	; 0x38
#elif defined(STM32F0)
	gAdc.Init.SamplingTimeCommon = ADC_SAMPLETIME;
#endif
	HAL_ADC_Init(&gAdc);
 80002a6:	4b0b      	ldr	r3, [pc, #44]	; (80002d4 <ADC_Init+0xb4>)
 80002a8:	0018      	movs	r0, r3
 80002aa:	f001 fed5 	bl	8002058 <HAL_ADC_Init>

	ADC_Calibrate();
 80002ae:	f000 f875 	bl	800039c <ADC_Calibrate>

	__HAL_ADC_ENABLE(&gAdc);
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <ADC_Init+0xb4>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	689a      	ldr	r2, [r3, #8]
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <ADC_Init+0xb4>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2101      	movs	r1, #1
 80002be:	430a      	orrs	r2, r1
 80002c0:	609a      	str	r2, [r3, #8]
	ADC_WaitForFlag(ADC_FLAG_RDY);
 80002c2:	2001      	movs	r0, #1
 80002c4:	f000 f858 	bl	8000378 <ADC_WaitForFlag>
}
 80002c8:	46c0      	nop			; (mov r8, r8)
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	40021000 	.word	0x40021000
 80002d4:	20000090 	.word	0x20000090
 80002d8:	40012400 	.word	0x40012400

080002dc <ADC_Read>:

uint32_t ADC_Read(uint32_t channel)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
	_ADC_SELECT(gAdc.Instance, channel);
 80002e4:	4b0d      	ldr	r3, [pc, #52]	; (800031c <ADC_Read+0x40>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	687a      	ldr	r2, [r7, #4]
 80002ea:	0352      	lsls	r2, r2, #13
 80002ec:	0b52      	lsrs	r2, r2, #13
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28

	__HAL_ADC_CLEAR_FLAG(&gAdc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80002f0:	4b0a      	ldr	r3, [pc, #40]	; (800031c <ADC_Read+0x40>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	221c      	movs	r2, #28
 80002f6:	601a      	str	r2, [r3, #0]
	gAdc.Instance->CR |= ADC_CR_ADSTART;
 80002f8:	4b08      	ldr	r3, [pc, #32]	; (800031c <ADC_Read+0x40>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	689a      	ldr	r2, [r3, #8]
 80002fe:	4b07      	ldr	r3, [pc, #28]	; (800031c <ADC_Read+0x40>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	2104      	movs	r1, #4
 8000304:	430a      	orrs	r2, r1
 8000306:	609a      	str	r2, [r3, #8]

	ADC_WaitForFlag(ADC_FLAG_EOC);
 8000308:	2004      	movs	r0, #4
 800030a:	f000 f835 	bl	8000378 <ADC_WaitForFlag>

	return gAdc.Instance->DR;
 800030e:	4b03      	ldr	r3, [pc, #12]	; (800031c <ADC_Read+0x40>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000314:	0018      	movs	r0, r3
 8000316:	46bd      	mov	sp, r7
 8000318:	b002      	add	sp, #8
 800031a:	bd80      	pop	{r7, pc}
 800031c:	20000090 	.word	0x20000090

08000320 <AIN_AinToDivider>:
	__HAL_RCC_ADC1_CLK_DISABLE();
	CLK_DisableADCCLK();
}

uint32_t AIN_AinToDivider(uint32_t ain, uint32_t rlow, uint32_t rhigh)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
 8000326:	60f8      	str	r0, [r7, #12]
 8000328:	60b9      	str	r1, [r7, #8]
 800032a:	607a      	str	r2, [r7, #4]
	return AIN_AinToMv(ain) * (rhigh + rlow) / rlow;
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	0018      	movs	r0, r3
 8000330:	f000 f80e 	bl	8000350 <AIN_AinToMv>
 8000334:	0001      	movs	r1, r0
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	18d3      	adds	r3, r2, r3
 800033c:	434b      	muls	r3, r1
 800033e:	68b9      	ldr	r1, [r7, #8]
 8000340:	0018      	movs	r0, r3
 8000342:	f7ff fee1 	bl	8000108 <__udivsi3>
 8000346:	0003      	movs	r3, r0
}
 8000348:	0018      	movs	r0, r3
 800034a:	46bd      	mov	sp, r7
 800034c:	b004      	add	sp, #16
 800034e:	bd80      	pop	{r7, pc}

08000350 <AIN_AinToMv>:

uint32_t AIN_AinToMv(uint32_t ain)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b082      	sub	sp, #8
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
	return (ain * ADC_VREF) / ADC_MAX;
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	4a05      	ldr	r2, [pc, #20]	; (8000370 <AIN_AinToMv+0x20>)
 800035c:	4353      	muls	r3, r2
 800035e:	4905      	ldr	r1, [pc, #20]	; (8000374 <AIN_AinToMv+0x24>)
 8000360:	0018      	movs	r0, r3
 8000362:	f7ff fed1 	bl	8000108 <__udivsi3>
 8000366:	0003      	movs	r3, r0
}
 8000368:	0018      	movs	r0, r3
 800036a:	46bd      	mov	sp, r7
 800036c:	b002      	add	sp, #8
 800036e:	bd80      	pop	{r7, pc}
 8000370:	00000ce4 	.word	0x00000ce4
 8000374:	00000fff 	.word	0x00000fff

08000378 <ADC_WaitForFlag>:
/*
 * PRIVATE FUNCTIONS
 */

static void ADC_WaitForFlag(uint32_t flag)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	b082      	sub	sp, #8
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	while (!(gAdc.Instance->ISR & flag)) { }
 8000380:	46c0      	nop			; (mov r8, r8)
 8000382:	4b05      	ldr	r3, [pc, #20]	; (8000398 <ADC_WaitForFlag+0x20>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	687a      	ldr	r2, [r7, #4]
 800038a:	4013      	ands	r3, r2
 800038c:	d0f9      	beq.n	8000382 <ADC_WaitForFlag+0xa>
}
 800038e:	46c0      	nop			; (mov r8, r8)
 8000390:	46c0      	nop			; (mov r8, r8)
 8000392:	46bd      	mov	sp, r7
 8000394:	b002      	add	sp, #8
 8000396:	bd80      	pop	{r7, pc}
 8000398:	20000090 	.word	0x20000090

0800039c <ADC_Calibrate>:

static void ADC_Calibrate(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0
	// Note, ADC must be disabled for this to occurr
	gAdc.Instance->CR |= ADC_CR_ADCAL;
 80003a0:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <ADC_Calibrate+0x2c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	689a      	ldr	r2, [r3, #8]
 80003a6:	4b08      	ldr	r3, [pc, #32]	; (80003c8 <ADC_Calibrate+0x2c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2180      	movs	r1, #128	; 0x80
 80003ac:	0609      	lsls	r1, r1, #24
 80003ae:	430a      	orrs	r2, r1
 80003b0:	609a      	str	r2, [r3, #8]
	while(gAdc.Instance->CR & ADC_CR_ADCAL);
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <ADC_Calibrate+0x2c>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	689b      	ldr	r3, [r3, #8]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	dbfa      	blt.n	80003b4 <ADC_Calibrate+0x18>
}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	46c0      	nop			; (mov r8, r8)
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	46c0      	nop			; (mov r8, r8)
 80003c8:	20000090 	.word	0x20000090

080003cc <CLK_InitSYSCLK>:
/*
 * PUBLIC FUNCTIONS
 */

void CLK_InitSYSCLK(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	__HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 80003d0:	4b34      	ldr	r3, [pc, #208]	; (80004a4 <CLK_InitSYSCLK+0xd8>)
 80003d2:	681a      	ldr	r2, [r3, #0]
 80003d4:	4b33      	ldr	r3, [pc, #204]	; (80004a4 <CLK_InitSYSCLK+0xd8>)
 80003d6:	2101      	movs	r1, #1
 80003d8:	430a      	orrs	r2, r1
 80003da:	601a      	str	r2, [r3, #0]
#ifdef CLK_USE_HSE
	__HAL_RCC_HSE_CONFIG(RCC_HSE_ON);
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U);
#endif
#ifdef CLK_USE_HSI
	__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_HSICALIBRATION_DEFAULT);
 80003dc:	4b32      	ldr	r3, [pc, #200]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	4a32      	ldr	r2, [pc, #200]	; (80004ac <CLK_InitSYSCLK+0xe0>)
 80003e2:	401a      	ands	r2, r3
 80003e4:	4b30      	ldr	r3, [pc, #192]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 80003e6:	2180      	movs	r1, #128	; 0x80
 80003e8:	0149      	lsls	r1, r1, #5
 80003ea:	430a      	orrs	r2, r1
 80003ec:	605a      	str	r2, [r3, #4]
	__HAL_RCC_HSI_CONFIG(RCC_HSI_ON);
 80003ee:	4b2e      	ldr	r3, [pc, #184]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	2209      	movs	r2, #9
 80003f4:	4393      	bics	r3, r2
 80003f6:	001a      	movs	r2, r3
 80003f8:	4b2b      	ldr	r3, [pc, #172]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 80003fa:	2101      	movs	r1, #1
 80003fc:	430a      	orrs	r2, r1
 80003fe:	601a      	str	r2, [r3, #0]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U);
 8000400:	46c0      	nop			; (mov r8, r8)
 8000402:	4b29      	ldr	r3, [pc, #164]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2204      	movs	r2, #4
 8000408:	4013      	ands	r3, r2
 800040a:	d0fa      	beq.n	8000402 <CLK_InitSYSCLK+0x36>
	__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_MSICALIBRATION_DEFAULT);
#endif

#ifdef CLK_USE_PLL
	// PLL must be disables for configuration.
	__HAL_RCC_PLL_DISABLE();
 800040c:	4b26      	ldr	r3, [pc, #152]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 800040e:	681a      	ldr	r2, [r3, #0]
 8000410:	4b25      	ldr	r3, [pc, #148]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 8000412:	4927      	ldr	r1, [pc, #156]	; (80004b0 <CLK_InitSYSCLK+0xe4>)
 8000414:	400a      	ands	r2, r1
 8000416:	601a      	str	r2, [r3, #0]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U);
 8000418:	46c0      	nop			; (mov r8, r8)
 800041a:	4b23      	ldr	r3, [pc, #140]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 800041c:	681a      	ldr	r2, [r3, #0]
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	049b      	lsls	r3, r3, #18
 8000422:	4013      	ands	r3, r2
 8000424:	d1f9      	bne.n	800041a <CLK_InitSYSCLK+0x4e>
	__HAL_RCC_PLL_CONFIG(CLK_PLL_SRC, CLK_PLL_MUL_CFG, CLK_PLL_DIV_CFG);
 8000426:	4b20      	ldr	r3, [pc, #128]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 8000428:	68db      	ldr	r3, [r3, #12]
 800042a:	4a22      	ldr	r2, [pc, #136]	; (80004b4 <CLK_InitSYSCLK+0xe8>)
 800042c:	401a      	ands	r2, r3
 800042e:	4b1e      	ldr	r3, [pc, #120]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 8000430:	2188      	movs	r1, #136	; 0x88
 8000432:	03c9      	lsls	r1, r1, #15
 8000434:	430a      	orrs	r2, r1
 8000436:	60da      	str	r2, [r3, #12]
	__HAL_RCC_PLL_ENABLE();
 8000438:	4b1b      	ldr	r3, [pc, #108]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	4b1a      	ldr	r3, [pc, #104]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 800043e:	2180      	movs	r1, #128	; 0x80
 8000440:	0449      	lsls	r1, r1, #17
 8000442:	430a      	orrs	r2, r1
 8000444:	601a      	str	r2, [r3, #0]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U);
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	4b17      	ldr	r3, [pc, #92]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 800044a:	681a      	ldr	r2, [r3, #0]
 800044c:	2380      	movs	r3, #128	; 0x80
 800044e:	049b      	lsls	r3, r3, #18
 8000450:	4013      	ands	r3, r2
 8000452:	d0f9      	beq.n	8000448 <CLK_InitSYSCLK+0x7c>
	 * CONFIGURE CLOCKS
	 * Select the sources and dividers for internal clocks
	 */

	// Configure AHBCLK divider
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8000454:	4b14      	ldr	r3, [pc, #80]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 8000456:	68da      	ldr	r2, [r3, #12]
 8000458:	4b13      	ldr	r3, [pc, #76]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 800045a:	21f0      	movs	r1, #240	; 0xf0
 800045c:	438a      	bics	r2, r1
 800045e:	60da      	str	r2, [r3, #12]

	// Apply SYSCLK source
	__HAL_RCC_SYSCLK_CONFIG(CLK_SYSCLK_SRC);
 8000460:	4b11      	ldr	r3, [pc, #68]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 8000462:	68da      	ldr	r2, [r3, #12]
 8000464:	4b10      	ldr	r3, [pc, #64]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 8000466:	2103      	movs	r1, #3
 8000468:	430a      	orrs	r2, r1
 800046a:	60da      	str	r2, [r3, #12]
#elif (CLK_SYSCLK_SRC == RCC_SYSCLKSOURCE_STATUS_HSI)
	while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI);
#elif (CLK_SYSCLK_SRC == RCC_SYSCLKSOURCE_STATUS_HSE)
	while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE);
#elif (CLK_SYSCLK_SRC == RCC_SYSCLKSOURCE_PLLCLK)
	while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK);
 800046c:	46c0      	nop			; (mov r8, r8)
 800046e:	4b0e      	ldr	r3, [pc, #56]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 8000470:	68db      	ldr	r3, [r3, #12]
 8000472:	220c      	movs	r2, #12
 8000474:	4013      	ands	r3, r2
 8000476:	2b0c      	cmp	r3, #12
 8000478:	d1f9      	bne.n	800046e <CLK_InitSYSCLK+0xa2>
#endif

	// Configure PCLK dividers (peripheral clock)
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV1);
 800047a:	4b0b      	ldr	r3, [pc, #44]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 800047c:	68da      	ldr	r2, [r3, #12]
 800047e:	4b0a      	ldr	r3, [pc, #40]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 8000480:	490d      	ldr	r1, [pc, #52]	; (80004b8 <CLK_InitSYSCLK+0xec>)
 8000482:	400a      	ands	r2, r1
 8000484:	60da      	str	r2, [r3, #12]

#ifdef STM32L0
	// STM32L0's have a second PCLK. The shift by 3 is defined like this in the HAL.
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV1 << 3);
 8000486:	4b08      	ldr	r3, [pc, #32]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 8000488:	68da      	ldr	r2, [r3, #12]
 800048a:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 800048c:	490b      	ldr	r1, [pc, #44]	; (80004bc <CLK_InitSYSCLK+0xf0>)
 800048e:	400a      	ands	r2, r1
 8000490:	60da      	str	r2, [r3, #12]

#ifndef CLK_USE_HSI
	__HAL_RCC_HSI_CONFIG(RCC_HSI_OFF);
#endif
#ifndef CLK_USE_MSI
	__HAL_RCC_MSI_DISABLE();
 8000492:	4b05      	ldr	r3, [pc, #20]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 8000494:	681a      	ldr	r2, [r3, #0]
 8000496:	4b04      	ldr	r3, [pc, #16]	; (80004a8 <CLK_InitSYSCLK+0xdc>)
 8000498:	4909      	ldr	r1, [pc, #36]	; (80004c0 <CLK_InitSYSCLK+0xf4>)
 800049a:	400a      	ands	r2, r1
 800049c:	601a      	str	r2, [r3, #0]
#endif
}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40022000 	.word	0x40022000
 80004a8:	40021000 	.word	0x40021000
 80004ac:	ffffe0ff 	.word	0xffffe0ff
 80004b0:	feffffff 	.word	0xfeffffff
 80004b4:	ff02ffff 	.word	0xff02ffff
 80004b8:	fffff8ff 	.word	0xfffff8ff
 80004bc:	ffffc7ff 	.word	0xffffc7ff
 80004c0:	fffffeff 	.word	0xfffffeff

080004c4 <CLK_EnableADCCLK>:
	__HAL_RCC_LSI_DISABLE();
#endif
}

void CLK_EnableADCCLK(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	// ADC CLK is driven off the HSI.
#ifndef CLK_USE_HSI
	__HAL_RCC_HSI_CONFIG(RCC_HSI_ON);
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U);
#endif
}
 80004c8:	46c0      	nop			; (mov r8, r8)
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <CORE_GetTick>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t CORE_GetTick(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	return gTicks;
 80004d4:	4b02      	ldr	r3, [pc, #8]	; (80004e0 <CORE_GetTick+0x10>)
 80004d6:	681b      	ldr	r3, [r3, #0]
}
 80004d8:	0018      	movs	r0, r3
 80004da:	46bd      	mov	sp, r7
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	200000ec 	.word	0x200000ec

080004e4 <GPIO_Deinit>:
{
	GPIO_Init(gpio, pin, GPIO_Mode_Input | pull);
}

static inline void GPIO_Deinit(GPIO_t * gpio, uint32_t pin)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Analog);
 80004ee:	6839      	ldr	r1, [r7, #0]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	2203      	movs	r2, #3
 80004f4:	0018      	movs	r0, r3
 80004f6:	f000 f94f 	bl	8000798 <GPIO_Init>
}
 80004fa:	46c0      	nop			; (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b002      	add	sp, #8
 8000500:	bd80      	pop	{r7, pc}
	...

08000504 <CLK_GetHCLKFreq>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t CLK_GetHCLKFreq(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	return CLK_SYSCLK_FREQ;
 8000508:	4b01      	ldr	r3, [pc, #4]	; (8000510 <CLK_GetHCLKFreq+0xc>)
}
 800050a:	0018      	movs	r0, r3
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}
 8000510:	01e84800 	.word	0x01e84800

08000514 <CORE_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void CORE_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
#if defined(STM32L0)
	__HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000518:	4b15      	ldr	r3, [pc, #84]	; (8000570 <CORE_Init+0x5c>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4b14      	ldr	r3, [pc, #80]	; (8000570 <CORE_Init+0x5c>)
 800051e:	2140      	movs	r1, #64	; 0x40
 8000520:	430a      	orrs	r2, r1
 8000522:	601a      	str	r2, [r3, #0]

#elif defined(STM32F0)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000524:	4b13      	ldr	r3, [pc, #76]	; (8000574 <CORE_Init+0x60>)
 8000526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <CORE_Init+0x60>)
 800052a:	2101      	movs	r1, #1
 800052c:	430a      	orrs	r2, r1
 800052e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_RCC_PWR_CLK_ENABLE();
 8000530:	4b10      	ldr	r3, [pc, #64]	; (8000574 <CORE_Init+0x60>)
 8000532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <CORE_Init+0x60>)
 8000536:	2180      	movs	r1, #128	; 0x80
 8000538:	0549      	lsls	r1, r1, #21
 800053a:	430a      	orrs	r2, r1
 800053c:	639a      	str	r2, [r3, #56]	; 0x38
#ifdef STM32L0
#ifndef USB_ENABLE
	// This seems to disrupt USB. Future investigation needed.
	SET_BIT(PWR->CR, PWR_CR_ULP | PWR_CR_FWU); // Enable Ultra low power mode & Fast wakeup
 800053e:	4b0e      	ldr	r3, [pc, #56]	; (8000578 <CORE_Init+0x64>)
 8000540:	681a      	ldr	r2, [r3, #0]
 8000542:	4b0d      	ldr	r3, [pc, #52]	; (8000578 <CORE_Init+0x64>)
 8000544:	21c0      	movs	r1, #192	; 0xc0
 8000546:	00c9      	lsls	r1, r1, #3
 8000548:	430a      	orrs	r2, r1
 800054a:	601a      	str	r2, [r3, #0]
#endif
	__HAL_PWR_VOLTAGESCALING_CONFIG(CORE_VOLTAGE_RANGE);
 800054c:	4b0a      	ldr	r3, [pc, #40]	; (8000578 <CORE_Init+0x64>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a0a      	ldr	r2, [pc, #40]	; (800057c <CORE_Init+0x68>)
 8000552:	401a      	ands	r2, r3
 8000554:	4b08      	ldr	r3, [pc, #32]	; (8000578 <CORE_Init+0x64>)
 8000556:	2180      	movs	r1, #128	; 0x80
 8000558:	0109      	lsls	r1, r1, #4
 800055a:	430a      	orrs	r2, r1
 800055c:	601a      	str	r2, [r3, #0]
#endif

	CLK_InitSYSCLK();
 800055e:	f7ff ff35 	bl	80003cc <CLK_InitSYSCLK>
	CORE_InitSysTick();
 8000562:	f000 f82e 	bl	80005c2 <CORE_InitSysTick>
	CORE_InitGPIO();
 8000566:	f000 f845 	bl	80005f4 <CORE_InitGPIO>
#ifdef	US_ENABLE
	US_Init();
#endif
}
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40022000 	.word	0x40022000
 8000574:	40021000 	.word	0x40021000
 8000578:	40007000 	.word	0x40007000
 800057c:	ffffe7ff 	.word	0xffffe7ff

08000580 <CORE_Idle>:

void __attribute__ ((noinline)) CORE_Idle(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	// The push and pop of this function protects r0 from being clobbered during interrupt.
	// I do not understand why this is not preserved by the IRQ's push/pop.
	// If this function is inlined - then the usually pushed registers can get clobbered when returning from WFI.

	// As long as systick is on, this will at least return each millisecond.
	__WFI();
 8000584:	bf30      	wfi
}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <CORE_Delay>:
	CLK_InitSYSCLK();
	HAL_ResumeTick();
}

void CORE_Delay(uint32_t ms)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	ms += MS_PER_SYSTICK; // Add to guarantee a minimum delay
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	3301      	adds	r3, #1
 8000598:	607b      	str	r3, [r7, #4]
	uint32_t start = CORE_GetTick();
 800059a:	f7ff ff99 	bl	80004d0 <CORE_GetTick>
 800059e:	0003      	movs	r3, r0
 80005a0:	60fb      	str	r3, [r7, #12]
	while (CORE_GetTick() - start < ms)
 80005a2:	e001      	b.n	80005a8 <CORE_Delay+0x1c>
	{
		CORE_Idle();
 80005a4:	f7ff ffec 	bl	8000580 <CORE_Idle>
	while (CORE_GetTick() - start < ms)
 80005a8:	f7ff ff92 	bl	80004d0 <CORE_GetTick>
 80005ac:	0002      	movs	r2, r0
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	d8f5      	bhi.n	80005a4 <CORE_Delay+0x18>
	}
}
 80005b8:	46c0      	nop			; (mov r8, r8)
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b004      	add	sp, #16
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <CORE_InitSysTick>:
/*
 * PRIVATE FUNCTIONS
 */

void CORE_InitSysTick(void)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	af00      	add	r7, sp, #0
	HAL_SYSTICK_Config(CLK_GetHCLKFreq() / CORE_SYSTICK_FREQ);
 80005c6:	f7ff ff9d 	bl	8000504 <CLK_GetHCLKFreq>
 80005ca:	0002      	movs	r2, r0
 80005cc:	23fa      	movs	r3, #250	; 0xfa
 80005ce:	0099      	lsls	r1, r3, #2
 80005d0:	0010      	movs	r0, r2
 80005d2:	f7ff fd99 	bl	8000108 <__udivsi3>
 80005d6:	0003      	movs	r3, r0
 80005d8:	0018      	movs	r0, r3
 80005da:	f001 ffbc 	bl	8002556 <HAL_SYSTICK_Config>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80005de:	2301      	movs	r3, #1
 80005e0:	425b      	negs	r3, r3
 80005e2:	2200      	movs	r2, #0
 80005e4:	2100      	movs	r1, #0
 80005e6:	0018      	movs	r0, r3
 80005e8:	f001 ff80 	bl	80024ec <HAL_NVIC_SetPriority>
}
 80005ec:	46c0      	nop			; (mov r8, r8)
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <CORE_InitGPIO>:

void CORE_InitGPIO(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <CORE_InitGPIO+0x7c>)
 80005fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005fe:	4b1c      	ldr	r3, [pc, #112]	; (8000670 <CORE_InitGPIO+0x7c>)
 8000600:	2101      	movs	r1, #1
 8000602:	430a      	orrs	r2, r1
 8000604:	62da      	str	r2, [r3, #44]	; 0x2c
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <CORE_InitGPIO+0x7c>)
 8000608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060a:	2201      	movs	r2, #1
 800060c:	4013      	ands	r3, r2
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
#ifdef DEBUG
	// SWCLK and SWDIO on PA13, PA14
	GPIO_Deinit(GPIOA, GPIO_PIN_All & ~(GPIO_PIN_13 | GPIO_PIN_14));
 8000612:	4a18      	ldr	r2, [pc, #96]	; (8000674 <CORE_InitGPIO+0x80>)
 8000614:	23a0      	movs	r3, #160	; 0xa0
 8000616:	05db      	lsls	r3, r3, #23
 8000618:	0011      	movs	r1, r2
 800061a:	0018      	movs	r0, r3
 800061c:	f7ff ff62 	bl	80004e4 <GPIO_Deinit>
#else
	GPIO_Deinit(GPIOA, GPIO_PIN_All);
#endif

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <CORE_InitGPIO+0x7c>)
 8000622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <CORE_InitGPIO+0x7c>)
 8000626:	2102      	movs	r1, #2
 8000628:	430a      	orrs	r2, r1
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
 800062c:	4b10      	ldr	r3, [pc, #64]	; (8000670 <CORE_InitGPIO+0x7c>)
 800062e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000630:	2202      	movs	r2, #2
 8000632:	4013      	ands	r3, r2
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
	GPIO_Deinit(GPIOB, GPIO_PIN_All);
 8000638:	4a0f      	ldr	r2, [pc, #60]	; (8000678 <CORE_InitGPIO+0x84>)
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <CORE_InitGPIO+0x88>)
 800063c:	0011      	movs	r1, r2
 800063e:	0018      	movs	r0, r3
 8000640:	f7ff ff50 	bl	80004e4 <GPIO_Deinit>

	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <CORE_InitGPIO+0x7c>)
 8000646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000648:	4b09      	ldr	r3, [pc, #36]	; (8000670 <CORE_InitGPIO+0x7c>)
 800064a:	2104      	movs	r1, #4
 800064c:	430a      	orrs	r2, r1
 800064e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000650:	4b07      	ldr	r3, [pc, #28]	; (8000670 <CORE_InitGPIO+0x7c>)
 8000652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000654:	2204      	movs	r2, #4
 8000656:	4013      	ands	r3, r2
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
	GPIO_Deinit(GPIOC, GPIO_PIN_All);
 800065c:	4a06      	ldr	r2, [pc, #24]	; (8000678 <CORE_InitGPIO+0x84>)
 800065e:	4b08      	ldr	r3, [pc, #32]	; (8000680 <CORE_InitGPIO+0x8c>)
 8000660:	0011      	movs	r1, r2
 8000662:	0018      	movs	r0, r3
 8000664:	f7ff ff3e 	bl	80004e4 <GPIO_Deinit>

#if defined(GPIOD)
	__HAL_RCC_GPIOD_CLK_ENABLE();
	GPIO_Deinit(GPIOD, GPIO_PIN_All);
#endif
}
 8000668:	46c0      	nop			; (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	b004      	add	sp, #16
 800066e:	bd80      	pop	{r7, pc}
 8000670:	40021000 	.word	0x40021000
 8000674:	00009fff 	.word	0x00009fff
 8000678:	0000ffff 	.word	0x0000ffff
 800067c:	50000400 	.word	0x50000400
 8000680:	50000800 	.word	0x50000800

08000684 <SysTick_Handler>:
/*
 * INTERRUPT ROUTINES
 */

void SysTick_Handler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	gTicks += MS_PER_SYSTICK;
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <SysTick_Handler+0x14>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	1c5a      	adds	r2, r3, #1
 800068e:	4b02      	ldr	r3, [pc, #8]	; (8000698 <SysTick_Handler+0x14>)
 8000690:	601a      	str	r2, [r3, #0]
	if (gTickCallback != NULL)
	{
		gTickCallback();
	}
#endif
}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000ec 	.word	0x200000ec

0800069c <GPIO_Set>:
	GPIO_Init(gpio, pin, GPIO_Mode_Output);
}

// IO calls
static inline void GPIO_Set(GPIO_t * gpio, uint32_t pin)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
	gpio->BSRR = (uint32_t)pin;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	683a      	ldr	r2, [r7, #0]
 80006aa:	619a      	str	r2, [r3, #24]
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b002      	add	sp, #8
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <GPIO_Reset>:

static inline void GPIO_Reset(GPIO_t * gpio, uint32_t pin)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
	gpio->BRR = (uint32_t)pin;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	683a      	ldr	r2, [r7, #0]
 80006c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80006c4:	46c0      	nop			; (mov r8, r8)
 80006c6:	46bd      	mov	sp, r7
 80006c8:	b002      	add	sp, #8
 80006ca:	bd80      	pop	{r7, pc}

080006cc <GPIO_Write>:
/*
 * PUBLIC FUNCTIONS
 */

void GPIO_Write(GPIO_t * gpio, uint32_t pin, GPIO_State_t state)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	1dfb      	adds	r3, r7, #7
 80006d8:	701a      	strb	r2, [r3, #0]
	if (state)
 80006da:	1dfb      	adds	r3, r7, #7
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d006      	beq.n	80006f0 <GPIO_Write+0x24>
	{
		GPIO_Set(gpio, pin);
 80006e2:	68ba      	ldr	r2, [r7, #8]
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	0011      	movs	r1, r2
 80006e8:	0018      	movs	r0, r3
 80006ea:	f7ff ffd7 	bl	800069c <GPIO_Set>
	}
	else
	{
		GPIO_Reset(gpio, pin);
	}
}
 80006ee:	e005      	b.n	80006fc <GPIO_Write+0x30>
		GPIO_Reset(gpio, pin);
 80006f0:	68ba      	ldr	r2, [r7, #8]
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	0011      	movs	r1, r2
 80006f6:	0018      	movs	r0, r3
 80006f8:	f7ff ffdc 	bl	80006b4 <GPIO_Reset>
}
 80006fc:	46c0      	nop			; (mov r8, r8)
 80006fe:	46bd      	mov	sp, r7
 8000700:	b004      	add	sp, #16
 8000702:	bd80      	pop	{r7, pc}

08000704 <GPIO_EnableAlternate>:

void GPIO_EnableAlternate(GPIO_t * gpio, uint32_t pin, GPIO_Flag_t flags, uint32_t af)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b084      	sub	sp, #16
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	603b      	str	r3, [r7, #0]
 8000710:	1dbb      	adds	r3, r7, #6
 8000712:	801a      	strh	r2, [r3, #0]
	GPIO_ConfigAlternate(gpio, pin, af);
 8000714:	683a      	ldr	r2, [r7, #0]
 8000716:	68b9      	ldr	r1, [r7, #8]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	0018      	movs	r0, r3
 800071c:	f000 f8ab 	bl	8000876 <GPIO_ConfigAlternate>
	GPIO_Init(gpio, pin, GPIO_Mode_Alternate | GPIO_Speed_High | flags);
 8000720:	1dbb      	adds	r3, r7, #6
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	4a05      	ldr	r2, [pc, #20]	; (800073c <GPIO_EnableAlternate+0x38>)
 8000726:	4313      	orrs	r3, r2
 8000728:	b29a      	uxth	r2, r3
 800072a:	68b9      	ldr	r1, [r7, #8]
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	0018      	movs	r0, r3
 8000730:	f000 f832 	bl	8000798 <GPIO_Init>
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b004      	add	sp, #16
 800073a:	bd80      	pop	{r7, pc}
 800073c:	00000302 	.word	0x00000302

08000740 <GPIO_OnChange>:

#ifdef GPIO_USE_IRQS
void GPIO_OnChange(GPIO_t * gpio, uint32_t pin, GPIO_IT_Dir_t dir, VoidFunction_t callback)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b086      	sub	sp, #24
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	1dfb      	adds	r3, r7, #7
 800074e:	701a      	strb	r2, [r3, #0]
	int n = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
	while ((pin & (1 << n)) == 0) { n++; }
 8000754:	e002      	b.n	800075c <GPIO_OnChange+0x1c>
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	3301      	adds	r3, #1
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	2201      	movs	r2, #1
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	409a      	lsls	r2, r3
 8000762:	0013      	movs	r3, r2
 8000764:	001a      	movs	r2, r3
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	4013      	ands	r3, r2
 800076a:	d0f4      	beq.n	8000756 <GPIO_OnChange+0x16>

	gCallback[n] = callback;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <GPIO_OnChange+0x54>)
 800076e:	697a      	ldr	r2, [r7, #20]
 8000770:	0092      	lsls	r2, r2, #2
 8000772:	6839      	ldr	r1, [r7, #0]
 8000774:	50d1      	str	r1, [r2, r3]

	GPIO_ConfigInterrupt(gpio, n, dir);
 8000776:	1dfb      	adds	r3, r7, #7
 8000778:	781a      	ldrb	r2, [r3, #0]
 800077a:	6979      	ldr	r1, [r7, #20]
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	0018      	movs	r0, r3
 8000780:	f000 f8b2 	bl	80008e8 <GPIO_ConfigInterrupt>

	EXTIx_EnableIRQn(n);
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	0018      	movs	r0, r3
 8000788:	f000 f98e 	bl	8000aa8 <EXTIx_EnableIRQn>
}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	b006      	add	sp, #24
 8000792:	bd80      	pop	{r7, pc}
 8000794:	200000f0 	.word	0x200000f0

08000798 <GPIO_Init>:
#endif //GPIO_USE_IRQS

void GPIO_Init(GPIO_t * gpio, uint32_t pins, GPIO_Flag_t mode)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b088      	sub	sp, #32
 800079c:	af00      	add	r7, sp, #0
 800079e:	60f8      	str	r0, [r7, #12]
 80007a0:	60b9      	str	r1, [r7, #8]
 80007a2:	1dbb      	adds	r3, r7, #6
 80007a4:	801a      	strh	r2, [r3, #0]
	uint32_t pinmask = GPIO_SWARBitDouble(pins);
 80007a6:	68bb      	ldr	r3, [r7, #8]
 80007a8:	0018      	movs	r0, r3
 80007aa:	f000 f923 	bl	80009f4 <GPIO_SWARBitDouble>
 80007ae:	0003      	movs	r3, r0
 80007b0:	61fb      	str	r3, [r7, #28]

	GPIO_Mode_t dir = mode & GPIO_Mode_MASK;
 80007b2:	1dbb      	adds	r3, r7, #6
 80007b4:	881b      	ldrh	r3, [r3, #0]
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	201b      	movs	r0, #27
 80007ba:	183b      	adds	r3, r7, r0
 80007bc:	2103      	movs	r1, #3
 80007be:	400a      	ands	r2, r1
 80007c0:	701a      	strb	r2, [r3, #0]

	if (dir == GPIO_Mode_Alternate || dir == GPIO_Mode_Output)
 80007c2:	183b      	adds	r3, r7, r0
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	2b02      	cmp	r3, #2
 80007c8:	d003      	beq.n	80007d2 <GPIO_Init+0x3a>
 80007ca:	183b      	adds	r3, r7, r0
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d126      	bne.n	8000820 <GPIO_Init+0x88>
	{
		uint32_t speed = (mode & GPIO_Speed_MASK) >> GPIOCFG_SPEED_POS;
 80007d2:	1dbb      	adds	r3, r7, #6
 80007d4:	881b      	ldrh	r3, [r3, #0]
 80007d6:	121b      	asrs	r3, r3, #8
 80007d8:	001a      	movs	r2, r3
 80007da:	2303      	movs	r3, #3
 80007dc:	4013      	ands	r3, r2
 80007de:	617b      	str	r3, [r7, #20]
		MODIFY_REG( gpio->OSPEEDR, pinmask * GPIO_OSPEEDER_OSPEED0, pinmask * speed );
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	6899      	ldr	r1, [r3, #8]
 80007e4:	69fa      	ldr	r2, [r7, #28]
 80007e6:	0013      	movs	r3, r2
 80007e8:	005b      	lsls	r3, r3, #1
 80007ea:	189b      	adds	r3, r3, r2
 80007ec:	43db      	mvns	r3, r3
 80007ee:	400b      	ands	r3, r1
 80007f0:	001a      	movs	r2, r3
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	6979      	ldr	r1, [r7, #20]
 80007f6:	434b      	muls	r3, r1
 80007f8:	431a      	orrs	r2, r3
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	609a      	str	r2, [r3, #8]
		MODIFY_REG( gpio->OTYPER, pins, (mode & GPIO_Flag_OpenDrain) ? pins : 0 );
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	68ba      	ldr	r2, [r7, #8]
 8000804:	43d2      	mvns	r2, r2
 8000806:	401a      	ands	r2, r3
 8000808:	1dbb      	adds	r3, r7, #6
 800080a:	8819      	ldrh	r1, [r3, #0]
 800080c:	2380      	movs	r3, #128	; 0x80
 800080e:	015b      	lsls	r3, r3, #5
 8000810:	400b      	ands	r3, r1
 8000812:	d001      	beq.n	8000818 <GPIO_Init+0x80>
 8000814:	68bb      	ldr	r3, [r7, #8]
 8000816:	e000      	b.n	800081a <GPIO_Init+0x82>
 8000818:	2300      	movs	r3, #0
 800081a:	431a      	orrs	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	605a      	str	r2, [r3, #4]
	}

	MODIFY_REG( gpio->MODER, pinmask * GPIO_MODER_MODE0, pinmask * dir);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	6819      	ldr	r1, [r3, #0]
 8000824:	69fa      	ldr	r2, [r7, #28]
 8000826:	0013      	movs	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	189b      	adds	r3, r3, r2
 800082c:	43db      	mvns	r3, r3
 800082e:	400b      	ands	r3, r1
 8000830:	001a      	movs	r2, r3
 8000832:	231b      	movs	r3, #27
 8000834:	18fb      	adds	r3, r7, r3
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	69f9      	ldr	r1, [r7, #28]
 800083a:	434b      	muls	r3, r1
 800083c:	431a      	orrs	r2, r3
 800083e:	68fb      	ldr	r3, [r7, #12]
 8000840:	601a      	str	r2, [r3, #0]
	uint32_t pull = (mode & GPIO_Pull_MASK) >> GPIOCFG_PULL_POS;
 8000842:	1dbb      	adds	r3, r7, #6
 8000844:	881b      	ldrh	r3, [r3, #0]
 8000846:	111b      	asrs	r3, r3, #4
 8000848:	001a      	movs	r2, r3
 800084a:	2303      	movs	r3, #3
 800084c:	4013      	ands	r3, r2
 800084e:	613b      	str	r3, [r7, #16]
	MODIFY_REG( gpio->PUPDR, pinmask * GPIO_PUPDR_PUPD0, pinmask * pull);
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	68d9      	ldr	r1, [r3, #12]
 8000854:	69fa      	ldr	r2, [r7, #28]
 8000856:	0013      	movs	r3, r2
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	189b      	adds	r3, r3, r2
 800085c:	43db      	mvns	r3, r3
 800085e:	400b      	ands	r3, r1
 8000860:	001a      	movs	r2, r3
 8000862:	69fb      	ldr	r3, [r7, #28]
 8000864:	6939      	ldr	r1, [r7, #16]
 8000866:	434b      	muls	r3, r1
 8000868:	431a      	orrs	r2, r3
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	60da      	str	r2, [r3, #12]
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	b008      	add	sp, #32
 8000874:	bd80      	pop	{r7, pc}

08000876 <GPIO_ConfigAlternate>:
/*
 * PRIVATE FUNCTIONS
 */

static void GPIO_ConfigAlternate( GPIO_t * gpio, uint32_t pins, uint32_t af)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b086      	sub	sp, #24
 800087a:	af00      	add	r7, sp, #0
 800087c:	60f8      	str	r0, [r7, #12]
 800087e:	60b9      	str	r1, [r7, #8]
 8000880:	607a      	str	r2, [r7, #4]
	uint32_t pos = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
	while (pins)
 8000886:	e026      	b.n	80008d6 <GPIO_ConfigAlternate+0x60>
	{
		if (pins & 0x1)
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	2201      	movs	r2, #1
 800088c:	4013      	ands	r3, r2
 800088e:	d01c      	beq.n	80008ca <GPIO_ConfigAlternate+0x54>
		{
			uint32_t alt_offset = (pos & 0x7) * 4;
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	2207      	movs	r2, #7
 8000894:	4013      	ands	r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	613b      	str	r3, [r7, #16]
			MODIFY_REG(gpio->AFR[pos >> 3], (0xF << alt_offset), (af << alt_offset));
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	08da      	lsrs	r2, r3, #3
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	3208      	adds	r2, #8
 80008a2:	0092      	lsls	r2, r2, #2
 80008a4:	58d3      	ldr	r3, [r2, r3]
 80008a6:	210f      	movs	r1, #15
 80008a8:	693a      	ldr	r2, [r7, #16]
 80008aa:	4091      	lsls	r1, r2
 80008ac:	000a      	movs	r2, r1
 80008ae:	43d2      	mvns	r2, r2
 80008b0:	401a      	ands	r2, r3
 80008b2:	0011      	movs	r1, r2
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	409a      	lsls	r2, r3
 80008ba:	0013      	movs	r3, r2
 80008bc:	697a      	ldr	r2, [r7, #20]
 80008be:	08d2      	lsrs	r2, r2, #3
 80008c0:	4319      	orrs	r1, r3
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	3208      	adds	r2, #8
 80008c6:	0092      	lsls	r2, r2, #2
 80008c8:	50d1      	str	r1, [r2, r3]
		}
		pins >>= 1;
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	085b      	lsrs	r3, r3, #1
 80008ce:	60bb      	str	r3, [r7, #8]
		pos++;
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	3301      	adds	r3, #1
 80008d4:	617b      	str	r3, [r7, #20]
	while (pins)
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1d5      	bne.n	8000888 <GPIO_ConfigAlternate+0x12>
	}
}
 80008dc:	46c0      	nop			; (mov r8, r8)
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	b006      	add	sp, #24
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <GPIO_ConfigInterrupt>:

#ifdef GPIO_USE_IRQS
static void GPIO_ConfigInterrupt( GPIO_t * gpio, int n, GPIO_IT_Dir_t dir)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b088      	sub	sp, #32
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	1dfb      	adds	r3, r7, #7
 80008f4:	701a      	strb	r2, [r3, #0]
	uint32_t pin = 1 << n;
 80008f6:	2201      	movs	r2, #1
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	409a      	lsls	r2, r3
 80008fc:	0013      	movs	r3, r2
 80008fe:	61fb      	str	r3, [r7, #28]
	if (dir == GPIO_IT_None)
 8000900:	1dfb      	adds	r3, r7, #7
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d107      	bne.n	8000918 <GPIO_ConfigInterrupt+0x30>
	{
		// Disable the EXTI channel.
		CLEAR_BIT(EXTI->IMR, pin);
 8000908:	4b35      	ldr	r3, [pc, #212]	; (80009e0 <GPIO_ConfigInterrupt+0xf8>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	69fb      	ldr	r3, [r7, #28]
 800090e:	43d9      	mvns	r1, r3
 8000910:	4b33      	ldr	r3, [pc, #204]	; (80009e0 <GPIO_ConfigInterrupt+0xf8>)
 8000912:	400a      	ands	r2, r1
 8000914:	601a      	str	r2, [r3, #0]
		// Configure the EXTI channel
		SET_BIT(EXTI->IMR, pin);
		MODIFY_REG(EXTI->RTSR, pin, (dir & GPIO_IT_Rising) ? pin : 0);
		MODIFY_REG(EXTI->FTSR, pin, (dir & GPIO_IT_Falling) ? pin : 0);
	}
}
 8000916:	e05e      	b.n	80009d6 <GPIO_ConfigInterrupt+0xee>
		__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000918:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <GPIO_ConfigInterrupt+0xfc>)
 800091a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800091c:	4b31      	ldr	r3, [pc, #196]	; (80009e4 <GPIO_ConfigInterrupt+0xfc>)
 800091e:	2101      	movs	r1, #1
 8000920:	430a      	orrs	r2, r1
 8000922:	635a      	str	r2, [r3, #52]	; 0x34
		uint32_t gpio_index = GPIO_GET_INDEX(gpio);
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	23a0      	movs	r3, #160	; 0xa0
 8000928:	05db      	lsls	r3, r3, #23
 800092a:	429a      	cmp	r2, r3
 800092c:	d00d      	beq.n	800094a <GPIO_ConfigInterrupt+0x62>
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	4a2d      	ldr	r2, [pc, #180]	; (80009e8 <GPIO_ConfigInterrupt+0x100>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d007      	beq.n	8000946 <GPIO_ConfigInterrupt+0x5e>
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	4a2c      	ldr	r2, [pc, #176]	; (80009ec <GPIO_ConfigInterrupt+0x104>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d101      	bne.n	8000942 <GPIO_ConfigInterrupt+0x5a>
 800093e:	2302      	movs	r3, #2
 8000940:	e004      	b.n	800094c <GPIO_ConfigInterrupt+0x64>
 8000942:	2306      	movs	r3, #6
 8000944:	e002      	b.n	800094c <GPIO_ConfigInterrupt+0x64>
 8000946:	2301      	movs	r3, #1
 8000948:	e000      	b.n	800094c <GPIO_ConfigInterrupt+0x64>
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
		uint32_t offset = (n & 0x3) * 4;
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	2203      	movs	r2, #3
 8000952:	4013      	ands	r3, r2
 8000954:	009b      	lsls	r3, r3, #2
 8000956:	617b      	str	r3, [r7, #20]
		MODIFY_REG(SYSCFG->EXTICR[n >> 2], 0xF << offset, gpio_index << offset);
 8000958:	4a25      	ldr	r2, [pc, #148]	; (80009f0 <GPIO_ConfigInterrupt+0x108>)
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	109b      	asrs	r3, r3, #2
 800095e:	3302      	adds	r3, #2
 8000960:	009b      	lsls	r3, r3, #2
 8000962:	589b      	ldr	r3, [r3, r2]
 8000964:	210f      	movs	r1, #15
 8000966:	697a      	ldr	r2, [r7, #20]
 8000968:	4091      	lsls	r1, r2
 800096a:	000a      	movs	r2, r1
 800096c:	43d2      	mvns	r2, r2
 800096e:	401a      	ands	r2, r3
 8000970:	0011      	movs	r1, r2
 8000972:	69ba      	ldr	r2, [r7, #24]
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	409a      	lsls	r2, r3
 8000978:	481d      	ldr	r0, [pc, #116]	; (80009f0 <GPIO_ConfigInterrupt+0x108>)
 800097a:	68bb      	ldr	r3, [r7, #8]
 800097c:	109b      	asrs	r3, r3, #2
 800097e:	430a      	orrs	r2, r1
 8000980:	3302      	adds	r3, #2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	501a      	str	r2, [r3, r0]
		SET_BIT(EXTI->IMR, pin);
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <GPIO_ConfigInterrupt+0xf8>)
 8000988:	6819      	ldr	r1, [r3, #0]
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <GPIO_ConfigInterrupt+0xf8>)
 800098c:	69fa      	ldr	r2, [r7, #28]
 800098e:	430a      	orrs	r2, r1
 8000990:	601a      	str	r2, [r3, #0]
		MODIFY_REG(EXTI->RTSR, pin, (dir & GPIO_IT_Rising) ? pin : 0);
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <GPIO_ConfigInterrupt+0xf8>)
 8000994:	689b      	ldr	r3, [r3, #8]
 8000996:	69fa      	ldr	r2, [r7, #28]
 8000998:	43d2      	mvns	r2, r2
 800099a:	401a      	ands	r2, r3
 800099c:	0011      	movs	r1, r2
 800099e:	1dfb      	adds	r3, r7, #7
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2201      	movs	r2, #1
 80009a4:	4013      	ands	r3, r2
 80009a6:	d001      	beq.n	80009ac <GPIO_ConfigInterrupt+0xc4>
 80009a8:	69fa      	ldr	r2, [r7, #28]
 80009aa:	e000      	b.n	80009ae <GPIO_ConfigInterrupt+0xc6>
 80009ac:	2200      	movs	r2, #0
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <GPIO_ConfigInterrupt+0xf8>)
 80009b0:	430a      	orrs	r2, r1
 80009b2:	609a      	str	r2, [r3, #8]
		MODIFY_REG(EXTI->FTSR, pin, (dir & GPIO_IT_Falling) ? pin : 0);
 80009b4:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <GPIO_ConfigInterrupt+0xf8>)
 80009b6:	68db      	ldr	r3, [r3, #12]
 80009b8:	69fa      	ldr	r2, [r7, #28]
 80009ba:	43d2      	mvns	r2, r2
 80009bc:	401a      	ands	r2, r3
 80009be:	0011      	movs	r1, r2
 80009c0:	1dfb      	adds	r3, r7, #7
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2202      	movs	r2, #2
 80009c6:	4013      	ands	r3, r2
 80009c8:	d001      	beq.n	80009ce <GPIO_ConfigInterrupt+0xe6>
 80009ca:	69fa      	ldr	r2, [r7, #28]
 80009cc:	e000      	b.n	80009d0 <GPIO_ConfigInterrupt+0xe8>
 80009ce:	2200      	movs	r2, #0
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <GPIO_ConfigInterrupt+0xf8>)
 80009d2:	430a      	orrs	r2, r1
 80009d4:	60da      	str	r2, [r3, #12]
}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b008      	add	sp, #32
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	40010400 	.word	0x40010400
 80009e4:	40021000 	.word	0x40021000
 80009e8:	50000400 	.word	0x50000400
 80009ec:	50000800 	.word	0x50000800
 80009f0:	40010000 	.word	0x40010000

080009f4 <GPIO_SWARBitDouble>:
#endif

static uint32_t GPIO_SWARBitDouble(uint32_t s)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
	s = (s & ~0xFF00FF00) | ((s & 0xFF00FF00) << 8);
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a14      	ldr	r2, [pc, #80]	; (8000a50 <GPIO_SWARBitDouble+0x5c>)
 8000a00:	401a      	ands	r2, r3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	0219      	lsls	r1, r3, #8
 8000a06:	23ff      	movs	r3, #255	; 0xff
 8000a08:	041b      	lsls	r3, r3, #16
 8000a0a:	400b      	ands	r3, r1
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	607b      	str	r3, [r7, #4]
	s = (s & ~0xF0F0F0F0) | ((s & 0xF0F0F0F0) << 4);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a10      	ldr	r2, [pc, #64]	; (8000a54 <GPIO_SWARBitDouble+0x60>)
 8000a14:	401a      	ands	r2, r3
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	011b      	lsls	r3, r3, #4
 8000a1a:	490f      	ldr	r1, [pc, #60]	; (8000a58 <GPIO_SWARBitDouble+0x64>)
 8000a1c:	400b      	ands	r3, r1
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	607b      	str	r3, [r7, #4]
	s = (s & ~0xCCCCCCCC) | ((s & 0xCCCCCCCC) << 2);
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <GPIO_SWARBitDouble+0x68>)
 8000a26:	401a      	ands	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	490c      	ldr	r1, [pc, #48]	; (8000a60 <GPIO_SWARBitDouble+0x6c>)
 8000a2e:	400b      	ands	r3, r1
 8000a30:	4313      	orrs	r3, r2
 8000a32:	607b      	str	r3, [r7, #4]
	s = (s & ~0xAAAAAAAA) | ((s & 0xAAAAAAAA) << 1);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <GPIO_SWARBitDouble+0x70>)
 8000a38:	401a      	ands	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	490a      	ldr	r1, [pc, #40]	; (8000a68 <GPIO_SWARBitDouble+0x74>)
 8000a40:	400b      	ands	r3, r1
 8000a42:	4313      	orrs	r3, r2
 8000a44:	607b      	str	r3, [r7, #4]
	return s;
 8000a46:	687b      	ldr	r3, [r7, #4]
}
 8000a48:	0018      	movs	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	00ff00ff 	.word	0x00ff00ff
 8000a54:	0f0f0f0f 	.word	0x0f0f0f0f
 8000a58:	0f0f0f00 	.word	0x0f0f0f00
 8000a5c:	33333333 	.word	0x33333333
 8000a60:	33333330 	.word	0x33333330
 8000a64:	55555555 	.word	0x55555555
 8000a68:	55555554 	.word	0x55555554

08000a6c <EXTIx_IRQHandler>:


#ifdef GPIO_USE_IRQS
static inline void EXTIx_IRQHandler(int n)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	if (__HAL_GPIO_EXTI_GET_IT(1 << n) != RESET)
 8000a74:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <EXTIx_IRQHandler+0x34>)
 8000a76:	695b      	ldr	r3, [r3, #20]
 8000a78:	2101      	movs	r1, #1
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	4091      	lsls	r1, r2
 8000a7e:	000a      	movs	r2, r1
 8000a80:	4013      	ands	r3, r2
 8000a82:	d009      	beq.n	8000a98 <EXTIx_IRQHandler+0x2c>
	{
		__HAL_GPIO_EXTI_CLEAR_IT(1 << n);
 8000a84:	2201      	movs	r2, #1
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	409a      	lsls	r2, r3
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <EXTIx_IRQHandler+0x34>)
 8000a8c:	615a      	str	r2, [r3, #20]
		gCallback[n]();
 8000a8e:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <EXTIx_IRQHandler+0x38>)
 8000a90:	687a      	ldr	r2, [r7, #4]
 8000a92:	0092      	lsls	r2, r2, #2
 8000a94:	58d3      	ldr	r3, [r2, r3]
 8000a96:	4798      	blx	r3
	}
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b002      	add	sp, #8
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40010400 	.word	0x40010400
 8000aa4:	200000f0 	.word	0x200000f0

08000aa8 <EXTIx_EnableIRQn>:

static void EXTIx_EnableIRQn(int n)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
	if (n <= 1)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	dc03      	bgt.n	8000abe <EXTIx_EnableIRQn+0x16>
	{
		HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000ab6:	2005      	movs	r0, #5
 8000ab8:	f001 fd2d 	bl	8002516 <HAL_NVIC_EnableIRQ>
	}
	else
	{
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
	}
}
 8000abc:	e009      	b.n	8000ad2 <EXTIx_EnableIRQn+0x2a>
	else if (n <= 3)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b03      	cmp	r3, #3
 8000ac2:	dc03      	bgt.n	8000acc <EXTIx_EnableIRQn+0x24>
		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000ac4:	2006      	movs	r0, #6
 8000ac6:	f001 fd26 	bl	8002516 <HAL_NVIC_EnableIRQ>
}
 8000aca:	e002      	b.n	8000ad2 <EXTIx_EnableIRQn+0x2a>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000acc:	2007      	movs	r0, #7
 8000ace:	f001 fd22 	bl	8002516 <HAL_NVIC_EnableIRQ>
}
 8000ad2:	46c0      	nop			; (mov r8, r8)
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	b002      	add	sp, #8
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <EXTI4_15_IRQHandler>:
#if    defined(GPIO_IRQ4_ENABLE) || defined(GPIO_IRQ5_ENABLE) || defined(GPIO_IRQ6_ENABLE)   \
    || defined(GPIO_IRQ7_ENABLE) || defined(GPIO_IRQ8_ENABLE) || defined(GPIO_IRQ9_ENABLE)   \
	|| defined(GPIO_IRQ10_ENABLE) || defined(GPIO_IRQ11_ENABLE) || defined(GPIO_IRQ12_ENABLE)\
	|| defined(GPIO_IRQ13_ENABLE) || defined(GPIO_IRQ14_ENABLE) || defined(GPIO_IRQ15_ENABLE)
void EXTI4_15_IRQHandler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
#endif
#ifdef GPIO_IRQ7_ENABLE
	EXTIx_IRQHandler(7);
#endif
#ifdef GPIO_IRQ8_ENABLE
	EXTIx_IRQHandler(8);
 8000ade:	2008      	movs	r0, #8
 8000ae0:	f7ff ffc4 	bl	8000a6c <EXTIx_IRQHandler>
#endif
#ifdef GPIO_IRQ14_ENABLE
	EXTIx_IRQHandler(14);
#endif
#ifdef GPIO_IRQ15_ENABLE
	EXTIx_IRQHandler(15);
 8000ae4:	200f      	movs	r0, #15
 8000ae6:	f7ff ffc1 	bl	8000a6c <EXTIx_IRQHandler>
#endif
}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <GPIO_EnableOutput>:
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	701a      	strb	r2, [r3, #0]
	GPIO_Write(gpio, pin, state);
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	781a      	ldrb	r2, [r3, #0]
 8000b02:	68b9      	ldr	r1, [r7, #8]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	0018      	movs	r0, r3
 8000b08:	f7ff fde0 	bl	80006cc <GPIO_Write>
	GPIO_Init(gpio, pin, GPIO_Mode_Output);
 8000b0c:	68b9      	ldr	r1, [r7, #8]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	2201      	movs	r2, #1
 8000b12:	0018      	movs	r0, r3
 8000b14:	f7ff fe40 	bl	8000798 <GPIO_Init>
}
 8000b18:	46c0      	nop			; (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b004      	add	sp, #16
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <GPIO_Set>:
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	6039      	str	r1, [r7, #0]
	gpio->BSRR = (uint32_t)pin;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	683a      	ldr	r2, [r7, #0]
 8000b2e:	619a      	str	r2, [r3, #24]
}
 8000b30:	46c0      	nop			; (mov r8, r8)
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b002      	add	sp, #8
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <GPIO_Reset>:
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
	gpio->BRR = (uint32_t)pin;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	683a      	ldr	r2, [r7, #0]
 8000b46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	b002      	add	sp, #8
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <MOTOR_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void MOTOR_Init (void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	GPIO_EnableOutput(FET_P1_GPIO, FET_P1_PIN, GPIO_PIN_RESET);
 8000b54:	23a0      	movs	r3, #160	; 0xa0
 8000b56:	05db      	lsls	r3, r3, #23
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2102      	movs	r1, #2
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f7ff ffc7 	bl	8000af0 <GPIO_EnableOutput>
	GPIO_EnableOutput(FET_P2_GPIO, FET_P2_PIN, GPIO_PIN_RESET);
 8000b62:	23a0      	movs	r3, #160	; 0xa0
 8000b64:	05db      	lsls	r3, r3, #23
 8000b66:	2200      	movs	r2, #0
 8000b68:	2108      	movs	r1, #8
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f7ff ffc0 	bl	8000af0 <GPIO_EnableOutput>
	GPIO_EnableOutput(FET_N1_GPIO, FET_N1_PIN, GPIO_PIN_RESET);
 8000b70:	23a0      	movs	r3, #160	; 0xa0
 8000b72:	05db      	lsls	r3, r3, #23
 8000b74:	2200      	movs	r2, #0
 8000b76:	2101      	movs	r1, #1
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f7ff ffb9 	bl	8000af0 <GPIO_EnableOutput>
	GPIO_EnableOutput(FET_N2_GPIO, FET_N2_PIN, GPIO_PIN_RESET);
 8000b7e:	2380      	movs	r3, #128	; 0x80
 8000b80:	00d9      	lsls	r1, r3, #3
 8000b82:	23a0      	movs	r3, #160	; 0xa0
 8000b84:	05db      	lsls	r3, r3, #23
 8000b86:	2200      	movs	r2, #0
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f7ff ffb1 	bl	8000af0 <GPIO_EnableOutput>
}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <MOTOR_Update>:

/*
 * UPDATE THE MOTOR SPEED
 */
void MOTOR_Update (void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
	// INIT DRIVE STATUS VARIABLES
	static bool r_prev = false;
	static uint32_t m_prev = MOTOR_OFF;
	bool reverse = false;
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
	int32_t motor = (input - RADIO_CENTER);
 8000ba0:	4be1      	ldr	r3, [pc, #900]	; (8000f28 <MOTOR_Update+0x394>)
 8000ba2:	881b      	ldrh	r3, [r3, #0]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	4ae1      	ldr	r2, [pc, #900]	; (8000f2c <MOTOR_Update+0x398>)
 8000ba8:	4694      	mov	ip, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	603b      	str	r3, [r7, #0]

	if (motor < MOTOR_OFF)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	da05      	bge.n	8000bc0 <MOTOR_Update+0x2c>
	{
		motor = -motor;
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	603b      	str	r3, [r7, #0]
		reverse = true;
 8000bba:	1dfb      	adds	r3, r7, #7
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	701a      	strb	r2, [r3, #0]
	}


	if (m_prev == MOTOR_OFF && motor < (MOTOR_OFF_ERROR + MOTOR_OFF_HYST))
 8000bc0:	4bdb      	ldr	r3, [pc, #876]	; (8000f30 <MOTOR_Update+0x39c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d105      	bne.n	8000bd4 <MOTOR_Update+0x40>
 8000bc8:	683b      	ldr	r3, [r7, #0]
 8000bca:	2b3b      	cmp	r3, #59	; 0x3b
 8000bcc:	dc02      	bgt.n	8000bd4 <MOTOR_Update+0x40>
	{
		motor = MOTOR_OFF;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	603b      	str	r3, [r7, #0]
 8000bd2:	e011      	b.n	8000bf8 <MOTOR_Update+0x64>
	}
	else if (m_prev != MOTOR_OFF && motor < MOTOR_OFF_ERROR)
 8000bd4:	4bd6      	ldr	r3, [pc, #856]	; (8000f30 <MOTOR_Update+0x39c>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d005      	beq.n	8000be8 <MOTOR_Update+0x54>
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	2b31      	cmp	r3, #49	; 0x31
 8000be0:	dc02      	bgt.n	8000be8 <MOTOR_Update+0x54>
	{
		motor = MOTOR_OFF;
 8000be2:	2300      	movs	r3, #0
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	e007      	b.n	8000bf8 <MOTOR_Update+0x64>
	}
	else if (motor > (MOTOR_MAX - MOTOR_MAX_ERROR))
 8000be8:	683a      	ldr	r2, [r7, #0]
 8000bea:	23f5      	movs	r3, #245	; 0xf5
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	dd02      	ble.n	8000bf8 <MOTOR_Update+0x64>
	{
		motor = MOTOR_MAX;
 8000bf2:	23fa      	movs	r3, #250	; 0xfa
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	603b      	str	r3, [r7, #0]
	}



	if (motor == m_prev && reverse == r_prev)
 8000bf8:	4bcd      	ldr	r3, [pc, #820]	; (8000f30 <MOTOR_Update+0x39c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	001a      	movs	r2, r3
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	4293      	cmp	r3, r2
 8000c02:	d106      	bne.n	8000c12 <MOTOR_Update+0x7e>
 8000c04:	4bcb      	ldr	r3, [pc, #812]	; (8000f34 <MOTOR_Update+0x3a0>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	1dfa      	adds	r2, r7, #7
 8000c0a:	7812      	ldrb	r2, [r2, #0]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d100      	bne.n	8000c12 <MOTOR_Update+0x7e>
 8000c10:	e2ec      	b.n	80011ec <MOTOR_Update+0x658>
	{
		return;
	}

	if (motor == MOTOR_OFF)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d136      	bne.n	8000c86 <MOTOR_Update+0xf2>
	{
		TIM_Deinit(TIM_MOTOR);
 8000c18:	4bc7      	ldr	r3, [pc, #796]	; (8000f38 <MOTOR_Update+0x3a4>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f000 fea7 	bl	8001970 <TIM_Deinit>
		CORE_Delay(1);
 8000c22:	2001      	movs	r0, #1
 8000c24:	f7ff fcb2 	bl	800058c <CORE_Delay>
		GPIO_Reset(FET_P1_GPIO, FET_P1_PIN);
 8000c28:	23a0      	movs	r3, #160	; 0xa0
 8000c2a:	05db      	lsls	r3, r3, #23
 8000c2c:	2102      	movs	r1, #2
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f7ff ff82 	bl	8000b38 <GPIO_Reset>
		GPIO_Reset(FET_N2_GPIO, FET_N2_PIN);
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	00da      	lsls	r2, r3, #3
 8000c38:	23a0      	movs	r3, #160	; 0xa0
 8000c3a:	05db      	lsls	r3, r3, #23
 8000c3c:	0011      	movs	r1, r2
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f7ff ff7a 	bl	8000b38 <GPIO_Reset>
		GPIO_Reset(FET_P2_GPIO, FET_P2_PIN);
 8000c44:	23a0      	movs	r3, #160	; 0xa0
 8000c46:	05db      	lsls	r3, r3, #23
 8000c48:	2108      	movs	r1, #8
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f7ff ff74 	bl	8000b38 <GPIO_Reset>
		GPIO_Reset(FET_N1_GPIO, FET_N1_PIN);
 8000c50:	23a0      	movs	r3, #160	; 0xa0
 8000c52:	05db      	lsls	r3, r3, #23
 8000c54:	2101      	movs	r1, #1
 8000c56:	0018      	movs	r0, r3
 8000c58:	f7ff ff6e 	bl	8000b38 <GPIO_Reset>
		CORE_Delay(1);
 8000c5c:	2001      	movs	r0, #1
 8000c5e:	f7ff fc95 	bl	800058c <CORE_Delay>
		if (MOTOR_BRAKE)
		{
			GPIO_Set(FET_N1_GPIO, FET_N1_PIN);
 8000c62:	23a0      	movs	r3, #160	; 0xa0
 8000c64:	05db      	lsls	r3, r3, #23
 8000c66:	2101      	movs	r1, #1
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f7ff ff59 	bl	8000b20 <GPIO_Set>
			GPIO_Set(FET_N2_GPIO, FET_N2_PIN);
 8000c6e:	2380      	movs	r3, #128	; 0x80
 8000c70:	00da      	lsls	r2, r3, #3
 8000c72:	23a0      	movs	r3, #160	; 0xa0
 8000c74:	05db      	lsls	r3, r3, #23
 8000c76:	0011      	movs	r1, r2
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f7ff ff51 	bl	8000b20 <GPIO_Set>
			CORE_Delay(1);
 8000c7e:	2001      	movs	r0, #1
 8000c80:	f7ff fc84 	bl	800058c <CORE_Delay>
 8000c84:	e2aa      	b.n	80011dc <MOTOR_Update+0x648>
		}
	}
	else if (reverse)
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d100      	bne.n	8000c90 <MOTOR_Update+0xfc>
 8000c8e:	e15b      	b.n	8000f48 <MOTOR_Update+0x3b4>
	{
		if (motor == MOTOR_MAX)
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	23fa      	movs	r3, #250	; 0xfa
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d160      	bne.n	8000d5c <MOTOR_Update+0x1c8>
		{
			if (r_prev == reverse)
 8000c9a:	4ba6      	ldr	r3, [pc, #664]	; (8000f34 <MOTOR_Update+0x3a0>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	1dfa      	adds	r2, r7, #7
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d125      	bne.n	8000cf2 <MOTOR_Update+0x15e>
			{
				TIM_Deinit(TIM_MOTOR);
 8000ca6:	4ba4      	ldr	r3, [pc, #656]	; (8000f38 <MOTOR_Update+0x3a4>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	0018      	movs	r0, r3
 8000cac:	f000 fe60 	bl	8001970 <TIM_Deinit>
				CORE_Delay(1);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f7ff fc6b 	bl	800058c <CORE_Delay>
				GPIO_Reset(FET_P1_GPIO, FET_P1_PIN);
 8000cb6:	23a0      	movs	r3, #160	; 0xa0
 8000cb8:	05db      	lsls	r3, r3, #23
 8000cba:	2102      	movs	r1, #2
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f7ff ff3b 	bl	8000b38 <GPIO_Reset>
				GPIO_Reset(FET_N2_GPIO, FET_N2_PIN);
 8000cc2:	2380      	movs	r3, #128	; 0x80
 8000cc4:	00da      	lsls	r2, r3, #3
 8000cc6:	23a0      	movs	r3, #160	; 0xa0
 8000cc8:	05db      	lsls	r3, r3, #23
 8000cca:	0011      	movs	r1, r2
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff ff33 	bl	8000b38 <GPIO_Reset>
				GPIO_Set(FET_P2_GPIO, FET_P2_PIN);
 8000cd2:	23a0      	movs	r3, #160	; 0xa0
 8000cd4:	05db      	lsls	r3, r3, #23
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f7ff ff21 	bl	8000b20 <GPIO_Set>
				GPIO_Set(FET_N1_GPIO, FET_N1_PIN);
 8000cde:	23a0      	movs	r3, #160	; 0xa0
 8000ce0:	05db      	lsls	r3, r3, #23
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff ff1b 	bl	8000b20 <GPIO_Set>
				CORE_Delay(1);
 8000cea:	2001      	movs	r0, #1
 8000cec:	f7ff fc4e 	bl	800058c <CORE_Delay>
 8000cf0:	e274      	b.n	80011dc <MOTOR_Update+0x648>
			}
			else
			{
				TIM_Deinit(TIM_MOTOR);
 8000cf2:	4b91      	ldr	r3, [pc, #580]	; (8000f38 <MOTOR_Update+0x3a4>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f000 fe3a 	bl	8001970 <TIM_Deinit>
				CORE_Delay(1);
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	f7ff fc45 	bl	800058c <CORE_Delay>
				GPIO_Reset(FET_P1_GPIO, FET_P1_PIN);
 8000d02:	23a0      	movs	r3, #160	; 0xa0
 8000d04:	05db      	lsls	r3, r3, #23
 8000d06:	2102      	movs	r1, #2
 8000d08:	0018      	movs	r0, r3
 8000d0a:	f7ff ff15 	bl	8000b38 <GPIO_Reset>
				GPIO_Reset(FET_N2_GPIO, FET_N2_PIN);
 8000d0e:	2380      	movs	r3, #128	; 0x80
 8000d10:	00da      	lsls	r2, r3, #3
 8000d12:	23a0      	movs	r3, #160	; 0xa0
 8000d14:	05db      	lsls	r3, r3, #23
 8000d16:	0011      	movs	r1, r2
 8000d18:	0018      	movs	r0, r3
 8000d1a:	f7ff ff0d 	bl	8000b38 <GPIO_Reset>
				GPIO_Reset(FET_P2_GPIO, FET_P2_PIN);
 8000d1e:	23a0      	movs	r3, #160	; 0xa0
 8000d20:	05db      	lsls	r3, r3, #23
 8000d22:	2108      	movs	r1, #8
 8000d24:	0018      	movs	r0, r3
 8000d26:	f7ff ff07 	bl	8000b38 <GPIO_Reset>
				GPIO_Reset(FET_N1_GPIO, FET_N1_PIN);
 8000d2a:	23a0      	movs	r3, #160	; 0xa0
 8000d2c:	05db      	lsls	r3, r3, #23
 8000d2e:	2101      	movs	r1, #1
 8000d30:	0018      	movs	r0, r3
 8000d32:	f7ff ff01 	bl	8000b38 <GPIO_Reset>
				CORE_Delay(1);
 8000d36:	2001      	movs	r0, #1
 8000d38:	f7ff fc28 	bl	800058c <CORE_Delay>
				GPIO_Set(FET_P2_GPIO, FET_P2_PIN);
 8000d3c:	23a0      	movs	r3, #160	; 0xa0
 8000d3e:	05db      	lsls	r3, r3, #23
 8000d40:	2108      	movs	r1, #8
 8000d42:	0018      	movs	r0, r3
 8000d44:	f7ff feec 	bl	8000b20 <GPIO_Set>
				GPIO_Set(FET_N1_GPIO, FET_N1_PIN);
 8000d48:	23a0      	movs	r3, #160	; 0xa0
 8000d4a:	05db      	lsls	r3, r3, #23
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f7ff fee6 	bl	8000b20 <GPIO_Set>
				CORE_Delay(1);
 8000d54:	2001      	movs	r0, #1
 8000d56:	f7ff fc19 	bl	800058c <CORE_Delay>
 8000d5a:	e23f      	b.n	80011dc <MOTOR_Update+0x648>
			}
		}
		else if (m_prev == MOTOR_OFF)
 8000d5c:	4b74      	ldr	r3, [pc, #464]	; (8000f30 <MOTOR_Update+0x39c>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d148      	bne.n	8000df6 <MOTOR_Update+0x262>
		{
			GPIO_Reset(FET_P1_GPIO, FET_P1_PIN);
 8000d64:	23a0      	movs	r3, #160	; 0xa0
 8000d66:	05db      	lsls	r3, r3, #23
 8000d68:	2102      	movs	r1, #2
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f7ff fee4 	bl	8000b38 <GPIO_Reset>
			GPIO_Reset(FET_N2_GPIO, FET_N2_PIN);
 8000d70:	2380      	movs	r3, #128	; 0x80
 8000d72:	00da      	lsls	r2, r3, #3
 8000d74:	23a0      	movs	r3, #160	; 0xa0
 8000d76:	05db      	lsls	r3, r3, #23
 8000d78:	0011      	movs	r1, r2
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f7ff fedc 	bl	8000b38 <GPIO_Reset>
			GPIO_Reset(FET_P2_GPIO, FET_P2_PIN);
 8000d80:	23a0      	movs	r3, #160	; 0xa0
 8000d82:	05db      	lsls	r3, r3, #23
 8000d84:	2108      	movs	r1, #8
 8000d86:	0018      	movs	r0, r3
 8000d88:	f7ff fed6 	bl	8000b38 <GPIO_Reset>
			GPIO_Reset(FET_N1_GPIO, FET_N1_PIN);
 8000d8c:	23a0      	movs	r3, #160	; 0xa0
 8000d8e:	05db      	lsls	r3, r3, #23
 8000d90:	2101      	movs	r1, #1
 8000d92:	0018      	movs	r0, r3
 8000d94:	f7ff fed0 	bl	8000b38 <GPIO_Reset>
			CORE_Delay(1);
 8000d98:	2001      	movs	r0, #1
 8000d9a:	f7ff fbf7 	bl	800058c <CORE_Delay>
			GPIO_Set(FET_P2_GPIO, FET_P2_PIN);
 8000d9e:	23a0      	movs	r3, #160	; 0xa0
 8000da0:	05db      	lsls	r3, r3, #23
 8000da2:	2108      	movs	r1, #8
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff febb 	bl	8000b20 <GPIO_Set>
			CORE_Delay(1);
 8000daa:	2001      	movs	r0, #1
 8000dac:	f7ff fbee 	bl	800058c <CORE_Delay>
			TIM_Init(TIM_MOTOR, TIM_MOTOR_FREQ, TIM_MOTOR_RELOAD);
 8000db0:	4b61      	ldr	r3, [pc, #388]	; (8000f38 <MOTOR_Update+0x3a4>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	22fa      	movs	r2, #250	; 0xfa
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	4960      	ldr	r1, [pc, #384]	; (8000f3c <MOTOR_Update+0x3a8>)
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f000 fd0a 	bl	80017d4 <TIM_Init>
			TIM_OnPulse(TIM_MOTOR, TIM_MOTOR_CH, MOTOR_N1TimerPulseISR);
 8000dc0:	4b5d      	ldr	r3, [pc, #372]	; (8000f38 <MOTOR_Update+0x3a4>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a5e      	ldr	r2, [pc, #376]	; (8000f40 <MOTOR_Update+0x3ac>)
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	0018      	movs	r0, r3
 8000dca:	f000 fd67 	bl	800189c <TIM_OnPulse>
			TIM_OnReload(TIM_MOTOR, MOTOR_N1TimerReloadISR);
 8000dce:	4b5a      	ldr	r3, [pc, #360]	; (8000f38 <MOTOR_Update+0x3a4>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a5c      	ldr	r2, [pc, #368]	; (8000f44 <MOTOR_Update+0x3b0>)
 8000dd4:	0011      	movs	r1, r2
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f000 fd4c 	bl	8001874 <TIM_OnReload>
			TIM_SetPulse(TIM_MOTOR, TIM_MOTOR_CH, motor);
 8000ddc:	4b56      	ldr	r3, [pc, #344]	; (8000f38 <MOTOR_Update+0x3a4>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	683a      	ldr	r2, [r7, #0]
 8000de2:	2100      	movs	r1, #0
 8000de4:	0018      	movs	r0, r3
 8000de6:	f000 fd80 	bl	80018ea <TIM_SetPulse>
			TIM_Start(TIM_MOTOR);
 8000dea:	4b53      	ldr	r3, [pc, #332]	; (8000f38 <MOTOR_Update+0x3a4>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	0018      	movs	r0, r3
 8000df0:	f000 fda9 	bl	8001946 <TIM_Start>
 8000df4:	e1f2      	b.n	80011dc <MOTOR_Update+0x648>
		}
		else if (m_prev == MOTOR_MAX)
 8000df6:	4b4e      	ldr	r3, [pc, #312]	; (8000f30 <MOTOR_Update+0x39c>)
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	23fa      	movs	r3, #250	; 0xfa
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d000      	beq.n	8000e04 <MOTOR_Update+0x270>
 8000e02:	e088      	b.n	8000f16 <MOTOR_Update+0x382>
		{
			if (r_prev == reverse)
 8000e04:	4b4b      	ldr	r3, [pc, #300]	; (8000f34 <MOTOR_Update+0x3a0>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	1dfa      	adds	r2, r7, #7
 8000e0a:	7812      	ldrb	r2, [r2, #0]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d139      	bne.n	8000e84 <MOTOR_Update+0x2f0>
			{
				GPIO_Reset(FET_P1_GPIO, FET_P1_PIN);
 8000e10:	23a0      	movs	r3, #160	; 0xa0
 8000e12:	05db      	lsls	r3, r3, #23
 8000e14:	2102      	movs	r1, #2
 8000e16:	0018      	movs	r0, r3
 8000e18:	f7ff fe8e 	bl	8000b38 <GPIO_Reset>
				GPIO_Reset(FET_N2_GPIO, FET_N2_PIN);
 8000e1c:	2380      	movs	r3, #128	; 0x80
 8000e1e:	00da      	lsls	r2, r3, #3
 8000e20:	23a0      	movs	r3, #160	; 0xa0
 8000e22:	05db      	lsls	r3, r3, #23
 8000e24:	0011      	movs	r1, r2
 8000e26:	0018      	movs	r0, r3
 8000e28:	f7ff fe86 	bl	8000b38 <GPIO_Reset>
				GPIO_Set(FET_P2_GPIO, FET_P2_PIN);
 8000e2c:	23a0      	movs	r3, #160	; 0xa0
 8000e2e:	05db      	lsls	r3, r3, #23
 8000e30:	2108      	movs	r1, #8
 8000e32:	0018      	movs	r0, r3
 8000e34:	f7ff fe74 	bl	8000b20 <GPIO_Set>
				CORE_Delay(1);
 8000e38:	2001      	movs	r0, #1
 8000e3a:	f7ff fba7 	bl	800058c <CORE_Delay>
				TIM_Init(TIM_MOTOR, TIM_MOTOR_FREQ, TIM_MOTOR_RELOAD);
 8000e3e:	4b3e      	ldr	r3, [pc, #248]	; (8000f38 <MOTOR_Update+0x3a4>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	22fa      	movs	r2, #250	; 0xfa
 8000e44:	0052      	lsls	r2, r2, #1
 8000e46:	493d      	ldr	r1, [pc, #244]	; (8000f3c <MOTOR_Update+0x3a8>)
 8000e48:	0018      	movs	r0, r3
 8000e4a:	f000 fcc3 	bl	80017d4 <TIM_Init>
				TIM_OnPulse(TIM_MOTOR, TIM_MOTOR_CH, MOTOR_N1TimerPulseISR);
 8000e4e:	4b3a      	ldr	r3, [pc, #232]	; (8000f38 <MOTOR_Update+0x3a4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a3b      	ldr	r2, [pc, #236]	; (8000f40 <MOTOR_Update+0x3ac>)
 8000e54:	2100      	movs	r1, #0
 8000e56:	0018      	movs	r0, r3
 8000e58:	f000 fd20 	bl	800189c <TIM_OnPulse>
				TIM_OnReload(TIM_MOTOR, MOTOR_N1TimerReloadISR);
 8000e5c:	4b36      	ldr	r3, [pc, #216]	; (8000f38 <MOTOR_Update+0x3a4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a38      	ldr	r2, [pc, #224]	; (8000f44 <MOTOR_Update+0x3b0>)
 8000e62:	0011      	movs	r1, r2
 8000e64:	0018      	movs	r0, r3
 8000e66:	f000 fd05 	bl	8001874 <TIM_OnReload>
				TIM_SetPulse(TIM_MOTOR, TIM_MOTOR_CH, motor);
 8000e6a:	4b33      	ldr	r3, [pc, #204]	; (8000f38 <MOTOR_Update+0x3a4>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	683a      	ldr	r2, [r7, #0]
 8000e70:	2100      	movs	r1, #0
 8000e72:	0018      	movs	r0, r3
 8000e74:	f000 fd39 	bl	80018ea <TIM_SetPulse>
				TIM_Start(TIM_MOTOR);
 8000e78:	4b2f      	ldr	r3, [pc, #188]	; (8000f38 <MOTOR_Update+0x3a4>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f000 fd62 	bl	8001946 <TIM_Start>
 8000e82:	e1ab      	b.n	80011dc <MOTOR_Update+0x648>
			}
			else
			{
				GPIO_Reset(FET_P1_GPIO, FET_P1_PIN);
 8000e84:	23a0      	movs	r3, #160	; 0xa0
 8000e86:	05db      	lsls	r3, r3, #23
 8000e88:	2102      	movs	r1, #2
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f7ff fe54 	bl	8000b38 <GPIO_Reset>
				GPIO_Reset(FET_N2_GPIO, FET_N2_PIN);
 8000e90:	2380      	movs	r3, #128	; 0x80
 8000e92:	00da      	lsls	r2, r3, #3
 8000e94:	23a0      	movs	r3, #160	; 0xa0
 8000e96:	05db      	lsls	r3, r3, #23
 8000e98:	0011      	movs	r1, r2
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	f7ff fe4c 	bl	8000b38 <GPIO_Reset>
				GPIO_Reset(FET_P2_GPIO, FET_P2_PIN);
 8000ea0:	23a0      	movs	r3, #160	; 0xa0
 8000ea2:	05db      	lsls	r3, r3, #23
 8000ea4:	2108      	movs	r1, #8
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f7ff fe46 	bl	8000b38 <GPIO_Reset>
				GPIO_Reset(FET_N1_GPIO, FET_N1_PIN);
 8000eac:	23a0      	movs	r3, #160	; 0xa0
 8000eae:	05db      	lsls	r3, r3, #23
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f7ff fe40 	bl	8000b38 <GPIO_Reset>
				CORE_Delay(1);
 8000eb8:	2001      	movs	r0, #1
 8000eba:	f7ff fb67 	bl	800058c <CORE_Delay>
				GPIO_Set(FET_P2_GPIO, FET_P2_PIN);
 8000ebe:	23a0      	movs	r3, #160	; 0xa0
 8000ec0:	05db      	lsls	r3, r3, #23
 8000ec2:	2108      	movs	r1, #8
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f7ff fe2b 	bl	8000b20 <GPIO_Set>
				CORE_Delay(1);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff fb5e 	bl	800058c <CORE_Delay>
				TIM_Init(TIM_MOTOR, TIM_MOTOR_FREQ, TIM_MOTOR_RELOAD);
 8000ed0:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MOTOR_Update+0x3a4>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	22fa      	movs	r2, #250	; 0xfa
 8000ed6:	0052      	lsls	r2, r2, #1
 8000ed8:	4918      	ldr	r1, [pc, #96]	; (8000f3c <MOTOR_Update+0x3a8>)
 8000eda:	0018      	movs	r0, r3
 8000edc:	f000 fc7a 	bl	80017d4 <TIM_Init>
				TIM_OnPulse(TIM_MOTOR, TIM_MOTOR_CH, MOTOR_N1TimerPulseISR);
 8000ee0:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <MOTOR_Update+0x3a4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a16      	ldr	r2, [pc, #88]	; (8000f40 <MOTOR_Update+0x3ac>)
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f000 fcd7 	bl	800189c <TIM_OnPulse>
				TIM_OnReload(TIM_MOTOR, MOTOR_N1TimerReloadISR);
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <MOTOR_Update+0x3a4>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a14      	ldr	r2, [pc, #80]	; (8000f44 <MOTOR_Update+0x3b0>)
 8000ef4:	0011      	movs	r1, r2
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	f000 fcbc 	bl	8001874 <TIM_OnReload>
				TIM_SetPulse(TIM_MOTOR, TIM_MOTOR_CH, motor);
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <MOTOR_Update+0x3a4>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	2100      	movs	r1, #0
 8000f04:	0018      	movs	r0, r3
 8000f06:	f000 fcf0 	bl	80018ea <TIM_SetPulse>
				TIM_Start(TIM_MOTOR);
 8000f0a:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <MOTOR_Update+0x3a4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	0018      	movs	r0, r3
 8000f10:	f000 fd19 	bl	8001946 <TIM_Start>
 8000f14:	e162      	b.n	80011dc <MOTOR_Update+0x648>
			}
		}
		else
		{
			TIM_SetPulse(TIM_MOTOR, TIM_MOTOR_CH, motor);
 8000f16:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <MOTOR_Update+0x3a4>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	683a      	ldr	r2, [r7, #0]
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f000 fce3 	bl	80018ea <TIM_SetPulse>
 8000f24:	e15a      	b.n	80011dc <MOTOR_Update+0x648>
 8000f26:	46c0      	nop			; (mov r8, r8)
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	fffffa24 	.word	0xfffffa24
 8000f30:	20000130 	.word	0x20000130
 8000f34:	20000134 	.word	0x20000134
 8000f38:	2000001c 	.word	0x2000001c
 8000f3c:	0000c3b4 	.word	0x0000c3b4
 8000f40:	08001241 	.word	0x08001241
 8000f44:	08001257 	.word	0x08001257
		}
	}
	else // !reverse
	{
		if (motor == MOTOR_MAX)
 8000f48:	683a      	ldr	r2, [r7, #0]
 8000f4a:	23fa      	movs	r3, #250	; 0xfa
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	d162      	bne.n	8001018 <MOTOR_Update+0x484>
			{
				if (r_prev == reverse)
 8000f52:	4ba8      	ldr	r3, [pc, #672]	; (80011f4 <MOTOR_Update+0x660>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	1dfa      	adds	r2, r7, #7
 8000f58:	7812      	ldrb	r2, [r2, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d125      	bne.n	8000faa <MOTOR_Update+0x416>
				{
					TIM_Deinit(TIM_MOTOR);
 8000f5e:	4ba6      	ldr	r3, [pc, #664]	; (80011f8 <MOTOR_Update+0x664>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	0018      	movs	r0, r3
 8000f64:	f000 fd04 	bl	8001970 <TIM_Deinit>
					CORE_Delay(1);
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f7ff fb0f 	bl	800058c <CORE_Delay>
					GPIO_Reset(FET_P2_GPIO, FET_P2_PIN);
 8000f6e:	23a0      	movs	r3, #160	; 0xa0
 8000f70:	05db      	lsls	r3, r3, #23
 8000f72:	2108      	movs	r1, #8
 8000f74:	0018      	movs	r0, r3
 8000f76:	f7ff fddf 	bl	8000b38 <GPIO_Reset>
					GPIO_Reset(FET_N1_GPIO, FET_N1_PIN);
 8000f7a:	23a0      	movs	r3, #160	; 0xa0
 8000f7c:	05db      	lsls	r3, r3, #23
 8000f7e:	2101      	movs	r1, #1
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff fdd9 	bl	8000b38 <GPIO_Reset>
					GPIO_Set(FET_P1_GPIO, FET_P1_PIN);
 8000f86:	23a0      	movs	r3, #160	; 0xa0
 8000f88:	05db      	lsls	r3, r3, #23
 8000f8a:	2102      	movs	r1, #2
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f7ff fdc7 	bl	8000b20 <GPIO_Set>
					GPIO_Set(FET_N2_GPIO, FET_N2_PIN);
 8000f92:	2380      	movs	r3, #128	; 0x80
 8000f94:	00da      	lsls	r2, r3, #3
 8000f96:	23a0      	movs	r3, #160	; 0xa0
 8000f98:	05db      	lsls	r3, r3, #23
 8000f9a:	0011      	movs	r1, r2
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f7ff fdbf 	bl	8000b20 <GPIO_Set>
					CORE_Delay(1);
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f7ff faf2 	bl	800058c <CORE_Delay>
 8000fa8:	e118      	b.n	80011dc <MOTOR_Update+0x648>
				}
				else
				{
					TIM_Deinit(TIM_MOTOR);
 8000faa:	4b93      	ldr	r3, [pc, #588]	; (80011f8 <MOTOR_Update+0x664>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f000 fcde 	bl	8001970 <TIM_Deinit>
					CORE_Delay(1);
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f7ff fae9 	bl	800058c <CORE_Delay>
					GPIO_Reset(FET_P1_GPIO, FET_P1_PIN);
 8000fba:	23a0      	movs	r3, #160	; 0xa0
 8000fbc:	05db      	lsls	r3, r3, #23
 8000fbe:	2102      	movs	r1, #2
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f7ff fdb9 	bl	8000b38 <GPIO_Reset>
					GPIO_Reset(FET_N2_GPIO, FET_N2_PIN);
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	00da      	lsls	r2, r3, #3
 8000fca:	23a0      	movs	r3, #160	; 0xa0
 8000fcc:	05db      	lsls	r3, r3, #23
 8000fce:	0011      	movs	r1, r2
 8000fd0:	0018      	movs	r0, r3
 8000fd2:	f7ff fdb1 	bl	8000b38 <GPIO_Reset>
					GPIO_Reset(FET_P2_GPIO, FET_P2_PIN);
 8000fd6:	23a0      	movs	r3, #160	; 0xa0
 8000fd8:	05db      	lsls	r3, r3, #23
 8000fda:	2108      	movs	r1, #8
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f7ff fdab 	bl	8000b38 <GPIO_Reset>
					GPIO_Reset(FET_N1_GPIO, FET_N1_PIN);
 8000fe2:	23a0      	movs	r3, #160	; 0xa0
 8000fe4:	05db      	lsls	r3, r3, #23
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	0018      	movs	r0, r3
 8000fea:	f7ff fda5 	bl	8000b38 <GPIO_Reset>
					CORE_Delay(1);
 8000fee:	2001      	movs	r0, #1
 8000ff0:	f7ff facc 	bl	800058c <CORE_Delay>
					GPIO_Set(FET_P1_GPIO, FET_P1_PIN);
 8000ff4:	23a0      	movs	r3, #160	; 0xa0
 8000ff6:	05db      	lsls	r3, r3, #23
 8000ff8:	2102      	movs	r1, #2
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f7ff fd90 	bl	8000b20 <GPIO_Set>
					GPIO_Set(FET_N2_GPIO, FET_N2_PIN);
 8001000:	2380      	movs	r3, #128	; 0x80
 8001002:	00da      	lsls	r2, r3, #3
 8001004:	23a0      	movs	r3, #160	; 0xa0
 8001006:	05db      	lsls	r3, r3, #23
 8001008:	0011      	movs	r1, r2
 800100a:	0018      	movs	r0, r3
 800100c:	f7ff fd88 	bl	8000b20 <GPIO_Set>
					CORE_Delay(1);
 8001010:	2001      	movs	r0, #1
 8001012:	f7ff fabb 	bl	800058c <CORE_Delay>
 8001016:	e0e1      	b.n	80011dc <MOTOR_Update+0x648>
				}
			}
			else if (m_prev == MOTOR_OFF)
 8001018:	4b78      	ldr	r3, [pc, #480]	; (80011fc <MOTOR_Update+0x668>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d148      	bne.n	80010b2 <MOTOR_Update+0x51e>
			{
				GPIO_Reset(FET_P1_GPIO, FET_P1_PIN);
 8001020:	23a0      	movs	r3, #160	; 0xa0
 8001022:	05db      	lsls	r3, r3, #23
 8001024:	2102      	movs	r1, #2
 8001026:	0018      	movs	r0, r3
 8001028:	f7ff fd86 	bl	8000b38 <GPIO_Reset>
				GPIO_Reset(FET_N2_GPIO, FET_N2_PIN);
 800102c:	2380      	movs	r3, #128	; 0x80
 800102e:	00da      	lsls	r2, r3, #3
 8001030:	23a0      	movs	r3, #160	; 0xa0
 8001032:	05db      	lsls	r3, r3, #23
 8001034:	0011      	movs	r1, r2
 8001036:	0018      	movs	r0, r3
 8001038:	f7ff fd7e 	bl	8000b38 <GPIO_Reset>
				GPIO_Reset(FET_P2_GPIO, FET_P2_PIN);
 800103c:	23a0      	movs	r3, #160	; 0xa0
 800103e:	05db      	lsls	r3, r3, #23
 8001040:	2108      	movs	r1, #8
 8001042:	0018      	movs	r0, r3
 8001044:	f7ff fd78 	bl	8000b38 <GPIO_Reset>
				GPIO_Reset(FET_N1_GPIO, FET_N1_PIN);
 8001048:	23a0      	movs	r3, #160	; 0xa0
 800104a:	05db      	lsls	r3, r3, #23
 800104c:	2101      	movs	r1, #1
 800104e:	0018      	movs	r0, r3
 8001050:	f7ff fd72 	bl	8000b38 <GPIO_Reset>
				CORE_Delay(1);
 8001054:	2001      	movs	r0, #1
 8001056:	f7ff fa99 	bl	800058c <CORE_Delay>
				GPIO_Set(FET_P1_GPIO, FET_P1_PIN);
 800105a:	23a0      	movs	r3, #160	; 0xa0
 800105c:	05db      	lsls	r3, r3, #23
 800105e:	2102      	movs	r1, #2
 8001060:	0018      	movs	r0, r3
 8001062:	f7ff fd5d 	bl	8000b20 <GPIO_Set>
				CORE_Delay(1);
 8001066:	2001      	movs	r0, #1
 8001068:	f7ff fa90 	bl	800058c <CORE_Delay>
				TIM_Init(TIM_MOTOR, TIM_MOTOR_FREQ, TIM_MOTOR_RELOAD);
 800106c:	4b62      	ldr	r3, [pc, #392]	; (80011f8 <MOTOR_Update+0x664>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	22fa      	movs	r2, #250	; 0xfa
 8001072:	0052      	lsls	r2, r2, #1
 8001074:	4962      	ldr	r1, [pc, #392]	; (8001200 <MOTOR_Update+0x66c>)
 8001076:	0018      	movs	r0, r3
 8001078:	f000 fbac 	bl	80017d4 <TIM_Init>
				TIM_OnPulse(TIM_MOTOR, TIM_MOTOR_CH, MOTOR_N2TimerPulseISR);
 800107c:	4b5e      	ldr	r3, [pc, #376]	; (80011f8 <MOTOR_Update+0x664>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a60      	ldr	r2, [pc, #384]	; (8001204 <MOTOR_Update+0x670>)
 8001082:	2100      	movs	r1, #0
 8001084:	0018      	movs	r0, r3
 8001086:	f000 fc09 	bl	800189c <TIM_OnPulse>
				TIM_OnReload(TIM_MOTOR, MOTOR_N2TimerReloadISR);
 800108a:	4b5b      	ldr	r3, [pc, #364]	; (80011f8 <MOTOR_Update+0x664>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a5e      	ldr	r2, [pc, #376]	; (8001208 <MOTOR_Update+0x674>)
 8001090:	0011      	movs	r1, r2
 8001092:	0018      	movs	r0, r3
 8001094:	f000 fbee 	bl	8001874 <TIM_OnReload>
				TIM_SetPulse(TIM_MOTOR, TIM_MOTOR_CH, motor);
 8001098:	4b57      	ldr	r3, [pc, #348]	; (80011f8 <MOTOR_Update+0x664>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	2100      	movs	r1, #0
 80010a0:	0018      	movs	r0, r3
 80010a2:	f000 fc22 	bl	80018ea <TIM_SetPulse>
				TIM_Start(TIM_MOTOR);
 80010a6:	4b54      	ldr	r3, [pc, #336]	; (80011f8 <MOTOR_Update+0x664>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	0018      	movs	r0, r3
 80010ac:	f000 fc4b 	bl	8001946 <TIM_Start>
 80010b0:	e094      	b.n	80011dc <MOTOR_Update+0x648>
			}
			else if (m_prev == MOTOR_MAX)
 80010b2:	4b52      	ldr	r3, [pc, #328]	; (80011fc <MOTOR_Update+0x668>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	23fa      	movs	r3, #250	; 0xfa
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	429a      	cmp	r2, r3
 80010bc:	d000      	beq.n	80010c0 <MOTOR_Update+0x52c>
 80010be:	e086      	b.n	80011ce <MOTOR_Update+0x63a>
			{
				if (r_prev == reverse)
 80010c0:	4b4c      	ldr	r3, [pc, #304]	; (80011f4 <MOTOR_Update+0x660>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	1dfa      	adds	r2, r7, #7
 80010c6:	7812      	ldrb	r2, [r2, #0]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d137      	bne.n	800113c <MOTOR_Update+0x5a8>
				{
					GPIO_Reset(FET_P2_GPIO, FET_P2_PIN);
 80010cc:	23a0      	movs	r3, #160	; 0xa0
 80010ce:	05db      	lsls	r3, r3, #23
 80010d0:	2108      	movs	r1, #8
 80010d2:	0018      	movs	r0, r3
 80010d4:	f7ff fd30 	bl	8000b38 <GPIO_Reset>
					GPIO_Reset(FET_N1_GPIO, FET_N1_PIN);
 80010d8:	23a0      	movs	r3, #160	; 0xa0
 80010da:	05db      	lsls	r3, r3, #23
 80010dc:	2101      	movs	r1, #1
 80010de:	0018      	movs	r0, r3
 80010e0:	f7ff fd2a 	bl	8000b38 <GPIO_Reset>
					GPIO_Set(FET_P1_GPIO, FET_P1_PIN);
 80010e4:	23a0      	movs	r3, #160	; 0xa0
 80010e6:	05db      	lsls	r3, r3, #23
 80010e8:	2102      	movs	r1, #2
 80010ea:	0018      	movs	r0, r3
 80010ec:	f7ff fd18 	bl	8000b20 <GPIO_Set>
					CORE_Delay(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f7ff fa4b 	bl	800058c <CORE_Delay>
					TIM_Init(TIM_MOTOR, TIM_MOTOR_FREQ, TIM_MOTOR_RELOAD);
 80010f6:	4b40      	ldr	r3, [pc, #256]	; (80011f8 <MOTOR_Update+0x664>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	22fa      	movs	r2, #250	; 0xfa
 80010fc:	0052      	lsls	r2, r2, #1
 80010fe:	4940      	ldr	r1, [pc, #256]	; (8001200 <MOTOR_Update+0x66c>)
 8001100:	0018      	movs	r0, r3
 8001102:	f000 fb67 	bl	80017d4 <TIM_Init>
					TIM_OnPulse(TIM_MOTOR, TIM_MOTOR_CH, MOTOR_N2TimerPulseISR);
 8001106:	4b3c      	ldr	r3, [pc, #240]	; (80011f8 <MOTOR_Update+0x664>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a3e      	ldr	r2, [pc, #248]	; (8001204 <MOTOR_Update+0x670>)
 800110c:	2100      	movs	r1, #0
 800110e:	0018      	movs	r0, r3
 8001110:	f000 fbc4 	bl	800189c <TIM_OnPulse>
					TIM_OnReload(TIM_MOTOR, MOTOR_N2TimerReloadISR);
 8001114:	4b38      	ldr	r3, [pc, #224]	; (80011f8 <MOTOR_Update+0x664>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a3b      	ldr	r2, [pc, #236]	; (8001208 <MOTOR_Update+0x674>)
 800111a:	0011      	movs	r1, r2
 800111c:	0018      	movs	r0, r3
 800111e:	f000 fba9 	bl	8001874 <TIM_OnReload>
					TIM_SetPulse(TIM_MOTOR, TIM_MOTOR_CH, motor);
 8001122:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <MOTOR_Update+0x664>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	683a      	ldr	r2, [r7, #0]
 8001128:	2100      	movs	r1, #0
 800112a:	0018      	movs	r0, r3
 800112c:	f000 fbdd 	bl	80018ea <TIM_SetPulse>
					TIM_Start(TIM_MOTOR);
 8001130:	4b31      	ldr	r3, [pc, #196]	; (80011f8 <MOTOR_Update+0x664>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	0018      	movs	r0, r3
 8001136:	f000 fc06 	bl	8001946 <TIM_Start>
 800113a:	e04f      	b.n	80011dc <MOTOR_Update+0x648>
				}
				else
				{
					GPIO_Reset(FET_P1_GPIO, FET_P1_PIN);
 800113c:	23a0      	movs	r3, #160	; 0xa0
 800113e:	05db      	lsls	r3, r3, #23
 8001140:	2102      	movs	r1, #2
 8001142:	0018      	movs	r0, r3
 8001144:	f7ff fcf8 	bl	8000b38 <GPIO_Reset>
					GPIO_Reset(FET_N2_GPIO, FET_N2_PIN);
 8001148:	2380      	movs	r3, #128	; 0x80
 800114a:	00da      	lsls	r2, r3, #3
 800114c:	23a0      	movs	r3, #160	; 0xa0
 800114e:	05db      	lsls	r3, r3, #23
 8001150:	0011      	movs	r1, r2
 8001152:	0018      	movs	r0, r3
 8001154:	f7ff fcf0 	bl	8000b38 <GPIO_Reset>
					GPIO_Reset(FET_P2_GPIO, FET_P2_PIN);
 8001158:	23a0      	movs	r3, #160	; 0xa0
 800115a:	05db      	lsls	r3, r3, #23
 800115c:	2108      	movs	r1, #8
 800115e:	0018      	movs	r0, r3
 8001160:	f7ff fcea 	bl	8000b38 <GPIO_Reset>
					GPIO_Reset(FET_N1_GPIO, FET_N1_PIN);
 8001164:	23a0      	movs	r3, #160	; 0xa0
 8001166:	05db      	lsls	r3, r3, #23
 8001168:	2101      	movs	r1, #1
 800116a:	0018      	movs	r0, r3
 800116c:	f7ff fce4 	bl	8000b38 <GPIO_Reset>
					CORE_Delay(1);
 8001170:	2001      	movs	r0, #1
 8001172:	f7ff fa0b 	bl	800058c <CORE_Delay>
					GPIO_Set(FET_P1_GPIO, FET_P1_PIN);
 8001176:	23a0      	movs	r3, #160	; 0xa0
 8001178:	05db      	lsls	r3, r3, #23
 800117a:	2102      	movs	r1, #2
 800117c:	0018      	movs	r0, r3
 800117e:	f7ff fccf 	bl	8000b20 <GPIO_Set>
					CORE_Delay(1);
 8001182:	2001      	movs	r0, #1
 8001184:	f7ff fa02 	bl	800058c <CORE_Delay>
					TIM_Init(TIM_MOTOR, TIM_MOTOR_FREQ, TIM_MOTOR_RELOAD);
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <MOTOR_Update+0x664>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	22fa      	movs	r2, #250	; 0xfa
 800118e:	0052      	lsls	r2, r2, #1
 8001190:	491b      	ldr	r1, [pc, #108]	; (8001200 <MOTOR_Update+0x66c>)
 8001192:	0018      	movs	r0, r3
 8001194:	f000 fb1e 	bl	80017d4 <TIM_Init>
					TIM_OnPulse(TIM_MOTOR, TIM_MOTOR_CH, MOTOR_N2TimerPulseISR);
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <MOTOR_Update+0x664>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a19      	ldr	r2, [pc, #100]	; (8001204 <MOTOR_Update+0x670>)
 800119e:	2100      	movs	r1, #0
 80011a0:	0018      	movs	r0, r3
 80011a2:	f000 fb7b 	bl	800189c <TIM_OnPulse>
					TIM_OnReload(TIM_MOTOR, MOTOR_N2TimerReloadISR);
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <MOTOR_Update+0x664>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a17      	ldr	r2, [pc, #92]	; (8001208 <MOTOR_Update+0x674>)
 80011ac:	0011      	movs	r1, r2
 80011ae:	0018      	movs	r0, r3
 80011b0:	f000 fb60 	bl	8001874 <TIM_OnReload>
					TIM_SetPulse(TIM_MOTOR, TIM_MOTOR_CH, motor);
 80011b4:	4b10      	ldr	r3, [pc, #64]	; (80011f8 <MOTOR_Update+0x664>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	2100      	movs	r1, #0
 80011bc:	0018      	movs	r0, r3
 80011be:	f000 fb94 	bl	80018ea <TIM_SetPulse>
					TIM_Start(TIM_MOTOR);
 80011c2:	4b0d      	ldr	r3, [pc, #52]	; (80011f8 <MOTOR_Update+0x664>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	0018      	movs	r0, r3
 80011c8:	f000 fbbd 	bl	8001946 <TIM_Start>
 80011cc:	e006      	b.n	80011dc <MOTOR_Update+0x648>
				}
			}
			else
			{
				TIM_SetPulse(TIM_MOTOR, TIM_MOTOR_CH, motor);
 80011ce:	4b0a      	ldr	r3, [pc, #40]	; (80011f8 <MOTOR_Update+0x664>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	683a      	ldr	r2, [r7, #0]
 80011d4:	2100      	movs	r1, #0
 80011d6:	0018      	movs	r0, r3
 80011d8:	f000 fb87 	bl	80018ea <TIM_SetPulse>
			}
	}

	// UPDATE STATUS VARIABLES
	m_prev = motor;
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <MOTOR_Update+0x668>)
 80011e0:	601a      	str	r2, [r3, #0]
	r_prev = reverse;
 80011e2:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <MOTOR_Update+0x660>)
 80011e4:	1dfa      	adds	r2, r7, #7
 80011e6:	7812      	ldrb	r2, [r2, #0]
 80011e8:	701a      	strb	r2, [r3, #0]
 80011ea:	e000      	b.n	80011ee <MOTOR_Update+0x65a>
		return;
 80011ec:	46c0      	nop			; (mov r8, r8)
}
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b002      	add	sp, #8
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000134 	.word	0x20000134
 80011f8:	2000001c 	.word	0x2000001c
 80011fc:	20000130 	.word	0x20000130
 8001200:	0000c3b4 	.word	0x0000c3b4
 8001204:	0800120d 	.word	0x0800120d
 8001208:	08001227 	.word	0x08001227

0800120c <MOTOR_N2TimerPulseISR>:
/*
 * INTERRUPT ROUTINES
 */

void MOTOR_N2TimerPulseISR (void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
	GPIO_Reset(FET_N2_GPIO, FET_N2_PIN);
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	00da      	lsls	r2, r3, #3
 8001214:	23a0      	movs	r3, #160	; 0xa0
 8001216:	05db      	lsls	r3, r3, #23
 8001218:	0011      	movs	r1, r2
 800121a:	0018      	movs	r0, r3
 800121c:	f7ff fc8c 	bl	8000b38 <GPIO_Reset>
}
 8001220:	46c0      	nop			; (mov r8, r8)
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <MOTOR_N2TimerReloadISR>:

void MOTOR_N2TimerReloadISR (void)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	af00      	add	r7, sp, #0
	GPIO_Set(FET_N2_GPIO, FET_N2_PIN);
 800122a:	2380      	movs	r3, #128	; 0x80
 800122c:	00da      	lsls	r2, r3, #3
 800122e:	23a0      	movs	r3, #160	; 0xa0
 8001230:	05db      	lsls	r3, r3, #23
 8001232:	0011      	movs	r1, r2
 8001234:	0018      	movs	r0, r3
 8001236:	f7ff fc73 	bl	8000b20 <GPIO_Set>
}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <MOTOR_N1TimerPulseISR>:

void MOTOR_N1TimerPulseISR (void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
	GPIO_Reset(FET_N1_GPIO, FET_N1_PIN);
 8001244:	23a0      	movs	r3, #160	; 0xa0
 8001246:	05db      	lsls	r3, r3, #23
 8001248:	2101      	movs	r1, #1
 800124a:	0018      	movs	r0, r3
 800124c:	f7ff fc74 	bl	8000b38 <GPIO_Reset>
}
 8001250:	46c0      	nop			; (mov r8, r8)
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <MOTOR_N1TimerReloadISR>:

void MOTOR_N1TimerReloadISR (void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
	GPIO_Set(FET_N1_GPIO, FET_N1_PIN);
 800125a:	23a0      	movs	r3, #160	; 0xa0
 800125c:	05db      	lsls	r3, r3, #23
 800125e:	2101      	movs	r1, #1
 8001260:	0018      	movs	r0, r3
 8001262:	f7ff fc5d 	bl	8000b20 <GPIO_Set>
}
 8001266:	46c0      	nop			; (mov r8, r8)
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <GPIO_EnableInput>:
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	1dfb      	adds	r3, r7, #7
 8001278:	701a      	strb	r2, [r3, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Input | pull);
 800127a:	1dfb      	adds	r3, r7, #7
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	b29a      	uxth	r2, r3
 8001280:	68b9      	ldr	r1, [r7, #8]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	0018      	movs	r0, r3
 8001286:	f7ff fa87 	bl	8000798 <GPIO_Init>
}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	46bd      	mov	sp, r7
 800128e:	b004      	add	sp, #16
 8001290:	bd80      	pop	{r7, pc}

08001292 <GPIO_Read>:

static inline GPIO_State_t GPIO_Read(GPIO_t * gpio, uint32_t pin)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
	return ((gpio->IDR & pin) > 0);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	4013      	ands	r3, r2
 80012a4:	1e5a      	subs	r2, r3, #1
 80012a6:	4193      	sbcs	r3, r2
 80012a8:	b2db      	uxtb	r3, r3
}
 80012aa:	0018      	movs	r0, r3
 80012ac:	46bd      	mov	sp, r7
 80012ae:	b002      	add	sp, #8
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <TIM_Read>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t TIM_Read(TIM_t * tim)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
	return tim->Instance->CNT;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80012c0:	0018      	movs	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	b002      	add	sp, #8
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <CORE_GetTick>:
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	return gTicks;
 80012cc:	4b02      	ldr	r3, [pc, #8]	; (80012d8 <CORE_GetTick+0x10>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	0018      	movs	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	200000ec 	.word	0x200000ec

080012dc <RADIO_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void RADIO_Init (void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	heartbeatRadio = CORE_GetTick();
 80012e0:	f7ff fff2 	bl	80012c8 <CORE_GetTick>
 80012e4:	0002      	movs	r2, r0
 80012e6:	4b10      	ldr	r3, [pc, #64]	; (8001328 <RADIO_Init+0x4c>)
 80012e8:	601a      	str	r2, [r3, #0]
	GPIO_EnableInput(RADIO_GPIO, RADIO_PIN, GPIO_Pull_None);
 80012ea:	2380      	movs	r3, #128	; 0x80
 80012ec:	0219      	lsls	r1, r3, #8
 80012ee:	23a0      	movs	r3, #160	; 0xa0
 80012f0:	05db      	lsls	r3, r3, #23
 80012f2:	2200      	movs	r2, #0
 80012f4:	0018      	movs	r0, r3
 80012f6:	f7ff ffb9 	bl	800126c <GPIO_EnableInput>
	GPIO_OnChange(RADIO_GPIO, RADIO_PIN, GPIO_IT_Both, RADIO_SPWM_IRQ);
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <RADIO_Init+0x50>)
 80012fc:	2280      	movs	r2, #128	; 0x80
 80012fe:	0211      	lsls	r1, r2, #8
 8001300:	22a0      	movs	r2, #160	; 0xa0
 8001302:	05d0      	lsls	r0, r2, #23
 8001304:	2203      	movs	r2, #3
 8001306:	f7ff fa1b 	bl	8000740 <GPIO_OnChange>
	TIM_Init(TIM_RADIO, TIM_RADIO_FREQ, TIM_RADIO_RELOAD);
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <RADIO_Init+0x54>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a09      	ldr	r2, [pc, #36]	; (8001334 <RADIO_Init+0x58>)
 8001310:	4909      	ldr	r1, [pc, #36]	; (8001338 <RADIO_Init+0x5c>)
 8001312:	0018      	movs	r0, r3
 8001314:	f000 fa5e 	bl	80017d4 <TIM_Init>
	TIM_Start(TIM_RADIO);
 8001318:	4b05      	ldr	r3, [pc, #20]	; (8001330 <RADIO_Init+0x54>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	0018      	movs	r0, r3
 800131e:	f000 fb12 	bl	8001946 <TIM_Start>
}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	2000013c 	.word	0x2000013c
 800132c:	0800133d 	.word	0x0800133d
 8001330:	20000038 	.word	0x20000038
 8001334:	0000ffff 	.word	0x0000ffff
 8001338:	000f4240 	.word	0x000f4240

0800133c <RADIO_SPWM_IRQ>:
/*
 * INTERRUPT ROUTINES
 */

void RADIO_SPWM_IRQ (void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
	uint16_t now = TIM_Read(TIM_RADIO);
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <RADIO_SPWM_IRQ+0x58>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	0018      	movs	r0, r3
 8001348:	f7ff ffb3 	bl	80012b2 <TIM_Read>
 800134c:	0002      	movs	r2, r0
 800134e:	1dbb      	adds	r3, r7, #6
 8001350:	801a      	strh	r2, [r3, #0]
	static uint16_t tick;
	heartbeatRadio = CORE_GetTick();
 8001352:	f7ff ffb9 	bl	80012c8 <CORE_GetTick>
 8001356:	0002      	movs	r2, r0
 8001358:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <RADIO_SPWM_IRQ+0x5c>)
 800135a:	601a      	str	r2, [r3, #0]
	if (GPIO_Read(RADIO_GPIO, RADIO_PIN))
 800135c:	2380      	movs	r3, #128	; 0x80
 800135e:	021a      	lsls	r2, r3, #8
 8001360:	23a0      	movs	r3, #160	; 0xa0
 8001362:	05db      	lsls	r3, r3, #23
 8001364:	0011      	movs	r1, r2
 8001366:	0018      	movs	r0, r3
 8001368:	f7ff ff93 	bl	8001292 <GPIO_Read>
 800136c:	1e03      	subs	r3, r0, #0
 800136e:	d004      	beq.n	800137a <RADIO_SPWM_IRQ+0x3e>
	{
		tick = now;
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <RADIO_SPWM_IRQ+0x60>)
 8001372:	1dba      	adds	r2, r7, #6
 8001374:	8812      	ldrh	r2, [r2, #0]
 8001376:	801a      	strh	r2, [r3, #0]
	}
	else
	{
		input = now - tick;
	}
}
 8001378:	e007      	b.n	800138a <RADIO_SPWM_IRQ+0x4e>
		input = now - tick;
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <RADIO_SPWM_IRQ+0x60>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	1dba      	adds	r2, r7, #6
 8001380:	8812      	ldrh	r2, [r2, #0]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	b29a      	uxth	r2, r3
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <RADIO_SPWM_IRQ+0x64>)
 8001388:	801a      	strh	r2, [r3, #0]
}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b002      	add	sp, #8
 8001390:	bd80      	pop	{r7, pc}
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	20000038 	.word	0x20000038
 8001398:	2000013c 	.word	0x2000013c
 800139c:	20000136 	.word	0x20000136
 80013a0:	20000000 	.word	0x20000000

080013a4 <CORE_GetTick>:
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	return gTicks;
 80013a8:	4b02      	ldr	r3, [pc, #8]	; (80013b4 <CORE_GetTick+0x10>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	0018      	movs	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	46c0      	nop			; (mov r8, r8)
 80013b4:	200000ec 	.word	0x200000ec

080013b8 <GPIO_EnableOutput>:
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	1dfb      	adds	r3, r7, #7
 80013c4:	701a      	strb	r2, [r3, #0]
	GPIO_Write(gpio, pin, state);
 80013c6:	1dfb      	adds	r3, r7, #7
 80013c8:	781a      	ldrb	r2, [r3, #0]
 80013ca:	68b9      	ldr	r1, [r7, #8]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	0018      	movs	r0, r3
 80013d0:	f7ff f97c 	bl	80006cc <GPIO_Write>
	GPIO_Init(gpio, pin, GPIO_Mode_Output);
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2201      	movs	r2, #1
 80013da:	0018      	movs	r0, r3
 80013dc:	f7ff f9dc 	bl	8000798 <GPIO_Init>
}
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b004      	add	sp, #16
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <GPIO_Set>:
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	6039      	str	r1, [r7, #0]
	gpio->BSRR = (uint32_t)pin;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	683a      	ldr	r2, [r7, #0]
 80013f6:	619a      	str	r2, [r3, #24]
}
 80013f8:	46c0      	nop			; (mov r8, r8)
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b002      	add	sp, #8
 80013fe:	bd80      	pop	{r7, pc}

08001400 <GPIO_Reset>:
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
	gpio->BRR = (uint32_t)pin;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	683a      	ldr	r2, [r7, #0]
 800140e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001410:	46c0      	nop			; (mov r8, r8)
 8001412:	46bd      	mov	sp, r7
 8001414:	b002      	add	sp, #8
 8001416:	bd80      	pop	{r7, pc}

08001418 <GPIO_Read>:
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
	return ((gpio->IDR & pin) > 0);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	4013      	ands	r3, r2
 800142a:	1e5a      	subs	r2, r3, #1
 800142c:	4193      	sbcs	r3, r2
 800142e:	b2db      	uxtb	r3, r3
}
 8001430:	0018      	movs	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	b002      	add	sp, #8
 8001436:	bd80      	pop	{r7, pc}

08001438 <SYSTEM_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void SYSTEM_Init (void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
	GPIO_EnableOutput(LED_GRN_GPIO, LED_GRN_PIN, false);
 800143e:	2380      	movs	r3, #128	; 0x80
 8001440:	021b      	lsls	r3, r3, #8
 8001442:	4838      	ldr	r0, [pc, #224]	; (8001524 <SYSTEM_Init+0xec>)
 8001444:	2200      	movs	r2, #0
 8001446:	0019      	movs	r1, r3
 8001448:	f7ff ffb6 	bl	80013b8 <GPIO_EnableOutput>
	GPIO_EnableOutput(LED_RED_GPIO, LED_RED_PIN, false);
 800144c:	2380      	movs	r3, #128	; 0x80
 800144e:	0159      	lsls	r1, r3, #5
 8001450:	23a0      	movs	r3, #160	; 0xa0
 8001452:	05db      	lsls	r3, r3, #23
 8001454:	2200      	movs	r2, #0
 8001456:	0018      	movs	r0, r3
 8001458:	f7ff ffae 	bl	80013b8 <GPIO_EnableOutput>

	UART_Init(DEBUG_UART, DEBUG_BAUD, DEBUG_MODE);
 800145c:	4b32      	ldr	r3, [pc, #200]	; (8001528 <SYSTEM_Init+0xf0>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	22e1      	movs	r2, #225	; 0xe1
 8001462:	0251      	lsls	r1, r2, #9
 8001464:	2200      	movs	r2, #0
 8001466:	0018      	movs	r0, r3
 8001468:	f000 fc12 	bl	8001c90 <UART_Init>

	ADC_Init();
 800146c:	f7fe fed8 	bl	8000220 <ADC_Init>
	CORE_Delay(10);
 8001470:	200a      	movs	r0, #10
 8001472:	f7ff f88b 	bl	800058c <CORE_Delay>
	uint32_t volt = AIN_AinToDivider(ADC_Read(BATTERY_CHANNEL),BATTERY_DET_RLOW, BATTERY_DET_RHIGH);
 8001476:	4b2d      	ldr	r3, [pc, #180]	; (800152c <SYSTEM_Init+0xf4>)
 8001478:	0018      	movs	r0, r3
 800147a:	f7fe ff2f 	bl	80002dc <ADC_Read>
 800147e:	4a2c      	ldr	r2, [pc, #176]	; (8001530 <SYSTEM_Init+0xf8>)
 8001480:	23e1      	movs	r3, #225	; 0xe1
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	0019      	movs	r1, r3
 8001486:	f7fe ff4b 	bl	8000320 <AIN_AinToDivider>
 800148a:	0003      	movs	r3, r0
 800148c:	607b      	str	r3, [r7, #4]

	if (volt >= BATT_1S_LOW && volt <= BATT_1S_HIGH)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a28      	ldr	r2, [pc, #160]	; (8001534 <SYSTEM_Init+0xfc>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d90b      	bls.n	80014ae <SYSTEM_Init+0x76>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a27      	ldr	r2, [pc, #156]	; (8001538 <SYSTEM_Init+0x100>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d807      	bhi.n	80014ae <SYSTEM_Init+0x76>
	{
		battery_fault = BATT_1S_LOW + SYSTEM_BATT_FAULT;
 800149e:	4b27      	ldr	r3, [pc, #156]	; (800153c <SYSTEM_Init+0x104>)
 80014a0:	22e1      	movs	r2, #225	; 0xe1
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	601a      	str	r2, [r3, #0]
		battery_warn = BATT_1S_LOW + SYSTEM_BATT_WARN;
 80014a6:	4b26      	ldr	r3, [pc, #152]	; (8001540 <SYSTEM_Init+0x108>)
 80014a8:	4a26      	ldr	r2, [pc, #152]	; (8001544 <SYSTEM_Init+0x10c>)
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	e035      	b.n	800151a <SYSTEM_Init+0xe2>
	}
	else if (volt >= BATT_2S_LOW && volt <= BATT_2S_HIGH)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a25      	ldr	r2, [pc, #148]	; (8001548 <SYSTEM_Init+0x110>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d90b      	bls.n	80014ce <SYSTEM_Init+0x96>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a24      	ldr	r2, [pc, #144]	; (800154c <SYSTEM_Init+0x114>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d807      	bhi.n	80014ce <SYSTEM_Init+0x96>
	{
		battery_fault = BATT_2S_LOW + SYSTEM_BATT_FAULT;
 80014be:	4b1f      	ldr	r3, [pc, #124]	; (800153c <SYSTEM_Init+0x104>)
 80014c0:	4a23      	ldr	r2, [pc, #140]	; (8001550 <SYSTEM_Init+0x118>)
 80014c2:	601a      	str	r2, [r3, #0]
		battery_warn = BATT_2S_LOW + SYSTEM_BATT_WARN;
 80014c4:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <SYSTEM_Init+0x108>)
 80014c6:	22e1      	movs	r2, #225	; 0xe1
 80014c8:	0152      	lsls	r2, r2, #5
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	e025      	b.n	800151a <SYSTEM_Init+0xe2>
	}
	else if (volt >= BATT_3S_LOW && volt <= BATT_3S_HIGH)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a20      	ldr	r2, [pc, #128]	; (8001554 <SYSTEM_Init+0x11c>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d90a      	bls.n	80014ec <SYSTEM_Init+0xb4>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a1f      	ldr	r2, [pc, #124]	; (8001558 <SYSTEM_Init+0x120>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d806      	bhi.n	80014ec <SYSTEM_Init+0xb4>
	{
		battery_fault = BATT_3S_LOW + SYSTEM_BATT_FAULT;
 80014de:	4b17      	ldr	r3, [pc, #92]	; (800153c <SYSTEM_Init+0x104>)
 80014e0:	4a1e      	ldr	r2, [pc, #120]	; (800155c <SYSTEM_Init+0x124>)
 80014e2:	601a      	str	r2, [r3, #0]
		battery_warn = BATT_3S_LOW + SYSTEM_BATT_WARN;
 80014e4:	4b16      	ldr	r3, [pc, #88]	; (8001540 <SYSTEM_Init+0x108>)
 80014e6:	4a1e      	ldr	r2, [pc, #120]	; (8001560 <SYSTEM_Init+0x128>)
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	e016      	b.n	800151a <SYSTEM_Init+0xe2>
	}
	else if (volt >= BATT_4S_LOW && volt <= BATT_4S_HIGH)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a1d      	ldr	r2, [pc, #116]	; (8001564 <SYSTEM_Init+0x12c>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d90a      	bls.n	800150a <SYSTEM_Init+0xd2>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a1c      	ldr	r2, [pc, #112]	; (8001568 <SYSTEM_Init+0x130>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d806      	bhi.n	800150a <SYSTEM_Init+0xd2>
	{
		battery_fault = BATT_4S_LOW + SYSTEM_BATT_FAULT;
 80014fc:	4b0f      	ldr	r3, [pc, #60]	; (800153c <SYSTEM_Init+0x104>)
 80014fe:	4a1b      	ldr	r2, [pc, #108]	; (800156c <SYSTEM_Init+0x134>)
 8001500:	601a      	str	r2, [r3, #0]
		battery_warn = BATT_4S_LOW + SYSTEM_BATT_WARN;
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <SYSTEM_Init+0x108>)
 8001504:	4a1a      	ldr	r2, [pc, #104]	; (8001570 <SYSTEM_Init+0x138>)
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	e007      	b.n	800151a <SYSTEM_Init+0xe2>
	}
	else
	{
		battery_fault = BATT_1S_LOW + SYSTEM_BATT_FAULT;
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <SYSTEM_Init+0x104>)
 800150c:	22e1      	movs	r2, #225	; 0xe1
 800150e:	0112      	lsls	r2, r2, #4
 8001510:	601a      	str	r2, [r3, #0]
		battery_warn = BATT_1S_LOW + SYSTEM_BATT_WARN;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <SYSTEM_Init+0x108>)
 8001514:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <SYSTEM_Init+0x10c>)
 8001516:	601a      	str	r2, [r3, #0]
	}

}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	46bd      	mov	sp, r7
 800151e:	b002      	add	sp, #8
 8001520:	bd80      	pop	{r7, pc}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	50000800 	.word	0x50000800
 8001528:	20000070 	.word	0x20000070
 800152c:	20000100 	.word	0x20000100
 8001530:	00002710 	.word	0x00002710
 8001534:	00000ce3 	.word	0x00000ce3
 8001538:	00001068 	.word	0x00001068
 800153c:	20000144 	.word	0x20000144
 8001540:	20000140 	.word	0x20000140
 8001544:	00000f3c 	.word	0x00000f3c
 8001548:	000019c7 	.word	0x000019c7
 800154c:	000020d0 	.word	0x000020d0
 8001550:	00001af4 	.word	0x00001af4
 8001554:	000026ab 	.word	0x000026ab
 8001558:	00003138 	.word	0x00003138
 800155c:	000027d8 	.word	0x000027d8
 8001560:	00002904 	.word	0x00002904
 8001564:	0000338f 	.word	0x0000338f
 8001568:	000041a0 	.word	0x000041a0
 800156c:	000034bc 	.word	0x000034bc
 8001570:	000035e8 	.word	0x000035e8

08001574 <SYSTEM_Update>:

void SYSTEM_Update (void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
	uint32_t SystemVolt = AIN_AinToDivider(ADC_Read(BATTERY_CHANNEL),BATTERY_DET_RLOW, BATTERY_DET_RHIGH);
 800157a:	4b89      	ldr	r3, [pc, #548]	; (80017a0 <SYSTEM_Update+0x22c>)
 800157c:	0018      	movs	r0, r3
 800157e:	f7fe fead 	bl	80002dc <ADC_Read>
 8001582:	4a88      	ldr	r2, [pc, #544]	; (80017a4 <SYSTEM_Update+0x230>)
 8001584:	23e1      	movs	r3, #225	; 0xe1
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	0019      	movs	r1, r3
 800158a:	f7fe fec9 	bl	8000320 <AIN_AinToDivider>
 800158e:	0003      	movs	r3, r0
 8001590:	60fb      	str	r3, [r7, #12]
	uint8_t a = (uint8_t)(SystemVolt/100);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	2164      	movs	r1, #100	; 0x64
 8001596:	0018      	movs	r0, r3
 8001598:	f7fe fdb6 	bl	8000108 <__udivsi3>
 800159c:	0003      	movs	r3, r0
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	1cfb      	adds	r3, r7, #3
 80015a2:	701a      	strb	r2, [r3, #0]
	uint32_t SystemInput = CORE_GetTick() - heartbeatRadio;
 80015a4:	f7ff fefe 	bl	80013a4 <CORE_GetTick>
 80015a8:	0002      	movs	r2, r0
 80015aa:	4b7f      	ldr	r3, [pc, #508]	; (80017a8 <SYSTEM_Update+0x234>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	60bb      	str	r3, [r7, #8]


	UART_Write(DEBUG_UART, &a, 1);
 80015b2:	4b7e      	ldr	r3, [pc, #504]	; (80017ac <SYSTEM_Update+0x238>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	1cf9      	adds	r1, r7, #3
 80015b8:	2201      	movs	r2, #1
 80015ba:	0018      	movs	r0, r3
 80015bc:	f000 fbf6 	bl	8001dac <UART_Write>
	UART_WriteFlush(DEBUG_UART);
 80015c0:	4b7a      	ldr	r3, [pc, #488]	; (80017ac <SYSTEM_Update+0x238>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	0018      	movs	r0, r3
 80015c6:	f000 fc23 	bl	8001e10 <UART_WriteFlush>

	if (status.faultBatt == 0) {
 80015ca:	4b79      	ldr	r3, [pc, #484]	; (80017b0 <SYSTEM_Update+0x23c>)
 80015cc:	785b      	ldrb	r3, [r3, #1]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d108      	bne.n	80015e4 <SYSTEM_Update+0x70>
		if (SystemVolt < battery_fault) { status.faultBatt = 1; }
 80015d2:	4b78      	ldr	r3, [pc, #480]	; (80017b4 <SYSTEM_Update+0x240>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	68fa      	ldr	r2, [r7, #12]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d20b      	bcs.n	80015f4 <SYSTEM_Update+0x80>
 80015dc:	4b74      	ldr	r3, [pc, #464]	; (80017b0 <SYSTEM_Update+0x23c>)
 80015de:	2201      	movs	r2, #1
 80015e0:	705a      	strb	r2, [r3, #1]
 80015e2:	e007      	b.n	80015f4 <SYSTEM_Update+0x80>
	}
	else { //status.faultBatt == 1
		if (SystemVolt > battery_fault) { status.faultBatt = 0; }
 80015e4:	4b73      	ldr	r3, [pc, #460]	; (80017b4 <SYSTEM_Update+0x240>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	d902      	bls.n	80015f4 <SYSTEM_Update+0x80>
 80015ee:	4b70      	ldr	r3, [pc, #448]	; (80017b0 <SYSTEM_Update+0x23c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	705a      	strb	r2, [r3, #1]
	}

	if (status.warnBatt == 0) {
 80015f4:	4b6e      	ldr	r3, [pc, #440]	; (80017b0 <SYSTEM_Update+0x23c>)
 80015f6:	789b      	ldrb	r3, [r3, #2]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d108      	bne.n	800160e <SYSTEM_Update+0x9a>
		if (SystemVolt < battery_warn) { status.warnBatt = 1; }
 80015fc:	4b6e      	ldr	r3, [pc, #440]	; (80017b8 <SYSTEM_Update+0x244>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	429a      	cmp	r2, r3
 8001604:	d20b      	bcs.n	800161e <SYSTEM_Update+0xaa>
 8001606:	4b6a      	ldr	r3, [pc, #424]	; (80017b0 <SYSTEM_Update+0x23c>)
 8001608:	2201      	movs	r2, #1
 800160a:	709a      	strb	r2, [r3, #2]
 800160c:	e007      	b.n	800161e <SYSTEM_Update+0xaa>
	}
	else { //status.warnBatt == 1
		if (SystemVolt > battery_warn) { status.warnBatt = 0; }
 800160e:	4b6a      	ldr	r3, [pc, #424]	; (80017b8 <SYSTEM_Update+0x244>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	429a      	cmp	r2, r3
 8001616:	d902      	bls.n	800161e <SYSTEM_Update+0xaa>
 8001618:	4b65      	ldr	r3, [pc, #404]	; (80017b0 <SYSTEM_Update+0x23c>)
 800161a:	2200      	movs	r2, #0
 800161c:	709a      	strb	r2, [r3, #2]
	}

	if (status.faultInput == 0) {
 800161e:	4b64      	ldr	r3, [pc, #400]	; (80017b0 <SYSTEM_Update+0x23c>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d106      	bne.n	8001634 <SYSTEM_Update+0xc0>
		if (SystemInput > SYSTEM_INPUT_TIMEOUT) { status.faultInput = 1; }
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	2b32      	cmp	r3, #50	; 0x32
 800162a:	d909      	bls.n	8001640 <SYSTEM_Update+0xcc>
 800162c:	4b60      	ldr	r3, [pc, #384]	; (80017b0 <SYSTEM_Update+0x23c>)
 800162e:	2201      	movs	r2, #1
 8001630:	701a      	strb	r2, [r3, #0]
 8001632:	e005      	b.n	8001640 <SYSTEM_Update+0xcc>
	}
	else { //status.faultInput == 1
		if (SystemInput < SYSTEM_INPUT_TIMEOUT) { status.faultInput = 0; }
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	2b31      	cmp	r3, #49	; 0x31
 8001638:	d802      	bhi.n	8001640 <SYSTEM_Update+0xcc>
 800163a:	4b5d      	ldr	r3, [pc, #372]	; (80017b0 <SYSTEM_Update+0x23c>)
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
	}

	static uint32_t tick;
	uint32_t now = CORE_GetTick();
 8001640:	f7ff feb0 	bl	80013a4 <CORE_GetTick>
 8001644:	0003      	movs	r3, r0
 8001646:	607b      	str	r3, [r7, #4]

	if (status.faultBatt)
 8001648:	4b59      	ldr	r3, [pc, #356]	; (80017b0 <SYSTEM_Update+0x23c>)
 800164a:	785b      	ldrb	r3, [r3, #1]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d034      	beq.n	80016ba <SYSTEM_Update+0x146>
	{
		if (FAULT_LED_FLASH <= (now - tick))
 8001650:	4b5a      	ldr	r3, [pc, #360]	; (80017bc <SYSTEM_Update+0x248>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	1ad2      	subs	r2, r2, r3
 8001658:	23fa      	movs	r3, #250	; 0xfa
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	429a      	cmp	r2, r3
 800165e:	d200      	bcs.n	8001662 <SYSTEM_Update+0xee>
 8001660:	e09a      	b.n	8001798 <SYSTEM_Update+0x224>
		{
			if (GPIO_Read(LED_GRN_GPIO, LED_GRN_PIN))
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	4a56      	ldr	r2, [pc, #344]	; (80017c0 <SYSTEM_Update+0x24c>)
 8001668:	0019      	movs	r1, r3
 800166a:	0010      	movs	r0, r2
 800166c:	f7ff fed4 	bl	8001418 <GPIO_Read>
 8001670:	1e03      	subs	r3, r0, #0
 8001672:	d00f      	beq.n	8001694 <SYSTEM_Update+0x120>
			{
				GPIO_Reset(LED_GRN_GPIO, LED_GRN_PIN);
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	4a51      	ldr	r2, [pc, #324]	; (80017c0 <SYSTEM_Update+0x24c>)
 800167a:	0019      	movs	r1, r3
 800167c:	0010      	movs	r0, r2
 800167e:	f7ff febf 	bl	8001400 <GPIO_Reset>
				GPIO_Reset(LED_RED_GPIO, LED_RED_PIN);
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	015a      	lsls	r2, r3, #5
 8001686:	23a0      	movs	r3, #160	; 0xa0
 8001688:	05db      	lsls	r3, r3, #23
 800168a:	0011      	movs	r1, r2
 800168c:	0018      	movs	r0, r3
 800168e:	f7ff feb7 	bl	8001400 <GPIO_Reset>
 8001692:	e00e      	b.n	80016b2 <SYSTEM_Update+0x13e>
			}
			else
			{
				GPIO_Set(LED_GRN_GPIO, LED_GRN_PIN);
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	021b      	lsls	r3, r3, #8
 8001698:	4a49      	ldr	r2, [pc, #292]	; (80017c0 <SYSTEM_Update+0x24c>)
 800169a:	0019      	movs	r1, r3
 800169c:	0010      	movs	r0, r2
 800169e:	f7ff fea3 	bl	80013e8 <GPIO_Set>
				GPIO_Set(LED_RED_GPIO, LED_RED_PIN);
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	015a      	lsls	r2, r3, #5
 80016a6:	23a0      	movs	r3, #160	; 0xa0
 80016a8:	05db      	lsls	r3, r3, #23
 80016aa:	0011      	movs	r1, r2
 80016ac:	0018      	movs	r0, r3
 80016ae:	f7ff fe9b 	bl	80013e8 <GPIO_Set>
			}
			tick = now;
 80016b2:	4b42      	ldr	r3, [pc, #264]	; (80017bc <SYSTEM_Update+0x248>)
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	601a      	str	r2, [r3, #0]
	else
	{
		GPIO_Reset(LED_GRN_GPIO, LED_GRN_PIN);
		GPIO_Set(LED_RED_GPIO, LED_RED_PIN);
	}
}
 80016b8:	e06e      	b.n	8001798 <SYSTEM_Update+0x224>
	else if (status.faultInput)
 80016ba:	4b3d      	ldr	r3, [pc, #244]	; (80017b0 <SYSTEM_Update+0x23c>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d02b      	beq.n	800171a <SYSTEM_Update+0x1a6>
		GPIO_Reset(LED_RED_GPIO, LED_RED_PIN);
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	015a      	lsls	r2, r3, #5
 80016c6:	23a0      	movs	r3, #160	; 0xa0
 80016c8:	05db      	lsls	r3, r3, #23
 80016ca:	0011      	movs	r1, r2
 80016cc:	0018      	movs	r0, r3
 80016ce:	f7ff fe97 	bl	8001400 <GPIO_Reset>
		if (FAULT_LED_FLASH <= (now - tick))
 80016d2:	4b3a      	ldr	r3, [pc, #232]	; (80017bc <SYSTEM_Update+0x248>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	1ad2      	subs	r2, r2, r3
 80016da:	23fa      	movs	r3, #250	; 0xfa
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	429a      	cmp	r2, r3
 80016e0:	d35a      	bcc.n	8001798 <SYSTEM_Update+0x224>
			if (GPIO_Read(LED_GRN_GPIO, LED_GRN_PIN))
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	4a36      	ldr	r2, [pc, #216]	; (80017c0 <SYSTEM_Update+0x24c>)
 80016e8:	0019      	movs	r1, r3
 80016ea:	0010      	movs	r0, r2
 80016ec:	f7ff fe94 	bl	8001418 <GPIO_Read>
 80016f0:	1e03      	subs	r3, r0, #0
 80016f2:	d007      	beq.n	8001704 <SYSTEM_Update+0x190>
				GPIO_Reset(LED_GRN_GPIO, LED_GRN_PIN);
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	021b      	lsls	r3, r3, #8
 80016f8:	4a31      	ldr	r2, [pc, #196]	; (80017c0 <SYSTEM_Update+0x24c>)
 80016fa:	0019      	movs	r1, r3
 80016fc:	0010      	movs	r0, r2
 80016fe:	f7ff fe7f 	bl	8001400 <GPIO_Reset>
 8001702:	e006      	b.n	8001712 <SYSTEM_Update+0x19e>
				GPIO_Set(LED_GRN_GPIO, LED_GRN_PIN);
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	4a2d      	ldr	r2, [pc, #180]	; (80017c0 <SYSTEM_Update+0x24c>)
 800170a:	0019      	movs	r1, r3
 800170c:	0010      	movs	r0, r2
 800170e:	f7ff fe6b 	bl	80013e8 <GPIO_Set>
			tick = now;
 8001712:	4b2a      	ldr	r3, [pc, #168]	; (80017bc <SYSTEM_Update+0x248>)
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	601a      	str	r2, [r3, #0]
}
 8001718:	e03e      	b.n	8001798 <SYSTEM_Update+0x224>
	else if (status.warnBatt)
 800171a:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <SYSTEM_Update+0x23c>)
 800171c:	789b      	ldrb	r3, [r3, #2]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d02b      	beq.n	800177a <SYSTEM_Update+0x206>
		GPIO_Set(LED_RED_GPIO, LED_RED_PIN);
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	015a      	lsls	r2, r3, #5
 8001726:	23a0      	movs	r3, #160	; 0xa0
 8001728:	05db      	lsls	r3, r3, #23
 800172a:	0011      	movs	r1, r2
 800172c:	0018      	movs	r0, r3
 800172e:	f7ff fe5b 	bl	80013e8 <GPIO_Set>
		if (WARNING_LED_FLASH <= (now - tick))
 8001732:	4b22      	ldr	r3, [pc, #136]	; (80017bc <SYSTEM_Update+0x248>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	1ad2      	subs	r2, r2, r3
 800173a:	23fa      	movs	r3, #250	; 0xfa
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	429a      	cmp	r2, r3
 8001740:	d32a      	bcc.n	8001798 <SYSTEM_Update+0x224>
			if (GPIO_Read(LED_GRN_GPIO, LED_GRN_PIN))
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	021b      	lsls	r3, r3, #8
 8001746:	4a1e      	ldr	r2, [pc, #120]	; (80017c0 <SYSTEM_Update+0x24c>)
 8001748:	0019      	movs	r1, r3
 800174a:	0010      	movs	r0, r2
 800174c:	f7ff fe64 	bl	8001418 <GPIO_Read>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d007      	beq.n	8001764 <SYSTEM_Update+0x1f0>
				GPIO_Reset(LED_GRN_GPIO, LED_GRN_PIN);
 8001754:	2380      	movs	r3, #128	; 0x80
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	4a19      	ldr	r2, [pc, #100]	; (80017c0 <SYSTEM_Update+0x24c>)
 800175a:	0019      	movs	r1, r3
 800175c:	0010      	movs	r0, r2
 800175e:	f7ff fe4f 	bl	8001400 <GPIO_Reset>
 8001762:	e006      	b.n	8001772 <SYSTEM_Update+0x1fe>
				GPIO_Set(LED_GRN_GPIO, LED_GRN_PIN);
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	4a15      	ldr	r2, [pc, #84]	; (80017c0 <SYSTEM_Update+0x24c>)
 800176a:	0019      	movs	r1, r3
 800176c:	0010      	movs	r0, r2
 800176e:	f7ff fe3b 	bl	80013e8 <GPIO_Set>
			tick = now;
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <SYSTEM_Update+0x248>)
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	601a      	str	r2, [r3, #0]
}
 8001778:	e00e      	b.n	8001798 <SYSTEM_Update+0x224>
		GPIO_Reset(LED_GRN_GPIO, LED_GRN_PIN);
 800177a:	2380      	movs	r3, #128	; 0x80
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	4a10      	ldr	r2, [pc, #64]	; (80017c0 <SYSTEM_Update+0x24c>)
 8001780:	0019      	movs	r1, r3
 8001782:	0010      	movs	r0, r2
 8001784:	f7ff fe3c 	bl	8001400 <GPIO_Reset>
		GPIO_Set(LED_RED_GPIO, LED_RED_PIN);
 8001788:	2380      	movs	r3, #128	; 0x80
 800178a:	015a      	lsls	r2, r3, #5
 800178c:	23a0      	movs	r3, #160	; 0xa0
 800178e:	05db      	lsls	r3, r3, #23
 8001790:	0011      	movs	r1, r2
 8001792:	0018      	movs	r0, r3
 8001794:	f7ff fe28 	bl	80013e8 <GPIO_Set>
}
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	b004      	add	sp, #16
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000100 	.word	0x20000100
 80017a4:	00002710 	.word	0x00002710
 80017a8:	2000013c 	.word	0x2000013c
 80017ac:	20000070 	.word	0x20000070
 80017b0:	20000148 	.word	0x20000148
 80017b4:	20000144 	.word	0x20000144
 80017b8:	20000140 	.word	0x20000140
 80017bc:	20000138 	.word	0x20000138
 80017c0:	50000800 	.word	0x50000800

080017c4 <CLK_GetPCLKFreq>:

static inline uint32_t CLK_GetPCLKFreq(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	return CLK_SYSCLK_FREQ;
 80017c8:	4b01      	ldr	r3, [pc, #4]	; (80017d0 <CLK_GetPCLKFreq+0xc>)
}
 80017ca:	0018      	movs	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	01e84800 	.word	0x01e84800

080017d4 <TIM_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void TIM_Init(TIM_t * tim, uint32_t freq, uint32_t reload)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
	TIMx_Init(tim);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	0018      	movs	r0, r3
 80017e4:	f000 f994 	bl	8001b10 <TIMx_Init>

	uint32_t cr1 = tim->Instance->CR1;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	617b      	str	r3, [r7, #20]
	cr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS | TIM_CR1_CKD | TIM_CR1_ARPE);
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	4a0d      	ldr	r2, [pc, #52]	; (8001828 <TIM_Init+0x54>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]
	cr1 |= TIM_AUTORELOAD_PRELOAD_ENABLE | TIM_CLOCKDIVISION_DIV1 | TIM_COUNTERMODE_UP;
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	2280      	movs	r2, #128	; 0x80
 80017fc:	4313      	orrs	r3, r2
 80017fe:	617b      	str	r3, [r7, #20]
	tim->Instance->CR1 = cr1;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	601a      	str	r2, [r3, #0]

	TIM_SetFreq(tim, freq);
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	0011      	movs	r1, r2
 800180e:	0018      	movs	r0, r3
 8001810:	f000 f80c 	bl	800182c <TIM_SetFreq>
	TIM_SetReload(tim, reload);
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	0011      	movs	r1, r2
 800181a:	0018      	movs	r0, r3
 800181c:	f000 f81d 	bl	800185a <TIM_SetReload>
}
 8001820:	46c0      	nop			; (mov r8, r8)
 8001822:	46bd      	mov	sp, r7
 8001824:	b006      	add	sp, #24
 8001826:	bd80      	pop	{r7, pc}
 8001828:	fffffc0f 	.word	0xfffffc0f

0800182c <TIM_SetFreq>:

void TIM_SetFreq(TIM_t * tim, uint32_t freq)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
	uint32_t clk = CLK_GetPCLKFreq();
 8001836:	f7ff ffc5 	bl	80017c4 <CLK_GetPCLKFreq>
 800183a:	0003      	movs	r3, r0
 800183c:	60fb      	str	r3, [r7, #12]
	tim->Instance->PSC = (clk / freq) - 1;
 800183e:	6839      	ldr	r1, [r7, #0]
 8001840:	68f8      	ldr	r0, [r7, #12]
 8001842:	f7fe fc61 	bl	8000108 <__udivsi3>
 8001846:	0003      	movs	r3, r0
 8001848:	001a      	movs	r2, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	3a01      	subs	r2, #1
 8001850:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001852:	46c0      	nop			; (mov r8, r8)
 8001854:	46bd      	mov	sp, r7
 8001856:	b004      	add	sp, #16
 8001858:	bd80      	pop	{r7, pc}

0800185a <TIM_SetReload>:

void TIM_SetReload(TIM_t * tim, uint32_t reload)
{
 800185a:	b580      	push	{r7, lr}
 800185c:	b082      	sub	sp, #8
 800185e:	af00      	add	r7, sp, #0
 8001860:	6078      	str	r0, [r7, #4]
 8001862:	6039      	str	r1, [r7, #0]
	tim->Instance->ARR = reload;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800186c:	46c0      	nop			; (mov r8, r8)
 800186e:	46bd      	mov	sp, r7
 8001870:	b002      	add	sp, #8
 8001872:	bd80      	pop	{r7, pc}

08001874 <TIM_OnReload>:

#ifdef TIM_USE_IRQS
void TIM_OnReload(TIM_t * tim, VoidFunction_t callback)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
	__HAL_TIM_ENABLE_IT(tim, TIM_IT_UPDATE);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	68da      	ldr	r2, [r3, #12]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2101      	movs	r1, #1
 800188a:	430a      	orrs	r2, r1
 800188c:	60da      	str	r2, [r3, #12]
	tim->ReloadCallback = callback;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	605a      	str	r2, [r3, #4]
}
 8001894:	46c0      	nop			; (mov r8, r8)
 8001896:	46bd      	mov	sp, r7
 8001898:	b002      	add	sp, #8
 800189a:	bd80      	pop	{r7, pc}

0800189c <TIM_OnPulse>:

void TIM_OnPulse(TIM_t * tim, TIM_Channel_t ch, VoidFunction_t callback)
{
 800189c:	b590      	push	{r4, r7, lr}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	240b      	movs	r4, #11
 80018a8:	193b      	adds	r3, r7, r4
 80018aa:	1c0a      	adds	r2, r1, #0
 80018ac:	701a      	strb	r2, [r3, #0]
	// WARN: This will fail horribly if ch is greater than 4.
	TIM_EnableOCx(tim, ch, TIM_OCMODE_ACTIVE);
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	7819      	ldrb	r1, [r3, #0]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2210      	movs	r2, #16
 80018b6:	0018      	movs	r0, r3
 80018b8:	f000 f87e 	bl	80019b8 <TIM_EnableOCx>
	// Note that the channels IT's are 1 << 1 through 1 << 4
	__HAL_TIM_ENABLE_IT(tim, TIM_IT_CC1 << ch);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68d9      	ldr	r1, [r3, #12]
 80018c2:	0020      	movs	r0, r4
 80018c4:	183b      	adds	r3, r7, r0
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2202      	movs	r2, #2
 80018ca:	409a      	lsls	r2, r3
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	430a      	orrs	r2, r1
 80018d2:	60da      	str	r2, [r3, #12]
	tim->PulseCallback[ch] = callback;
 80018d4:	183b      	adds	r3, r7, r0
 80018d6:	781a      	ldrb	r2, [r3, #0]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	3202      	adds	r2, #2
 80018dc:	0092      	lsls	r2, r2, #2
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	50d1      	str	r1, [r2, r3]
}
 80018e2:	46c0      	nop			; (mov r8, r8)
 80018e4:	46bd      	mov	sp, r7
 80018e6:	b005      	add	sp, #20
 80018e8:	bd90      	pop	{r4, r7, pc}

080018ea <TIM_SetPulse>:
	GPIO_EnableAlternate(gpio, pin, 0, af);
}


void TIM_SetPulse(TIM_t * tim, TIM_Channel_t ch, uint32_t pulse)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b084      	sub	sp, #16
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	607a      	str	r2, [r7, #4]
 80018f4:	200b      	movs	r0, #11
 80018f6:	183b      	adds	r3, r7, r0
 80018f8:	1c0a      	adds	r2, r1, #0
 80018fa:	701a      	strb	r2, [r3, #0]
	switch (ch)
 80018fc:	183b      	adds	r3, r7, r0
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b03      	cmp	r3, #3
 8001902:	d017      	beq.n	8001934 <TIM_SetPulse+0x4a>
 8001904:	dc1b      	bgt.n	800193e <TIM_SetPulse+0x54>
 8001906:	2b02      	cmp	r3, #2
 8001908:	d00f      	beq.n	800192a <TIM_SetPulse+0x40>
 800190a:	dc18      	bgt.n	800193e <TIM_SetPulse+0x54>
 800190c:	2b00      	cmp	r3, #0
 800190e:	d002      	beq.n	8001916 <TIM_SetPulse+0x2c>
 8001910:	2b01      	cmp	r3, #1
 8001912:	d005      	beq.n	8001920 <TIM_SetPulse+0x36>
	case TIM_CH4:
		tim->Instance->CCR4 = pulse;
		break;
	}

}
 8001914:	e013      	b.n	800193e <TIM_SetPulse+0x54>
		tim->Instance->CCR1 = pulse;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	687a      	ldr	r2, [r7, #4]
 800191c:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 800191e:	e00e      	b.n	800193e <TIM_SetPulse+0x54>
		tim->Instance->CCR2 = pulse;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	639a      	str	r2, [r3, #56]	; 0x38
		break;
 8001928:	e009      	b.n	800193e <TIM_SetPulse+0x54>
		tim->Instance->CCR3 = pulse;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 8001932:	e004      	b.n	800193e <TIM_SetPulse+0x54>
		tim->Instance->CCR4 = pulse;
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800193c:	46c0      	nop			; (mov r8, r8)
}
 800193e:	46c0      	nop			; (mov r8, r8)
 8001940:	46bd      	mov	sp, r7
 8001942:	b004      	add	sp, #16
 8001944:	bd80      	pop	{r7, pc}

08001946 <TIM_Start>:

void TIM_Start(TIM_t * tim)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
	TIM_Reload(tim);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	0018      	movs	r0, r3
 8001952:	f000 f8bf 	bl	8001ad4 <TIM_Reload>
	__HAL_TIM_ENABLE(tim);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2101      	movs	r1, #1
 8001962:	430a      	orrs	r2, r1
 8001964:	601a      	str	r2, [r3, #0]
}
 8001966:	46c0      	nop			; (mov r8, r8)
 8001968:	46bd      	mov	sp, r7
 800196a:	b002      	add	sp, #8
 800196c:	bd80      	pop	{r7, pc}
	...

08001970 <TIM_Deinit>:
{
	__HAL_TIM_DISABLE(tim);
}

void TIM_Deinit(TIM_t * tim)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
	__HAL_TIM_DISABLE(tim);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6a1b      	ldr	r3, [r3, #32]
 800197e:	4a0d      	ldr	r2, [pc, #52]	; (80019b4 <TIM_Deinit+0x44>)
 8001980:	4013      	ands	r3, r2
 8001982:	d107      	bne.n	8001994 <TIM_Deinit+0x24>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2101      	movs	r1, #1
 8001990:	438a      	bics	r2, r1
 8001992:	601a      	str	r2, [r3, #0]
	__HAL_TIM_DISABLE_IT(tim, TIM_IT_UPDATE | TIM_IT_CC1 | TIM_IT_CC2 | TIM_IT_CC3 | TIM_IT_CC4);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	68da      	ldr	r2, [r3, #12]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	211f      	movs	r1, #31
 80019a0:	438a      	bics	r2, r1
 80019a2:	60da      	str	r2, [r3, #12]
	TIMx_Deinit(tim);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	0018      	movs	r0, r3
 80019a8:	f000 f8dc 	bl	8001b64 <TIMx_Deinit>
}
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b002      	add	sp, #8
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	00001111 	.word	0x00001111

080019b8 <TIM_EnableOCx>:
/*
 * PRIVATE FUNCTIONS
 */

static void TIM_EnableOCx(TIM_t * tim, uint32_t oc, uint32_t mode)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
	// Disable the channel during the update.
	TIM_DISABLE_CCx(tim, oc);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6a1a      	ldr	r2, [r3, #32]
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	2101      	movs	r1, #1
 80019d0:	4099      	lsls	r1, r3
 80019d2:	000b      	movs	r3, r1
 80019d4:	43d9      	mvns	r1, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	400a      	ands	r2, r1
 80019dc:	621a      	str	r2, [r3, #32]
	switch (oc)
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	2b03      	cmp	r3, #3
 80019e2:	d04c      	beq.n	8001a7e <TIM_EnableOCx+0xc6>
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d85e      	bhi.n	8001aa8 <TIM_EnableOCx+0xf0>
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d032      	beq.n	8001a56 <TIM_EnableOCx+0x9e>
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d858      	bhi.n	8001aa8 <TIM_EnableOCx+0xf0>
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <TIM_EnableOCx+0x4c>
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d014      	beq.n	8001a2c <TIM_EnableOCx+0x74>
 8001a02:	e051      	b.n	8001aa8 <TIM_EnableOCx+0xf0>
	{
	case 0:
		MODIFY_REG(tim->Instance->CCMR1, TIM_CCMRx_MSK, mode);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	227f      	movs	r2, #127	; 0x7f
 8001a0c:	4393      	bics	r3, r2
 8001a0e:	0019      	movs	r1, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	430a      	orrs	r2, r1
 8001a18:	619a      	str	r2, [r3, #24]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC1P, TIM_OCPOLARITY_HIGH);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	6a1a      	ldr	r2, [r3, #32]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2102      	movs	r1, #2
 8001a26:	438a      	bics	r2, r1
 8001a28:	621a      	str	r2, [r3, #32]
		break;
 8001a2a:	e03d      	b.n	8001aa8 <TIM_EnableOCx+0xf0>
	case 1:
		MODIFY_REG(tim->Instance->CCMR1, TIM_CCMRx_MSK << 8, mode << 8);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	4a25      	ldr	r2, [pc, #148]	; (8001ac8 <TIM_EnableOCx+0x110>)
 8001a34:	4013      	ands	r3, r2
 8001a36:	0019      	movs	r1, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	021a      	lsls	r2, r3, #8
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	619a      	str	r2, [r3, #24]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC2P, TIM_OCPOLARITY_HIGH << 4);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6a1a      	ldr	r2, [r3, #32]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2120      	movs	r1, #32
 8001a50:	438a      	bics	r2, r1
 8001a52:	621a      	str	r2, [r3, #32]
		break;
 8001a54:	e028      	b.n	8001aa8 <TIM_EnableOCx+0xf0>
	case 2:
		MODIFY_REG(tim->Instance->CCMR2, TIM_CCMRx_MSK, mode);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	227f      	movs	r2, #127	; 0x7f
 8001a5e:	4393      	bics	r3, r2
 8001a60:	0019      	movs	r1, r3
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	61da      	str	r2, [r3, #28]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC3P, TIM_OCPOLARITY_HIGH << 8);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6a1a      	ldr	r2, [r3, #32]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4915      	ldr	r1, [pc, #84]	; (8001acc <TIM_EnableOCx+0x114>)
 8001a78:	400a      	ands	r2, r1
 8001a7a:	621a      	str	r2, [r3, #32]
		break;
 8001a7c:	e014      	b.n	8001aa8 <TIM_EnableOCx+0xf0>
	case 3:
		MODIFY_REG(tim->Instance->CCMR2, TIM_CCMRx_MSK << 8, mode << 8);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	69db      	ldr	r3, [r3, #28]
 8001a84:	4a10      	ldr	r2, [pc, #64]	; (8001ac8 <TIM_EnableOCx+0x110>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	0019      	movs	r1, r3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	021a      	lsls	r2, r3, #8
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	61da      	str	r2, [r3, #28]
		MODIFY_REG(tim->Instance->CCER, TIM_CCER_CC4P, TIM_OCPOLARITY_HIGH << 12);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	6a1a      	ldr	r2, [r3, #32]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	490b      	ldr	r1, [pc, #44]	; (8001ad0 <TIM_EnableOCx+0x118>)
 8001aa2:	400a      	ands	r2, r1
 8001aa4:	621a      	str	r2, [r3, #32]
		break;
 8001aa6:	46c0      	nop			; (mov r8, r8)
	}
	TIM_ENABLE_CCx(tim, oc);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	6a19      	ldr	r1, [r3, #32]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	409a      	lsls	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	621a      	str	r2, [r3, #32]
	//	MODIFY_REG(tmpcr2, TIM_CR2_OIS1 | TIM_CR2_OIS1N, TIM_OCIDLESTATE_SET | TIM_OCNIDLESTATE_SET);
	//	TIMx->CR2 = tmpcr2;
	//}


}
 8001abe:	46c0      	nop			; (mov r8, r8)
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	b004      	add	sp, #16
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	46c0      	nop			; (mov r8, r8)
 8001ac8:	ffff80ff 	.word	0xffff80ff
 8001acc:	fffffdff 	.word	0xfffffdff
 8001ad0:	ffffdfff 	.word	0xffffdfff

08001ad4 <TIM_Reload>:

static void TIM_Reload(TIM_t * tim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
	// Disable all timer event sources.
	uint32_t itSources = tim->Instance->DIER;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	60fb      	str	r3, [r7, #12]
	tim->Instance->DIER = 0;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60da      	str	r2, [r3, #12]

	// Update the prescalar
	tim->Instance->EGR = TIM_EGR_UG;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2201      	movs	r2, #1
 8001af2:	615a      	str	r2, [r3, #20]

	// Clear the event before it occurrs.
	__HAL_TIM_CLEAR_IT(tim, TIM_IT_UPDATE);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2202      	movs	r2, #2
 8001afa:	4252      	negs	r2, r2
 8001afc:	611a      	str	r2, [r3, #16]
	tim->Instance->DIER = itSources;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	60da      	str	r2, [r3, #12]
}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b004      	add	sp, #16
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <TIMx_Init>:

static void TIMx_Init(TIM_t * tim)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
		__HAL_RCC_TIM1_CLK_ENABLE();
	}

#endif
#ifdef TIM2_ENABLE
	if (tim == TIM_2)
 8001b18:	4b0f      	ldr	r3, [pc, #60]	; (8001b58 <TIMx_Init+0x48>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	d108      	bne.n	8001b34 <TIMx_Init+0x24>
	{
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b22:	200f      	movs	r0, #15
 8001b24:	f000 fcf7 	bl	8002516 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8001b28:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <TIMx_Init+0x4c>)
 8001b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <TIMx_Init+0x4c>)
 8001b2e:	2101      	movs	r1, #1
 8001b30:	430a      	orrs	r2, r1
 8001b32:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_EnableIRQ(TIM17_IRQn);
		__HAL_RCC_TIM17_CLK_ENABLE();
	}
#endif
#ifdef TIM21_ENABLE
	if (tim == TIM_21)
 8001b34:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <TIMx_Init+0x50>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d108      	bne.n	8001b50 <TIMx_Init+0x40>
	{
		HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8001b3e:	2014      	movs	r0, #20
 8001b40:	f000 fce9 	bl	8002516 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM21_CLK_ENABLE();
 8001b44:	4b05      	ldr	r3, [pc, #20]	; (8001b5c <TIMx_Init+0x4c>)
 8001b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b48:	4b04      	ldr	r3, [pc, #16]	; (8001b5c <TIMx_Init+0x4c>)
 8001b4a:	2104      	movs	r1, #4
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	635a      	str	r2, [r3, #52]	; 0x34
	{
		HAL_NVIC_EnableIRQ(TIM22_IRQn);
		__HAL_RCC_TIM22_CLK_ENABLE();
	}
#endif
}
 8001b50:	46c0      	nop			; (mov r8, r8)
 8001b52:	46bd      	mov	sp, r7
 8001b54:	b002      	add	sp, #8
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	2000001c 	.word	0x2000001c
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	20000038 	.word	0x20000038

08001b64 <TIMx_Deinit>:


static void TIMx_Deinit(TIM_t * tim)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
		HAL_NVIC_DisableIRQ(TIM1_CC_IRQn);
		__HAL_RCC_TIM1_CLK_DISABLE();
	}
#endif
#ifdef TIM2_ENABLE
	if (tim == TIM_2)
 8001b6c:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <TIMx_Deinit+0x48>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d108      	bne.n	8001b88 <TIMx_Deinit+0x24>
	{
		HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8001b76:	200f      	movs	r0, #15
 8001b78:	f000 fcdd 	bl	8002536 <HAL_NVIC_DisableIRQ>
		__HAL_RCC_TIM2_CLK_DISABLE();
 8001b7c:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <TIMx_Deinit+0x4c>)
 8001b7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <TIMx_Deinit+0x4c>)
 8001b82:	2101      	movs	r1, #1
 8001b84:	438a      	bics	r2, r1
 8001b86:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_DisableIRQ(TIM17_IRQn);
		__HAL_RCC_TIM17_CLK_DISABLE();
	}
#endif
#ifdef TIM21_ENABLE
	if (tim == TIM_21)
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <TIMx_Deinit+0x50>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d108      	bne.n	8001ba4 <TIMx_Deinit+0x40>
	{
		HAL_NVIC_DisableIRQ(TIM21_IRQn);
 8001b92:	2014      	movs	r0, #20
 8001b94:	f000 fccf 	bl	8002536 <HAL_NVIC_DisableIRQ>
		__HAL_RCC_TIM21_CLK_DISABLE();
 8001b98:	4b05      	ldr	r3, [pc, #20]	; (8001bb0 <TIMx_Deinit+0x4c>)
 8001b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <TIMx_Deinit+0x4c>)
 8001b9e:	2104      	movs	r1, #4
 8001ba0:	438a      	bics	r2, r1
 8001ba2:	635a      	str	r2, [r3, #52]	; 0x34
	{
		HAL_NVIC_DisableIRQ(TIM22_IRQn);
		__HAL_RCC_TIM22_CLK_DISABLE();
	}
#endif
}
 8001ba4:	46c0      	nop			; (mov r8, r8)
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b002      	add	sp, #8
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	2000001c 	.word	0x2000001c
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	20000038 	.word	0x20000038

08001bb8 <TIM_IRQHandler>:
 */

#ifdef TIM_USE_IRQS

static void TIM_IRQHandler(TIM_t * tim)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
	uint32_t irqs = TIM_GET_IRQ_SOURCES(tim);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	691a      	ldr	r2, [r3, #16]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60fb      	str	r3, [r7, #12]
	if(irqs & TIM_FLAG_CC1)
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2202      	movs	r2, #2
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d007      	beq.n	8001be8 <TIM_IRQHandler+0x30>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC1);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2203      	movs	r2, #3
 8001bde:	4252      	negs	r2, r2
 8001be0:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[0]();
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC2)
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2204      	movs	r2, #4
 8001bec:	4013      	ands	r3, r2
 8001bee:	d007      	beq.n	8001c00 <TIM_IRQHandler+0x48>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC2);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2205      	movs	r2, #5
 8001bf6:	4252      	negs	r2, r2
 8001bf8:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[1]();
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	68db      	ldr	r3, [r3, #12]
 8001bfe:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC3)
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	2208      	movs	r2, #8
 8001c04:	4013      	ands	r3, r2
 8001c06:	d007      	beq.n	8001c18 <TIM_IRQHandler+0x60>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC3);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2209      	movs	r2, #9
 8001c0e:	4252      	negs	r2, r2
 8001c10:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[2]();
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC4)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2210      	movs	r2, #16
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d007      	beq.n	8001c30 <TIM_IRQHandler+0x78>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC4);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2211      	movs	r2, #17
 8001c26:	4252      	negs	r2, r2
 8001c28:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[3]();
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_UPDATE)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2201      	movs	r2, #1
 8001c34:	4013      	ands	r3, r2
 8001c36:	d007      	beq.n	8001c48 <TIM_IRQHandler+0x90>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_UPDATE);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	4252      	negs	r2, r2
 8001c40:	611a      	str	r2, [r3, #16]
		tim->ReloadCallback();
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	4798      	blx	r3
	}
}
 8001c48:	46c0      	nop			; (mov r8, r8)
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	b004      	add	sp, #16
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <TIM2_IRQHandler>:
	TIM_IRQHandler(TIM_1);
}
#endif
#ifdef TIM2_ENABLE
void TIM2_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_2);
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <TIM2_IRQHandler+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	0018      	movs	r0, r3
 8001c5a:	f7ff ffad 	bl	8001bb8 <TIM_IRQHandler>
}
 8001c5e:	46c0      	nop			; (mov r8, r8)
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	2000001c 	.word	0x2000001c

08001c68 <TIM21_IRQHandler>:
	TIM_IRQHandler(TIM_17);
}
#endif
#ifdef TIM21_ENABLE
void TIM21_IRQHandler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_21);
 8001c6c:	4b03      	ldr	r3, [pc, #12]	; (8001c7c <TIM21_IRQHandler+0x14>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	0018      	movs	r0, r3
 8001c72:	f7ff ffa1 	bl	8001bb8 <TIM_IRQHandler>
}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000038 	.word	0x20000038

08001c80 <CLK_GetPCLKFreq>:
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
	return CLK_SYSCLK_FREQ;
 8001c84:	4b01      	ldr	r3, [pc, #4]	; (8001c8c <CLK_GetPCLKFreq+0xc>)
}
 8001c86:	0018      	movs	r0, r3
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	01e84800 	.word	0x01e84800

08001c90 <UART_Init>:
 * PUBLIC FUNCTIONS
 */


void UART_Init(UART_t * uart, uint32_t baud, UART_Mode_t mode)
{
 8001c90:	b590      	push	{r4, r7, lr}
 8001c92:	b08d      	sub	sp, #52	; 0x34
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	1dfb      	adds	r3, r7, #7
 8001c9c:	701a      	strb	r2, [r3, #0]
	uart->tx.head = uart->tx.tail = 0;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	615a      	str	r2, [r3, #20]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	611a      	str	r2, [r3, #16]
	uart->rx.head = uart->rx.tail = 0;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	629a      	str	r2, [r3, #40]	; 0x28

	// Enable the uart specific GPIO and clocks.
	UARTx_Init(uart);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f000 f8e7 	bl	8001e90 <UARTx_Init>

	__HAL_UART_DISABLE(uart);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	2101      	movs	r1, #1
 8001cce:	438a      	bics	r2, r1
 8001cd0:	601a      	str	r2, [r3, #0]
	// Configure to standard settings: 8N1, no flow control.
	uint32_t cr1 = (uint32_t)UART_WORDLENGTH_8B | UART_PARITY_NONE | UART_MODE_TX_RX | UART_OVERSAMPLING_16;
 8001cd2:	230c      	movs	r3, #12
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
	const uint32_t cr1msk = USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8;
 8001cd6:	4b33      	ldr	r3, [pc, #204]	; (8001da4 <UART_Init+0x114>)
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
	MODIFY_REG(uart->Instance->CR1, cr1msk,	cr1);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce2:	43d2      	mvns	r2, r2
 8001ce4:	401a      	ands	r2, r3
 8001ce6:	0011      	movs	r1, r2
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]

	uint32_t cr2 = UART_STOPBITS_1;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (mode & UART_Mode_Inverted) 	{ cr2 |= USART_CR2_RXINV | USART_CR2_TXINV; }
 8001cf6:	1dfb      	adds	r3, r7, #7
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	d004      	beq.n	8001d0a <UART_Init+0x7a>
 8001d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d02:	22c0      	movs	r2, #192	; 0xc0
 8001d04:	0292      	lsls	r2, r2, #10
 8001d06:	4313      	orrs	r3, r2
 8001d08:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (mode & UART_Mode_Swap) 		{ cr2 |= USART_CR2_SWAP; }
 8001d0a:	1dfb      	adds	r3, r7, #7
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2202      	movs	r2, #2
 8001d10:	4013      	ands	r3, r2
 8001d12:	d004      	beq.n	8001d1e <UART_Init+0x8e>
 8001d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d16:	2280      	movs	r2, #128	; 0x80
 8001d18:	0212      	lsls	r2, r2, #8
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	const uint32_t cr2msk = USART_CR2_STOP | USART_CR2_RXINV | USART_CR2_TXINV | USART_CR2_SWAP | USART_CR2_LINEN | USART_CR2_CLKEN;
 8001d1e:	23fe      	movs	r3, #254	; 0xfe
 8001d20:	029b      	lsls	r3, r3, #10
 8001d22:	623b      	str	r3, [r7, #32]
	MODIFY_REG(uart->Instance->CR2, cr2msk, cr2);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	6a3a      	ldr	r2, [r7, #32]
 8001d2c:	43d2      	mvns	r2, r2
 8001d2e:	401a      	ands	r2, r3
 8001d30:	0011      	movs	r1, r2
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	605a      	str	r2, [r3, #4]

	uint32_t cr3 = (uint32_t)UART_HWCONTROL_NONE | UART_ONE_BIT_SAMPLE_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61fb      	str	r3, [r7, #28]
	const uint32_t cr3msk = USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT | USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN;
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <UART_Init+0x118>)
 8001d42:	61bb      	str	r3, [r7, #24]
	MODIFY_REG(uart->Instance->CR3, cr3msk, cr3);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	43d2      	mvns	r2, r2
 8001d4e:	401a      	ands	r2, r3
 8001d50:	0011      	movs	r1, r2
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	609a      	str	r2, [r3, #8]

	// Calculate baud rate.
	uint32_t pclk = CLK_GetPCLKFreq();
 8001d5c:	f7ff ff90 	bl	8001c80 <CLK_GetPCLKFreq>
 8001d60:	0003      	movs	r3, r0
 8001d62:	617b      	str	r3, [r7, #20]
		uart->Instance->BRR = UART_DIV_LPUART(pclk, baud);
	}
	else
#endif
	{
		uart->Instance->BRR = UART_DIV_SAMPLING16(pclk, baud);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	085a      	lsrs	r2, r3, #1
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	18d2      	adds	r2, r2, r3
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001d70:	68b9      	ldr	r1, [r7, #8]
 8001d72:	0010      	movs	r0, r2
 8001d74:	f7fe f9c8 	bl	8000108 <__udivsi3>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	60e3      	str	r3, [r4, #12]
	}
	__HAL_UART_ENABLE(uart);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	2101      	movs	r1, #1
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	601a      	str	r2, [r3, #0]

	// Enable RX IRQ.
	__UART_RX_ENABLE(uart);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	2120      	movs	r1, #32
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	601a      	str	r2, [r3, #0]
}
 8001d9c:	46c0      	nop			; (mov r8, r8)
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	b00d      	add	sp, #52	; 0x34
 8001da2:	bd90      	pop	{r4, r7, pc}
 8001da4:	1000960c 	.word	0x1000960c
 8001da8:	00000b2a 	.word	0x00000b2a

08001dac <UART_Write>:
	// Disable uart specific GPIO and clocks.
	UARTx_Deinit(uart);
}

void UART_Write(UART_t * uart, const uint8_t * data, uint32_t count)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
	while (count--)
 8001db8:	e020      	b.n	8001dfc <UART_Write+0x50>
	{
		// calculate the next head. We cant assign it yet, as the IRQ relies on it.
		uint32_t head = UART_BFR_WRAP(uart->tx.head + 1);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	220f      	movs	r2, #15
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	617b      	str	r3, [r7, #20]

		// If the head has caught up with tail.. wait.
		while (head == uart->tx.tail) { CORE_Idle(); }
 8001dc6:	e001      	b.n	8001dcc <UART_Write+0x20>
 8001dc8:	f7fe fbda 	bl	8000580 <CORE_Idle>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d0f8      	beq.n	8001dc8 <UART_Write+0x1c>

		uart->tx.buffer[uart->tx.head] = *data++;
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	60ba      	str	r2, [r7, #8]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	6912      	ldr	r2, [r2, #16]
 8001de0:	7819      	ldrb	r1, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	5499      	strb	r1, [r3, r2]
		uart->tx.head = head;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	611a      	str	r2, [r3, #16]

		// Enable transmitter - it may turn itself off at any time.
		__UART_TX_ENABLE(uart);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df0:	681a      	ldr	r2, [r3, #0]
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	2180      	movs	r1, #128	; 0x80
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	601a      	str	r2, [r3, #0]
	while (count--)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	1e5a      	subs	r2, r3, #1
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1d9      	bne.n	8001dba <UART_Write+0xe>
	}
}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	46c0      	nop			; (mov r8, r8)
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	b006      	add	sp, #24
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <UART_WriteFlush>:
	uart->rx.tail = uart->rx.head;
	__UART_RX_ENABLE(uart);
}

void UART_WriteFlush(UART_t * uart)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
	while (UART_WriteCount(uart))
 8001e18:	e001      	b.n	8001e1e <UART_WriteFlush+0xe>
	{
		CORE_Idle();
 8001e1a:	f7fe fbb1 	bl	8000580 <CORE_Idle>
	while (UART_WriteCount(uart))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	0018      	movs	r0, r3
 8001e22:	f000 f807 	bl	8001e34 <UART_WriteCount>
 8001e26:	1e03      	subs	r3, r0, #0
 8001e28:	d1f7      	bne.n	8001e1a <UART_WriteFlush+0xa>
	}
}
 8001e2a:	46c0      	nop			; (mov r8, r8)
 8001e2c:	46c0      	nop			; (mov r8, r8)
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	b002      	add	sp, #8
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <UART_WriteCount>:

uint32_t UART_WriteCount(UART_t * uart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	__UART_TX_DISABLE(uart);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	2180      	movs	r1, #128	; 0x80
 8001e48:	438a      	bics	r2, r1
 8001e4a:	601a      	str	r2, [r3, #0]
	uint32_t count = UART_BFR_WRAP(uart->tx.head - uart->tx.tail);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	691a      	ldr	r2, [r3, #16]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	220f      	movs	r2, #15
 8001e58:	4013      	ands	r3, r2
 8001e5a:	60fb      	str	r3, [r7, #12]
	// Include the outgoing character
	if (__UART_TX_BUSY(uart)) { count++; }
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	2240      	movs	r2, #64	; 0x40
 8001e64:	4013      	ands	r3, r2
 8001e66:	d102      	bne.n	8001e6e <UART_WriteCount+0x3a>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	60fb      	str	r3, [r7, #12]
	// Restore the transmitter if we still have pending data
	if (count) { __UART_TX_ENABLE(uart); }
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d007      	beq.n	8001e84 <UART_WriteCount+0x50>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	2180      	movs	r1, #128	; 0x80
 8001e80:	430a      	orrs	r2, r1
 8001e82:	601a      	str	r2, [r3, #0]
	return count;
 8001e84:	68fb      	ldr	r3, [r7, #12]
}
 8001e86:	0018      	movs	r0, r3
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	b004      	add	sp, #16
 8001e8c:	bd80      	pop	{r7, pc}
	...

08001e90 <UARTx_Init>:
/*
 * PRIVATE FUNCTIONS
 */

static void UARTx_Init(UART_t * uart)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
		GPIO_EnableAlternate(UART1_GPIO, UART1_PINS, 0, UART1_AF);
		HAL_NVIC_EnableIRQ(USART1_IRQn);
	}
#endif
#ifdef UART2_GPIO
	if (uart == UART_2)
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <UARTx_Init+0x3c>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d10f      	bne.n	8001ec2 <UARTx_Init+0x32>
	{
		__HAL_RCC_USART2_CLK_ENABLE();
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <UARTx_Init+0x40>)
 8001ea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <UARTx_Init+0x40>)
 8001ea8:	2180      	movs	r1, #128	; 0x80
 8001eaa:	0289      	lsls	r1, r1, #10
 8001eac:	430a      	orrs	r2, r1
 8001eae:	639a      	str	r2, [r3, #56]	; 0x38
		GPIO_EnableAlternate(UART2_GPIO, UART2_PINS, 0, UART2_AF);
 8001eb0:	4808      	ldr	r0, [pc, #32]	; (8001ed4 <UARTx_Init+0x44>)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	21c0      	movs	r1, #192	; 0xc0
 8001eb8:	f7fe fc24 	bl	8000704 <GPIO_EnableAlternate>
		HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ebc:	201c      	movs	r0, #28
 8001ebe:	f000 fb2a 	bl	8002516 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_USART5_CLK_ENABLE();
		GPIO_EnableAlternate(UART5_GPIO, UART5_PINS, 0, UART5_AF);
		HAL_NVIC_EnableIRQ(USART4_5_IRQn);
	}
#endif
}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b002      	add	sp, #8
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	20000070 	.word	0x20000070
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	50000400 	.word	0x50000400

08001ed8 <UART_IRQHandler>:
 * INTERRUPT ROUTINES
 */


void UART_IRQHandler(UART_t *uart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	uint32_t flags = uart->Instance->ISR;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	69db      	ldr	r3, [r3, #28]
 8001ee6:	60fb      	str	r3, [r7, #12]

	if (flags & USART_ISR_RXNE)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2220      	movs	r2, #32
 8001eec:	4013      	ands	r3, r2
 8001eee:	d01d      	beq.n	8001f2c <UART_IRQHandler+0x54>
	{
		// New RX data. Put it in the RX buffer.
		uart->rx.buffer[uart->rx.head] = uart->Instance->RDR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001efa:	b2d1      	uxtb	r1, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	18d3      	adds	r3, r2, r3
 8001f00:	1c0a      	adds	r2, r1, #0
 8001f02:	761a      	strb	r2, [r3, #24]
		uart->rx.head = UART_BFR_WRAP(uart->rx.head + 1);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f08:	3301      	adds	r3, #1
 8001f0a:	220f      	movs	r2, #15
 8001f0c:	401a      	ands	r2, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	629a      	str	r2, [r3, #40]	; 0x28
		if (uart->rx.head == uart->rx.tail) {
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d106      	bne.n	8001f2c <UART_IRQHandler+0x54>
			// The head just caught up with the tail. Uh oh. Increment the tail.
			// Note, this causes flaming huge issues.
			uart->rx.tail = UART_BFR_WRAP(uart->rx.tail + 1);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f22:	3301      	adds	r3, #1
 8001f24:	220f      	movs	r2, #15
 8001f26:	401a      	ands	r2, r3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}

	if (flags & USART_ISR_TXE)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2280      	movs	r2, #128	; 0x80
 8001f30:	4013      	ands	r3, r2
 8001f32:	d01c      	beq.n	8001f6e <UART_IRQHandler+0x96>
	{
		// No byte being transmitted..
		if (uart->tx.head != uart->tx.tail)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d00e      	beq.n	8001f5e <UART_IRQHandler+0x86>
		{
			// Send a byte out.
			uart->Instance->TDR = uart->tx.buffer[uart->tx.tail];
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	695b      	ldr	r3, [r3, #20]
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	5cd2      	ldrb	r2, [r2, r3]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	629a      	str	r2, [r3, #40]	; 0x28
			uart->tx.tail = UART_BFR_WRAP(uart->tx.tail + 1);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	3301      	adds	r3, #1
 8001f54:	220f      	movs	r2, #15
 8001f56:	401a      	ands	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	615a      	str	r2, [r3, #20]
 8001f5c:	e007      	b.n	8001f6e <UART_IRQHandler+0x96>
		}
		else
		{
			// Tail caught up with head: no bytes remain.
			// Disable the TX IRQ.
			__UART_TX_DISABLE(uart);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	2180      	movs	r1, #128	; 0x80
 8001f6a:	438a      	bics	r2, r1
 8001f6c:	601a      	str	r2, [r3, #0]
		}
	}

	if (flags & (USART_ISR_ORE | USART_ISR_PE | USART_ISR_NE | USART_ISR_FE))
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	220f      	movs	r2, #15
 8001f72:	4013      	ands	r3, r2
 8001f74:	d007      	beq.n	8001f86 <UART_IRQHandler+0xae>
	{
		__UART_CLEAR_FLAGS(uart, (UART_CLEAR_PEF | UART_CLEAR_FEF | UART_CLEAR_NEF | UART_CLEAR_OREF));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	6a1a      	ldr	r2, [r3, #32]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f80:	210f      	movs	r1, #15
 8001f82:	430a      	orrs	r2, r1
 8001f84:	621a      	str	r2, [r3, #32]
	}
}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	b004      	add	sp, #16
 8001f8c:	bd80      	pop	{r7, pc}
	...

08001f90 <USART2_IRQHandler>:
	UART_IRQHandler(UART_1);
}
#endif
#ifdef UART2_GPIO
void USART2_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	UART_IRQHandler(UART_2);
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <USART2_IRQHandler+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f7ff ff9d 	bl	8001ed8 <UART_IRQHandler>
}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000070 	.word	0x20000070

08001fa8 <main>:
#include "Motor.h"
#include "Core.h"
#include "UART.h"

int main(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
	CORE_Init();
 8001fac:	f7fe fab2 	bl	8000514 <CORE_Init>
	SYSTEM_Init();
 8001fb0:	f7ff fa42 	bl	8001438 <SYSTEM_Init>
	RADIO_Init();
 8001fb4:	f7ff f992 	bl	80012dc <RADIO_Init>
	MOTOR_Init();
 8001fb8:	f7fe fdca 	bl	8000b50 <MOTOR_Init>
	while (1)
	{
		SYSTEM_Update();
 8001fbc:	f7ff fada 	bl	8001574 <SYSTEM_Update>
		MOTOR_Update();
 8001fc0:	f7fe fde8 	bl	8000b94 <MOTOR_Update>
		CORE_Idle();
 8001fc4:	f7fe fadc 	bl	8000580 <CORE_Idle>
		SYSTEM_Update();
 8001fc8:	e7f8      	b.n	8001fbc <main+0x14>

08001fca <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fce:	46c0      	nop			; (mov r8, r8)
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}

08001fd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001fd4:	4813      	ldr	r0, [pc, #76]	; (8002024 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001fd6:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 8001fd8:	4813      	ldr	r0, [pc, #76]	; (8002028 <LoopForever+0x6>)
    LDR R1, [R0]
 8001fda:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001fdc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001fde:	4a13      	ldr	r2, [pc, #76]	; (800202c <LoopForever+0xa>)
    CMP R1, R2
 8001fe0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001fe2:	d105      	bne.n	8001ff0 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 8001fe4:	4812      	ldr	r0, [pc, #72]	; (8002030 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8001fe6:	4913      	ldr	r1, [pc, #76]	; (8002034 <LoopForever+0x12>)
    STR R1, [R0]
 8001fe8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8001fea:	4813      	ldr	r0, [pc, #76]	; (8002038 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001fec:	4913      	ldr	r1, [pc, #76]	; (800203c <LoopForever+0x1a>)
    STR R1, [R0]
 8001fee:	6001      	str	r1, [r0, #0]

08001ff0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ff0:	4813      	ldr	r0, [pc, #76]	; (8002040 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001ff2:	4914      	ldr	r1, [pc, #80]	; (8002044 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001ff4:	4a14      	ldr	r2, [pc, #80]	; (8002048 <LoopForever+0x26>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff8:	e002      	b.n	8002000 <LoopCopyDataInit>

08001ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffe:	3304      	adds	r3, #4

08002000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002004:	d3f9      	bcc.n	8001ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002006:	4a11      	ldr	r2, [pc, #68]	; (800204c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8002008:	4c11      	ldr	r4, [pc, #68]	; (8002050 <LoopForever+0x2e>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800200c:	e001      	b.n	8002012 <LoopFillZerobss>

0800200e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002010:	3204      	adds	r2, #4

08002012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002014:	d3fb      	bcc.n	800200e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002016:	f7ff ffd8 	bl	8001fca <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800201a:	f000 faa9 	bl	8002570 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800201e:	f7ff ffc3 	bl	8001fa8 <main>

08002022 <LoopForever>:

LoopForever:
    b LoopForever
 8002022:	e7fe      	b.n	8002022 <LoopForever>
   ldr   r0, =_estack
 8002024:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8002028:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 800202c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8002030:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 8002034:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8002038:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 800203c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8002040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002044:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002048:	080025d8 	.word	0x080025d8
  ldr r2, =_sbss
 800204c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002050:	2000014c 	.word	0x2000014c

08002054 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002054:	e7fe      	b.n	8002054 <ADC1_IRQHandler>
	...

08002058 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e159      	b.n	800231e <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800206e:	2b00      	cmp	r3, #0
 8002070:	d10a      	bne.n	8002088 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2200      	movs	r2, #0
 8002076:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2250      	movs	r2, #80	; 0x50
 800207c:	2100      	movs	r1, #0
 800207e:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	0018      	movs	r0, r3
 8002084:	f000 f95c 	bl	8002340 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800208c:	2210      	movs	r2, #16
 800208e:	4013      	ands	r3, r2
 8002090:	2b10      	cmp	r3, #16
 8002092:	d005      	beq.n	80020a0 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2204      	movs	r2, #4
 800209c:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800209e:	d00b      	beq.n	80020b8 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a4:	2210      	movs	r2, #16
 80020a6:	431a      	orrs	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2250      	movs	r2, #80	; 0x50
 80020b0:	2100      	movs	r1, #0
 80020b2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e132      	b.n	800231e <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020bc:	4a9a      	ldr	r2, [pc, #616]	; (8002328 <HAL_ADC_Init+0x2d0>)
 80020be:	4013      	ands	r3, r2
 80020c0:	2202      	movs	r2, #2
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2203      	movs	r2, #3
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d108      	bne.n	80020e8 <HAL_ADC_Init+0x90>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2201      	movs	r2, #1
 80020de:	4013      	ands	r3, r2
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d101      	bne.n	80020e8 <HAL_ADC_Init+0x90>
 80020e4:	2301      	movs	r3, #1
 80020e6:	e000      	b.n	80020ea <HAL_ADC_Init+0x92>
 80020e8:	2300      	movs	r3, #0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d149      	bne.n	8002182 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	23c0      	movs	r3, #192	; 0xc0
 80020f4:	061b      	lsls	r3, r3, #24
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d00b      	beq.n	8002112 <HAL_ADC_Init+0xba>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	2380      	movs	r3, #128	; 0x80
 8002100:	05db      	lsls	r3, r3, #23
 8002102:	429a      	cmp	r2, r3
 8002104:	d005      	beq.n	8002112 <HAL_ADC_Init+0xba>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	2380      	movs	r3, #128	; 0x80
 800210c:	061b      	lsls	r3, r3, #24
 800210e:	429a      	cmp	r2, r3
 8002110:	d111      	bne.n	8002136 <HAL_ADC_Init+0xde>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	0092      	lsls	r2, r2, #2
 800211e:	0892      	lsrs	r2, r2, #2
 8002120:	611a      	str	r2, [r3, #16]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6919      	ldr	r1, [r3, #16]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685a      	ldr	r2, [r3, #4]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	611a      	str	r2, [r3, #16]
 8002134:	e014      	b.n	8002160 <HAL_ADC_Init+0x108>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	691a      	ldr	r2, [r3, #16]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	0092      	lsls	r2, r2, #2
 8002142:	0892      	lsrs	r2, r2, #2
 8002144:	611a      	str	r2, [r3, #16]
 8002146:	4b79      	ldr	r3, [pc, #484]	; (800232c <HAL_ADC_Init+0x2d4>)
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	4b78      	ldr	r3, [pc, #480]	; (800232c <HAL_ADC_Init+0x2d4>)
 800214c:	4978      	ldr	r1, [pc, #480]	; (8002330 <HAL_ADC_Init+0x2d8>)
 800214e:	400a      	ands	r2, r1
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	4b76      	ldr	r3, [pc, #472]	; (800232c <HAL_ADC_Init+0x2d4>)
 8002154:	6819      	ldr	r1, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	4b74      	ldr	r3, [pc, #464]	; (800232c <HAL_ADC_Init+0x2d4>)
 800215c:	430a      	orrs	r2, r1
 800215e:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68da      	ldr	r2, [r3, #12]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2118      	movs	r1, #24
 800216c:	438a      	bics	r2, r1
 800216e:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68d9      	ldr	r1, [r3, #12]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8002182:	4b6a      	ldr	r3, [pc, #424]	; (800232c <HAL_ADC_Init+0x2d4>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4b69      	ldr	r3, [pc, #420]	; (800232c <HAL_ADC_Init+0x2d4>)
 8002188:	496a      	ldr	r1, [pc, #424]	; (8002334 <HAL_ADC_Init+0x2dc>)
 800218a:	400a      	ands	r2, r1
 800218c:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800218e:	4b67      	ldr	r3, [pc, #412]	; (800232c <HAL_ADC_Init+0x2d4>)
 8002190:	6819      	ldr	r1, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002196:	065a      	lsls	r2, r3, #25
 8002198:	4b64      	ldr	r3, [pc, #400]	; (800232c <HAL_ADC_Init+0x2d4>)
 800219a:	430a      	orrs	r2, r1
 800219c:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	055b      	lsls	r3, r3, #21
 80021a8:	4013      	ands	r3, r2
 80021aa:	d108      	bne.n	80021be <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2180      	movs	r1, #128	; 0x80
 80021b8:	0549      	lsls	r1, r1, #21
 80021ba:	430a      	orrs	r2, r1
 80021bc:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	495b      	ldr	r1, [pc, #364]	; (8002338 <HAL_ADC_Init+0x2e0>)
 80021ca:	400a      	ands	r2, r1
 80021cc:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	68d9      	ldr	r1, [r3, #12]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	691b      	ldr	r3, [r3, #16]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d101      	bne.n	80021e4 <HAL_ADC_Init+0x18c>
 80021e0:	2304      	movs	r3, #4
 80021e2:	e000      	b.n	80021e6 <HAL_ADC_Init+0x18e>
 80021e4:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80021e6:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2020      	movs	r0, #32
 80021ec:	5c1b      	ldrb	r3, [r3, r0]
 80021ee:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80021f0:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	202c      	movs	r0, #44	; 0x2c
 80021f6:	5c1b      	ldrb	r3, [r3, r0]
 80021f8:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80021fa:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002200:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8002208:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69db      	ldr	r3, [r3, #28]
 800220e:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8002210:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	430a      	orrs	r2, r1
 8002218:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800221e:	23c2      	movs	r3, #194	; 0xc2
 8002220:	33ff      	adds	r3, #255	; 0xff
 8002222:	429a      	cmp	r2, r3
 8002224:	d00b      	beq.n	800223e <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68d9      	ldr	r1, [r3, #12]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8002234:	431a      	orrs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	430a      	orrs	r2, r1
 800223c:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2221      	movs	r2, #33	; 0x21
 8002242:	5c9b      	ldrb	r3, [r3, r2]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d11a      	bne.n	800227e <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2220      	movs	r2, #32
 800224c:	5c9b      	ldrb	r3, [r3, r2]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d109      	bne.n	8002266 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2180      	movs	r1, #128	; 0x80
 800225e:	0249      	lsls	r1, r1, #9
 8002260:	430a      	orrs	r2, r1
 8002262:	60da      	str	r2, [r3, #12]
 8002264:	e00b      	b.n	800227e <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226a:	2220      	movs	r2, #32
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002276:	2201      	movs	r2, #1
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002282:	2b01      	cmp	r3, #1
 8002284:	d11f      	bne.n	80022c6 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	691a      	ldr	r2, [r3, #16]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	492a      	ldr	r1, [pc, #168]	; (800233c <HAL_ADC_Init+0x2e4>)
 8002292:	400a      	ands	r2, r1
 8002294:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6919      	ldr	r1, [r3, #16]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80022a4:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80022aa:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691a      	ldr	r2, [r3, #16]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2101      	movs	r1, #1
 80022c0:	430a      	orrs	r2, r1
 80022c2:	611a      	str	r2, [r3, #16]
 80022c4:	e00e      	b.n	80022e4 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	2201      	movs	r2, #1
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d107      	bne.n	80022e4 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	691a      	ldr	r2, [r3, #16]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2101      	movs	r1, #1
 80022e0:	438a      	bics	r2, r1
 80022e2:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	695a      	ldr	r2, [r3, #20]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2107      	movs	r1, #7
 80022f0:	438a      	bics	r2, r1
 80022f2:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	6959      	ldr	r1, [r3, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002310:	2203      	movs	r2, #3
 8002312:	4393      	bics	r3, r2
 8002314:	2201      	movs	r2, #1
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	0018      	movs	r0, r3
 8002320:	46bd      	mov	sp, r7
 8002322:	b002      	add	sp, #8
 8002324:	bd80      	pop	{r7, pc}
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	fffffefd 	.word	0xfffffefd
 800232c:	40012708 	.word	0x40012708
 8002330:	ffc3ffff 	.word	0xffc3ffff
 8002334:	fdffffff 	.word	0xfdffffff
 8002338:	fffe0219 	.word	0xfffe0219
 800233c:	fffffc03 	.word	0xfffffc03

08002340 <HAL_ADC_MspInit>:
  * @brief  Initialize the ADC MSP.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	b002      	add	sp, #8
 800234e:	bd80      	pop	{r7, pc}

08002350 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	0002      	movs	r2, r0
 8002358:	1dfb      	adds	r3, r7, #7
 800235a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800235c:	1dfb      	adds	r3, r7, #7
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b7f      	cmp	r3, #127	; 0x7f
 8002362:	d809      	bhi.n	8002378 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002364:	1dfb      	adds	r3, r7, #7
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	001a      	movs	r2, r3
 800236a:	231f      	movs	r3, #31
 800236c:	401a      	ands	r2, r3
 800236e:	4b04      	ldr	r3, [pc, #16]	; (8002380 <__NVIC_EnableIRQ+0x30>)
 8002370:	2101      	movs	r1, #1
 8002372:	4091      	lsls	r1, r2
 8002374:	000a      	movs	r2, r1
 8002376:	601a      	str	r2, [r3, #0]
  }
}
 8002378:	46c0      	nop			; (mov r8, r8)
 800237a:	46bd      	mov	sp, r7
 800237c:	b002      	add	sp, #8
 800237e:	bd80      	pop	{r7, pc}
 8002380:	e000e100 	.word	0xe000e100

08002384 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	0002      	movs	r2, r0
 800238c:	1dfb      	adds	r3, r7, #7
 800238e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002390:	1dfb      	adds	r3, r7, #7
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b7f      	cmp	r3, #127	; 0x7f
 8002396:	d810      	bhi.n	80023ba <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002398:	1dfb      	adds	r3, r7, #7
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	001a      	movs	r2, r3
 800239e:	231f      	movs	r3, #31
 80023a0:	4013      	ands	r3, r2
 80023a2:	4908      	ldr	r1, [pc, #32]	; (80023c4 <__NVIC_DisableIRQ+0x40>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	409a      	lsls	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	2280      	movs	r2, #128	; 0x80
 80023ac:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80023ae:	f3bf 8f4f 	dsb	sy
}
 80023b2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80023b4:	f3bf 8f6f 	isb	sy
}
 80023b8:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80023ba:	46c0      	nop			; (mov r8, r8)
 80023bc:	46bd      	mov	sp, r7
 80023be:	b002      	add	sp, #8
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	e000e100 	.word	0xe000e100

080023c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023c8:	b590      	push	{r4, r7, lr}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	0002      	movs	r2, r0
 80023d0:	6039      	str	r1, [r7, #0]
 80023d2:	1dfb      	adds	r3, r7, #7
 80023d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023d6:	1dfb      	adds	r3, r7, #7
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b7f      	cmp	r3, #127	; 0x7f
 80023dc:	d828      	bhi.n	8002430 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023de:	4a2f      	ldr	r2, [pc, #188]	; (800249c <__NVIC_SetPriority+0xd4>)
 80023e0:	1dfb      	adds	r3, r7, #7
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	b25b      	sxtb	r3, r3
 80023e6:	089b      	lsrs	r3, r3, #2
 80023e8:	33c0      	adds	r3, #192	; 0xc0
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	589b      	ldr	r3, [r3, r2]
 80023ee:	1dfa      	adds	r2, r7, #7
 80023f0:	7812      	ldrb	r2, [r2, #0]
 80023f2:	0011      	movs	r1, r2
 80023f4:	2203      	movs	r2, #3
 80023f6:	400a      	ands	r2, r1
 80023f8:	00d2      	lsls	r2, r2, #3
 80023fa:	21ff      	movs	r1, #255	; 0xff
 80023fc:	4091      	lsls	r1, r2
 80023fe:	000a      	movs	r2, r1
 8002400:	43d2      	mvns	r2, r2
 8002402:	401a      	ands	r2, r3
 8002404:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	019b      	lsls	r3, r3, #6
 800240a:	22ff      	movs	r2, #255	; 0xff
 800240c:	401a      	ands	r2, r3
 800240e:	1dfb      	adds	r3, r7, #7
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	0018      	movs	r0, r3
 8002414:	2303      	movs	r3, #3
 8002416:	4003      	ands	r3, r0
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800241c:	481f      	ldr	r0, [pc, #124]	; (800249c <__NVIC_SetPriority+0xd4>)
 800241e:	1dfb      	adds	r3, r7, #7
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	b25b      	sxtb	r3, r3
 8002424:	089b      	lsrs	r3, r3, #2
 8002426:	430a      	orrs	r2, r1
 8002428:	33c0      	adds	r3, #192	; 0xc0
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800242e:	e031      	b.n	8002494 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002430:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <__NVIC_SetPriority+0xd8>)
 8002432:	1dfb      	adds	r3, r7, #7
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	0019      	movs	r1, r3
 8002438:	230f      	movs	r3, #15
 800243a:	400b      	ands	r3, r1
 800243c:	3b08      	subs	r3, #8
 800243e:	089b      	lsrs	r3, r3, #2
 8002440:	3306      	adds	r3, #6
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	18d3      	adds	r3, r2, r3
 8002446:	3304      	adds	r3, #4
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	1dfa      	adds	r2, r7, #7
 800244c:	7812      	ldrb	r2, [r2, #0]
 800244e:	0011      	movs	r1, r2
 8002450:	2203      	movs	r2, #3
 8002452:	400a      	ands	r2, r1
 8002454:	00d2      	lsls	r2, r2, #3
 8002456:	21ff      	movs	r1, #255	; 0xff
 8002458:	4091      	lsls	r1, r2
 800245a:	000a      	movs	r2, r1
 800245c:	43d2      	mvns	r2, r2
 800245e:	401a      	ands	r2, r3
 8002460:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	019b      	lsls	r3, r3, #6
 8002466:	22ff      	movs	r2, #255	; 0xff
 8002468:	401a      	ands	r2, r3
 800246a:	1dfb      	adds	r3, r7, #7
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	0018      	movs	r0, r3
 8002470:	2303      	movs	r3, #3
 8002472:	4003      	ands	r3, r0
 8002474:	00db      	lsls	r3, r3, #3
 8002476:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002478:	4809      	ldr	r0, [pc, #36]	; (80024a0 <__NVIC_SetPriority+0xd8>)
 800247a:	1dfb      	adds	r3, r7, #7
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	001c      	movs	r4, r3
 8002480:	230f      	movs	r3, #15
 8002482:	4023      	ands	r3, r4
 8002484:	3b08      	subs	r3, #8
 8002486:	089b      	lsrs	r3, r3, #2
 8002488:	430a      	orrs	r2, r1
 800248a:	3306      	adds	r3, #6
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	18c3      	adds	r3, r0, r3
 8002490:	3304      	adds	r3, #4
 8002492:	601a      	str	r2, [r3, #0]
}
 8002494:	46c0      	nop			; (mov r8, r8)
 8002496:	46bd      	mov	sp, r7
 8002498:	b003      	add	sp, #12
 800249a:	bd90      	pop	{r4, r7, pc}
 800249c:	e000e100 	.word	0xe000e100
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	1e5a      	subs	r2, r3, #1
 80024b0:	2380      	movs	r3, #128	; 0x80
 80024b2:	045b      	lsls	r3, r3, #17
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d301      	bcc.n	80024bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024b8:	2301      	movs	r3, #1
 80024ba:	e010      	b.n	80024de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024bc:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <SysTick_Config+0x44>)
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	3a01      	subs	r2, #1
 80024c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024c4:	2301      	movs	r3, #1
 80024c6:	425b      	negs	r3, r3
 80024c8:	2103      	movs	r1, #3
 80024ca:	0018      	movs	r0, r3
 80024cc:	f7ff ff7c 	bl	80023c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <SysTick_Config+0x44>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d6:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <SysTick_Config+0x44>)
 80024d8:	2207      	movs	r2, #7
 80024da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024dc:	2300      	movs	r3, #0
}
 80024de:	0018      	movs	r0, r3
 80024e0:	46bd      	mov	sp, r7
 80024e2:	b002      	add	sp, #8
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	46c0      	nop			; (mov r8, r8)
 80024e8:	e000e010 	.word	0xe000e010

080024ec <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
 80024f6:	210f      	movs	r1, #15
 80024f8:	187b      	adds	r3, r7, r1
 80024fa:	1c02      	adds	r2, r0, #0
 80024fc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	187b      	adds	r3, r7, r1
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	b25b      	sxtb	r3, r3
 8002506:	0011      	movs	r1, r2
 8002508:	0018      	movs	r0, r3
 800250a:	f7ff ff5d 	bl	80023c8 <__NVIC_SetPriority>
}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	46bd      	mov	sp, r7
 8002512:	b004      	add	sp, #16
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002516:	b580      	push	{r7, lr}
 8002518:	b082      	sub	sp, #8
 800251a:	af00      	add	r7, sp, #0
 800251c:	0002      	movs	r2, r0
 800251e:	1dfb      	adds	r3, r7, #7
 8002520:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002522:	1dfb      	adds	r3, r7, #7
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	b25b      	sxtb	r3, r3
 8002528:	0018      	movs	r0, r3
 800252a:	f7ff ff11 	bl	8002350 <__NVIC_EnableIRQ>
}
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	46bd      	mov	sp, r7
 8002532:	b002      	add	sp, #8
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	0002      	movs	r2, r0
 800253e:	1dfb      	adds	r3, r7, #7
 8002540:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002542:	1dfb      	adds	r3, r7, #7
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	b25b      	sxtb	r3, r3
 8002548:	0018      	movs	r0, r3
 800254a:	f7ff ff1b 	bl	8002384 <__NVIC_DisableIRQ>
}
 800254e:	46c0      	nop			; (mov r8, r8)
 8002550:	46bd      	mov	sp, r7
 8002552:	b002      	add	sp, #8
 8002554:	bd80      	pop	{r7, pc}

08002556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002556:	b580      	push	{r7, lr}
 8002558:	b082      	sub	sp, #8
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	0018      	movs	r0, r3
 8002562:	f7ff ff9f 	bl	80024a4 <SysTick_Config>
 8002566:	0003      	movs	r3, r0
}
 8002568:	0018      	movs	r0, r3
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}

08002570 <__libc_init_array>:
 8002570:	b570      	push	{r4, r5, r6, lr}
 8002572:	2600      	movs	r6, #0
 8002574:	4d0c      	ldr	r5, [pc, #48]	; (80025a8 <__libc_init_array+0x38>)
 8002576:	4c0d      	ldr	r4, [pc, #52]	; (80025ac <__libc_init_array+0x3c>)
 8002578:	1b64      	subs	r4, r4, r5
 800257a:	10a4      	asrs	r4, r4, #2
 800257c:	42a6      	cmp	r6, r4
 800257e:	d109      	bne.n	8002594 <__libc_init_array+0x24>
 8002580:	2600      	movs	r6, #0
 8002582:	f000 f819 	bl	80025b8 <_init>
 8002586:	4d0a      	ldr	r5, [pc, #40]	; (80025b0 <__libc_init_array+0x40>)
 8002588:	4c0a      	ldr	r4, [pc, #40]	; (80025b4 <__libc_init_array+0x44>)
 800258a:	1b64      	subs	r4, r4, r5
 800258c:	10a4      	asrs	r4, r4, #2
 800258e:	42a6      	cmp	r6, r4
 8002590:	d105      	bne.n	800259e <__libc_init_array+0x2e>
 8002592:	bd70      	pop	{r4, r5, r6, pc}
 8002594:	00b3      	lsls	r3, r6, #2
 8002596:	58eb      	ldr	r3, [r5, r3]
 8002598:	4798      	blx	r3
 800259a:	3601      	adds	r6, #1
 800259c:	e7ee      	b.n	800257c <__libc_init_array+0xc>
 800259e:	00b3      	lsls	r3, r6, #2
 80025a0:	58eb      	ldr	r3, [r5, r3]
 80025a2:	4798      	blx	r3
 80025a4:	3601      	adds	r6, #1
 80025a6:	e7f2      	b.n	800258e <__libc_init_array+0x1e>
 80025a8:	080025d0 	.word	0x080025d0
 80025ac:	080025d0 	.word	0x080025d0
 80025b0:	080025d0 	.word	0x080025d0
 80025b4:	080025d4 	.word	0x080025d4

080025b8 <_init>:
 80025b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025be:	bc08      	pop	{r3}
 80025c0:	469e      	mov	lr, r3
 80025c2:	4770      	bx	lr

080025c4 <_fini>:
 80025c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ca:	bc08      	pop	{r3}
 80025cc:	469e      	mov	lr, r3
 80025ce:	4770      	bx	lr
