
THE_BRAWN_beta.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dcc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e8c  08000e8c  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e8c  08000e8c  00020038  2**0
                  CONTENTS
  4 .ARM          00000000  08000e8c  08000e8c  00020038  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e8c  08000e8c  00020038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e8c  08000e8c  00010e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000e90  08000e90  00010e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000038  20000000  08000e94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000038  08000ecc  00020038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08000ecc  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000371a  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001113  00000000  00000000  0002377a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000428  00000000  00000000  00024890  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000380  00000000  00000000  00024cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000104e0  00000000  00000000  00025038  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005698  00000000  00000000  00035518  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00064d3c  00000000  00000000  0003abb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009f8ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c88  00000000  00000000  0009f968  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000038 	.word	0x20000038
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000e74 	.word	0x08000e74

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000003c 	.word	0x2000003c
 8000104:	08000e74 	.word	0x08000e74

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <GPIO_EnableOutput>:
{
	GPIO_Init(gpio, pin, GPIO_Mode_Analog);
}

static inline void GPIO_EnableOutput(GPIO_t * gpio, uint32_t pin, GPIO_State_t state)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	1dfb      	adds	r3, r7, #7
 800022c:	701a      	strb	r2, [r3, #0]
	GPIO_Write(gpio, pin, state);
 800022e:	1dfb      	adds	r3, r7, #7
 8000230:	781a      	ldrb	r2, [r3, #0]
 8000232:	68b9      	ldr	r1, [r7, #8]
 8000234:	68fb      	ldr	r3, [r7, #12]
 8000236:	0018      	movs	r0, r3
 8000238:	f000 fb4c 	bl	80008d4 <GPIO_Write>
	GPIO_Init(gpio, pin, GPIO_Mode_Output);
 800023c:	68b9      	ldr	r1, [r7, #8]
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	2201      	movs	r2, #1
 8000242:	0018      	movs	r0, r3
 8000244:	f000 fb8e 	bl	8000964 <GPIO_Init>
}
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	46bd      	mov	sp, r7
 800024c:	b004      	add	sp, #16
 800024e:	bd80      	pop	{r7, pc}

08000250 <LED_Init>:
 * PUBLIC FUNCTIONS
 */


void LED_Init (void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	af00      	add	r7, sp, #0
	GPIO_EnableOutput(LED_GRN_GPIO, LED_GRN_PIN, false);
 8000254:	2380      	movs	r3, #128	; 0x80
 8000256:	021b      	lsls	r3, r3, #8
 8000258:	4807      	ldr	r0, [pc, #28]	; (8000278 <LED_Init+0x28>)
 800025a:	2200      	movs	r2, #0
 800025c:	0019      	movs	r1, r3
 800025e:	f7ff ffdf 	bl	8000220 <GPIO_EnableOutput>
	GPIO_EnableOutput(LED_RED_GPIO, LED_RED_PIN, false);
 8000262:	2380      	movs	r3, #128	; 0x80
 8000264:	0159      	lsls	r1, r3, #5
 8000266:	23a0      	movs	r3, #160	; 0xa0
 8000268:	05db      	lsls	r3, r3, #23
 800026a:	2200      	movs	r2, #0
 800026c:	0018      	movs	r0, r3
 800026e:	f7ff ffd7 	bl	8000220 <GPIO_EnableOutput>
}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	50000800 	.word	0x50000800

0800027c <GPIO_Read>:
{
	gpio->BRR = (uint32_t)pin;
}

static inline GPIO_State_t GPIO_Read(GPIO_t * gpio, uint32_t pin)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	6039      	str	r1, [r7, #0]
	return ((gpio->IDR & pin) > 0);
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	691b      	ldr	r3, [r3, #16]
 800028a:	683a      	ldr	r2, [r7, #0]
 800028c:	4013      	ands	r3, r2
 800028e:	1e5a      	subs	r2, r3, #1
 8000290:	4193      	sbcs	r3, r2
 8000292:	b2db      	uxtb	r3, r3
}
 8000294:	0018      	movs	r0, r3
 8000296:	46bd      	mov	sp, r7
 8000298:	b002      	add	sp, #8
 800029a:	bd80      	pop	{r7, pc}

0800029c <TIM_Read>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t TIM_Read(TIM_t * tim)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
	return tim->Instance->CNT;
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80002aa:	0018      	movs	r0, r3
 80002ac:	46bd      	mov	sp, r7
 80002ae:	b002      	add	sp, #8
 80002b0:	bd80      	pop	{r7, pc}

080002b2 <RADIO_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void RADIO_Init (void)
{
 80002b2:	b580      	push	{r7, lr}
 80002b4:	af00      	add	r7, sp, #0
	RADIO_InitSPWM();
 80002b6:	f000 f803 	bl	80002c0 <RADIO_InitSPWM>
}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <RADIO_InitSPWM>:
/*
 * PRIVATE FUNCTIONS
 */

void RADIO_InitSPWM (void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	input = RADIO_CENTER;
 80002c4:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <RADIO_InitSPWM+0x3c>)
 80002c6:	4a0e      	ldr	r2, [pc, #56]	; (8000300 <RADIO_InitSPWM+0x40>)
 80002c8:	801a      	strh	r2, [r3, #0]
	TIM_Init(TIM_RADIO, TIM_RADIO_FREQ, TIM_RADIO_RELOAD);
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <RADIO_InitSPWM+0x44>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	4a0e      	ldr	r2, [pc, #56]	; (8000308 <RADIO_InitSPWM+0x48>)
 80002d0:	490e      	ldr	r1, [pc, #56]	; (800030c <RADIO_InitSPWM+0x4c>)
 80002d2:	0018      	movs	r0, r3
 80002d4:	f000 fc9a 	bl	8000c0c <TIM_Init>
	TIM_Start(TIM_RADIO);
 80002d8:	4b0a      	ldr	r3, [pc, #40]	; (8000304 <RADIO_InitSPWM+0x44>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	0018      	movs	r0, r3
 80002de:	f000 fce5 	bl	8000cac <TIM_Start>
	GPIO_OnChange(RADIO_GPIO, RADIO_PIN, GPIO_IT_Both, RADIO_SPWM_IRQ);
 80002e2:	4a0b      	ldr	r2, [pc, #44]	; (8000310 <RADIO_InitSPWM+0x50>)
 80002e4:	2380      	movs	r3, #128	; 0x80
 80002e6:	0219      	lsls	r1, r3, #8
 80002e8:	23a0      	movs	r3, #160	; 0xa0
 80002ea:	05d8      	lsls	r0, r3, #23
 80002ec:	0013      	movs	r3, r2
 80002ee:	2203      	movs	r2, #3
 80002f0:	f000 fb0c 	bl	800090c <GPIO_OnChange>
}
 80002f4:	46c0      	nop			; (mov r8, r8)
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)
 80002fc:	2000009c 	.word	0x2000009c
 8000300:	000005dc 	.word	0x000005dc
 8000304:	20000034 	.word	0x20000034
 8000308:	0000ffff 	.word	0x0000ffff
 800030c:	000f4240 	.word	0x000f4240
 8000310:	08000315 	.word	0x08000315

08000314 <RADIO_SPWM_IRQ>:
/*
 * INTERRUPT ROUTINES
 */

void RADIO_SPWM_IRQ (void)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b082      	sub	sp, #8
 8000318:	af00      	add	r7, sp, #0
	uint32_t now = TIM_Read(TIM_RADIO);
 800031a:	4b11      	ldr	r3, [pc, #68]	; (8000360 <RADIO_SPWM_IRQ+0x4c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	0018      	movs	r0, r3
 8000320:	f7ff ffbc 	bl	800029c <TIM_Read>
 8000324:	0003      	movs	r3, r0
 8000326:	607b      	str	r3, [r7, #4]
	static uint32_t tick = 0;
	if (GPIO_Read(RADIO_GPIO, RADIO_PIN))
 8000328:	2380      	movs	r3, #128	; 0x80
 800032a:	021a      	lsls	r2, r3, #8
 800032c:	23a0      	movs	r3, #160	; 0xa0
 800032e:	05db      	lsls	r3, r3, #23
 8000330:	0011      	movs	r1, r2
 8000332:	0018      	movs	r0, r3
 8000334:	f7ff ffa2 	bl	800027c <GPIO_Read>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d003      	beq.n	8000344 <RADIO_SPWM_IRQ+0x30>
	{
		tick = now;
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <RADIO_SPWM_IRQ+0x50>)
 800033e:	687a      	ldr	r2, [r7, #4]
 8000340:	601a      	str	r2, [r3, #0]
	}
	else
	{
		input = now - tick;
	}
}
 8000342:	e008      	b.n	8000356 <RADIO_SPWM_IRQ+0x42>
		input = now - tick;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	b29a      	uxth	r2, r3
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <RADIO_SPWM_IRQ+0x50>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	b29b      	uxth	r3, r3
 800034e:	1ad3      	subs	r3, r2, r3
 8000350:	b29a      	uxth	r2, r3
 8000352:	4b05      	ldr	r3, [pc, #20]	; (8000368 <RADIO_SPWM_IRQ+0x54>)
 8000354:	801a      	strh	r2, [r3, #0]
}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	46bd      	mov	sp, r7
 800035a:	b002      	add	sp, #8
 800035c:	bd80      	pop	{r7, pc}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	20000034 	.word	0x20000034
 8000364:	20000054 	.word	0x20000054
 8000368:	2000009c 	.word	0x2000009c

0800036c <SYSTEM_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void SYSTEM_Init (void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	status = BOOT;
 8000370:	4b02      	ldr	r3, [pc, #8]	; (800037c <SYSTEM_Init+0x10>)
 8000372:	2200      	movs	r2, #0
 8000374:	701a      	strb	r2, [r3, #0]
	// Read config
}
 8000376:	46c0      	nop			; (mov r8, r8)
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	2000009e 	.word	0x2000009e

08000380 <SYSTEM_Update>:

void SYSTEM_Update (void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	{
		status = WARNING;
	}
	else
	{
		status = RUN;
 8000384:	4b02      	ldr	r3, [pc, #8]	; (8000390 <SYSTEM_Update+0x10>)
 8000386:	2202      	movs	r2, #2
 8000388:	701a      	strb	r2, [r3, #0]
	}
}
 800038a:	46c0      	nop			; (mov r8, r8)
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	2000009e 	.word	0x2000009e

08000394 <TIM_Read>:
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	return tim->Instance->CNT;
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80003a2:	0018      	movs	r0, r3
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b002      	add	sp, #8
 80003a8:	bd80      	pop	{r7, pc}
	...

080003ac <main>:
// - Update LED fault/warning blinking

void SystemClock_Config(void);

int main(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b082      	sub	sp, #8
 80003b0:	af00      	add	r7, sp, #0
	CORE_Init();
 80003b2:	f000 f9cf 	bl	8000754 <CORE_Init>
	SYSTEM_Init();
 80003b6:	f7ff ffd9 	bl	800036c <SYSTEM_Init>
	LED_Init();
 80003ba:	f7ff ff49 	bl	8000250 <LED_Init>
	RADIO_Init();
 80003be:	f7ff ff78 	bl	80002b2 <RADIO_Init>
//	MOTOR_Init();
	uint16_t tick = TIM_Read(TIM_RADIO);
 80003c2:	4b06      	ldr	r3, [pc, #24]	; (80003dc <main+0x30>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	0018      	movs	r0, r3
 80003c8:	f7ff ffe4 	bl	8000394 <TIM_Read>
 80003cc:	0002      	movs	r2, r0
 80003ce:	1dbb      	adds	r3, r7, #6
 80003d0:	801a      	strh	r2, [r3, #0]
	while(1)
	{
		SYSTEM_Update();
 80003d2:	f7ff ffd5 	bl	8000380 <SYSTEM_Update>
//		LED_Update();

//		RADIO_Update();
//		MOTOR_Update(SYSTEM_RadioToMotor(RADIO_GetValue()));

		CORE_Idle();
 80003d6:	f000 f9f3 	bl	80007c0 <CORE_Idle>
		SYSTEM_Update();
 80003da:	e7fa      	b.n	80003d2 <main+0x26>
 80003dc:	20000034 	.word	0x20000034

080003e0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003e4:	46c0      	nop			; (mov r8, r8)
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
	...

080003ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80003ec:	4813      	ldr	r0, [pc, #76]	; (800043c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80003ee:	4685      	mov	sp, r0

/*Check if boot space corresponds to system memory*/

    LDR R0,=0x00000004
 80003f0:	4813      	ldr	r0, [pc, #76]	; (8000440 <LoopForever+0x6>)
    LDR R1, [R0]
 80003f2:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 80003f4:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 80003f6:	4a13      	ldr	r2, [pc, #76]	; (8000444 <LoopForever+0xa>)
    CMP R1, R2
 80003f8:	4291      	cmp	r1, r2
    BNE ApplicationStart
 80003fa:	d105      	bne.n	8000408 <ApplicationStart>

 /*SYSCFG clock enable*/
    LDR R0,=0x40021034
 80003fc:	4812      	ldr	r0, [pc, #72]	; (8000448 <LoopForever+0xe>)
    LDR R1,=0x00000001
 80003fe:	4913      	ldr	r1, [pc, #76]	; (800044c <LoopForever+0x12>)
    STR R1, [R0]
 8000400:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000402:	4813      	ldr	r0, [pc, #76]	; (8000450 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000404:	4913      	ldr	r1, [pc, #76]	; (8000454 <LoopForever+0x1a>)
    STR R1, [R0]
 8000406:	6001      	str	r1, [r0, #0]

08000408 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000408:	4813      	ldr	r0, [pc, #76]	; (8000458 <LoopForever+0x1e>)
  ldr r1, =_edata
 800040a:	4914      	ldr	r1, [pc, #80]	; (800045c <LoopForever+0x22>)
  ldr r2, =_sidata
 800040c:	4a14      	ldr	r2, [pc, #80]	; (8000460 <LoopForever+0x26>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000410:	e002      	b.n	8000418 <LoopCopyDataInit>

08000412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000416:	3304      	adds	r3, #4

08000418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800041a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800041c:	d3f9      	bcc.n	8000412 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800041e:	4a11      	ldr	r2, [pc, #68]	; (8000464 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000420:	4c11      	ldr	r4, [pc, #68]	; (8000468 <LoopForever+0x2e>)
  movs r3, #0
 8000422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000424:	e001      	b.n	800042a <LoopFillZerobss>

08000426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000428:	3204      	adds	r2, #4

0800042a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800042a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800042c:	d3fb      	bcc.n	8000426 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800042e:	f7ff ffd7 	bl	80003e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000432:	f000 fcfb 	bl	8000e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000436:	f7ff ffb9 	bl	80003ac <main>

0800043a <LoopForever>:

LoopForever:
    b LoopForever
 800043a:	e7fe      	b.n	800043a <LoopForever>
   ldr   r0, =_estack
 800043c:	20000800 	.word	0x20000800
    LDR R0,=0x00000004
 8000440:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000444:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021034
 8000448:	40021034 	.word	0x40021034
    LDR R1,=0x00000001
 800044c:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000450:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000454:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800045c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000460:	08000e94 	.word	0x08000e94
  ldr r2, =_sbss
 8000464:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000468:	200000a0 	.word	0x200000a0

0800046c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800046c:	e7fe      	b.n	800046c <ADC1_IRQHandler>
	...

08000470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	0002      	movs	r2, r0
 8000478:	1dfb      	adds	r3, r7, #7
 800047a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800047c:	1dfb      	adds	r3, r7, #7
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b7f      	cmp	r3, #127	; 0x7f
 8000482:	d809      	bhi.n	8000498 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000484:	1dfb      	adds	r3, r7, #7
 8000486:	781b      	ldrb	r3, [r3, #0]
 8000488:	001a      	movs	r2, r3
 800048a:	231f      	movs	r3, #31
 800048c:	401a      	ands	r2, r3
 800048e:	4b04      	ldr	r3, [pc, #16]	; (80004a0 <__NVIC_EnableIRQ+0x30>)
 8000490:	2101      	movs	r1, #1
 8000492:	4091      	lsls	r1, r2
 8000494:	000a      	movs	r2, r1
 8000496:	601a      	str	r2, [r3, #0]
  }
}
 8000498:	46c0      	nop			; (mov r8, r8)
 800049a:	46bd      	mov	sp, r7
 800049c:	b002      	add	sp, #8
 800049e:	bd80      	pop	{r7, pc}
 80004a0:	e000e100 	.word	0xe000e100

080004a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004a4:	b590      	push	{r4, r7, lr}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	0002      	movs	r2, r0
 80004ac:	6039      	str	r1, [r7, #0]
 80004ae:	1dfb      	adds	r3, r7, #7
 80004b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b7f      	cmp	r3, #127	; 0x7f
 80004b8:	d828      	bhi.n	800050c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ba:	4a2f      	ldr	r2, [pc, #188]	; (8000578 <__NVIC_SetPriority+0xd4>)
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	b25b      	sxtb	r3, r3
 80004c2:	089b      	lsrs	r3, r3, #2
 80004c4:	33c0      	adds	r3, #192	; 0xc0
 80004c6:	009b      	lsls	r3, r3, #2
 80004c8:	589b      	ldr	r3, [r3, r2]
 80004ca:	1dfa      	adds	r2, r7, #7
 80004cc:	7812      	ldrb	r2, [r2, #0]
 80004ce:	0011      	movs	r1, r2
 80004d0:	2203      	movs	r2, #3
 80004d2:	400a      	ands	r2, r1
 80004d4:	00d2      	lsls	r2, r2, #3
 80004d6:	21ff      	movs	r1, #255	; 0xff
 80004d8:	4091      	lsls	r1, r2
 80004da:	000a      	movs	r2, r1
 80004dc:	43d2      	mvns	r2, r2
 80004de:	401a      	ands	r2, r3
 80004e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	019b      	lsls	r3, r3, #6
 80004e6:	22ff      	movs	r2, #255	; 0xff
 80004e8:	401a      	ands	r2, r3
 80004ea:	1dfb      	adds	r3, r7, #7
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	0018      	movs	r0, r3
 80004f0:	2303      	movs	r3, #3
 80004f2:	4003      	ands	r3, r0
 80004f4:	00db      	lsls	r3, r3, #3
 80004f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004f8:	481f      	ldr	r0, [pc, #124]	; (8000578 <__NVIC_SetPriority+0xd4>)
 80004fa:	1dfb      	adds	r3, r7, #7
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	b25b      	sxtb	r3, r3
 8000500:	089b      	lsrs	r3, r3, #2
 8000502:	430a      	orrs	r2, r1
 8000504:	33c0      	adds	r3, #192	; 0xc0
 8000506:	009b      	lsls	r3, r3, #2
 8000508:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800050a:	e031      	b.n	8000570 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800050c:	4a1b      	ldr	r2, [pc, #108]	; (800057c <__NVIC_SetPriority+0xd8>)
 800050e:	1dfb      	adds	r3, r7, #7
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	0019      	movs	r1, r3
 8000514:	230f      	movs	r3, #15
 8000516:	400b      	ands	r3, r1
 8000518:	3b08      	subs	r3, #8
 800051a:	089b      	lsrs	r3, r3, #2
 800051c:	3306      	adds	r3, #6
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	18d3      	adds	r3, r2, r3
 8000522:	3304      	adds	r3, #4
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	1dfa      	adds	r2, r7, #7
 8000528:	7812      	ldrb	r2, [r2, #0]
 800052a:	0011      	movs	r1, r2
 800052c:	2203      	movs	r2, #3
 800052e:	400a      	ands	r2, r1
 8000530:	00d2      	lsls	r2, r2, #3
 8000532:	21ff      	movs	r1, #255	; 0xff
 8000534:	4091      	lsls	r1, r2
 8000536:	000a      	movs	r2, r1
 8000538:	43d2      	mvns	r2, r2
 800053a:	401a      	ands	r2, r3
 800053c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800053e:	683b      	ldr	r3, [r7, #0]
 8000540:	019b      	lsls	r3, r3, #6
 8000542:	22ff      	movs	r2, #255	; 0xff
 8000544:	401a      	ands	r2, r3
 8000546:	1dfb      	adds	r3, r7, #7
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	0018      	movs	r0, r3
 800054c:	2303      	movs	r3, #3
 800054e:	4003      	ands	r3, r0
 8000550:	00db      	lsls	r3, r3, #3
 8000552:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000554:	4809      	ldr	r0, [pc, #36]	; (800057c <__NVIC_SetPriority+0xd8>)
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	001c      	movs	r4, r3
 800055c:	230f      	movs	r3, #15
 800055e:	4023      	ands	r3, r4
 8000560:	3b08      	subs	r3, #8
 8000562:	089b      	lsrs	r3, r3, #2
 8000564:	430a      	orrs	r2, r1
 8000566:	3306      	adds	r3, #6
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	18c3      	adds	r3, r0, r3
 800056c:	3304      	adds	r3, #4
 800056e:	601a      	str	r2, [r3, #0]
}
 8000570:	46c0      	nop			; (mov r8, r8)
 8000572:	46bd      	mov	sp, r7
 8000574:	b003      	add	sp, #12
 8000576:	bd90      	pop	{r4, r7, pc}
 8000578:	e000e100 	.word	0xe000e100
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	3b01      	subs	r3, #1
 800058c:	4a0c      	ldr	r2, [pc, #48]	; (80005c0 <SysTick_Config+0x40>)
 800058e:	4293      	cmp	r3, r2
 8000590:	d901      	bls.n	8000596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000592:	2301      	movs	r3, #1
 8000594:	e010      	b.n	80005b8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000596:	4b0b      	ldr	r3, [pc, #44]	; (80005c4 <SysTick_Config+0x44>)
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	3a01      	subs	r2, #1
 800059c:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800059e:	2301      	movs	r3, #1
 80005a0:	425b      	negs	r3, r3
 80005a2:	2103      	movs	r1, #3
 80005a4:	0018      	movs	r0, r3
 80005a6:	f7ff ff7d 	bl	80004a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <SysTick_Config+0x44>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005b0:	4b04      	ldr	r3, [pc, #16]	; (80005c4 <SysTick_Config+0x44>)
 80005b2:	2207      	movs	r2, #7
 80005b4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005b6:	2300      	movs	r3, #0
}
 80005b8:	0018      	movs	r0, r3
 80005ba:	46bd      	mov	sp, r7
 80005bc:	b002      	add	sp, #8
 80005be:	bd80      	pop	{r7, pc}
 80005c0:	00ffffff 	.word	0x00ffffff
 80005c4:	e000e010 	.word	0xe000e010

080005c8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60b9      	str	r1, [r7, #8]
 80005d0:	607a      	str	r2, [r7, #4]
 80005d2:	210f      	movs	r1, #15
 80005d4:	187b      	adds	r3, r7, r1
 80005d6:	1c02      	adds	r2, r0, #0
 80005d8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80005da:	68ba      	ldr	r2, [r7, #8]
 80005dc:	187b      	adds	r3, r7, r1
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	b25b      	sxtb	r3, r3
 80005e2:	0011      	movs	r1, r2
 80005e4:	0018      	movs	r0, r3
 80005e6:	f7ff ff5d 	bl	80004a4 <__NVIC_SetPriority>
}
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b004      	add	sp, #16
 80005f0:	bd80      	pop	{r7, pc}

080005f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005f2:	b580      	push	{r7, lr}
 80005f4:	b082      	sub	sp, #8
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	0002      	movs	r2, r0
 80005fa:	1dfb      	adds	r3, r7, #7
 80005fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80005fe:	1dfb      	adds	r3, r7, #7
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b25b      	sxtb	r3, r3
 8000604:	0018      	movs	r0, r3
 8000606:	f7ff ff33 	bl	8000470 <__NVIC_EnableIRQ>
}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b002      	add	sp, #8
 8000610:	bd80      	pop	{r7, pc}

08000612 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	0018      	movs	r0, r3
 800061e:	f7ff ffaf 	bl	8000580 <SysTick_Config>
 8000622:	0003      	movs	r3, r0
}
 8000624:	0018      	movs	r0, r3
 8000626:	46bd      	mov	sp, r7
 8000628:	b002      	add	sp, #8
 800062a:	bd80      	pop	{r7, pc}

0800062c <CLK_InitSYSCLK>:
/*
 * PUBLIC FUNCTIONS
 */

void CLK_InitSYSCLK(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	__HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8000630:	4b34      	ldr	r3, [pc, #208]	; (8000704 <CLK_InitSYSCLK+0xd8>)
 8000632:	681a      	ldr	r2, [r3, #0]
 8000634:	4b33      	ldr	r3, [pc, #204]	; (8000704 <CLK_InitSYSCLK+0xd8>)
 8000636:	2101      	movs	r1, #1
 8000638:	430a      	orrs	r2, r1
 800063a:	601a      	str	r2, [r3, #0]
#ifdef CLK_USE_HSE
	__HAL_RCC_HSE_CONFIG(RCC_HSE_ON);
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U);
#endif
#ifdef CLK_USE_HSI
	__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_HSICALIBRATION_DEFAULT);
 800063c:	4b32      	ldr	r3, [pc, #200]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	4a32      	ldr	r2, [pc, #200]	; (800070c <CLK_InitSYSCLK+0xe0>)
 8000642:	401a      	ands	r2, r3
 8000644:	4b30      	ldr	r3, [pc, #192]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 8000646:	2180      	movs	r1, #128	; 0x80
 8000648:	0149      	lsls	r1, r1, #5
 800064a:	430a      	orrs	r2, r1
 800064c:	605a      	str	r2, [r3, #4]
	__HAL_RCC_HSI_CONFIG(RCC_HSI_ON);
 800064e:	4b2e      	ldr	r3, [pc, #184]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2209      	movs	r2, #9
 8000654:	4393      	bics	r3, r2
 8000656:	001a      	movs	r2, r3
 8000658:	4b2b      	ldr	r3, [pc, #172]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 800065a:	2101      	movs	r1, #1
 800065c:	430a      	orrs	r2, r1
 800065e:	601a      	str	r2, [r3, #0]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U);
 8000660:	46c0      	nop			; (mov r8, r8)
 8000662:	4b29      	ldr	r3, [pc, #164]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	2204      	movs	r2, #4
 8000668:	4013      	ands	r3, r2
 800066a:	d0fa      	beq.n	8000662 <CLK_InitSYSCLK+0x36>
	__HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_MSICALIBRATION_DEFAULT);
#endif

#ifdef CLK_USE_PLL
	// PLL must be disables for configuration.
	__HAL_RCC_PLL_DISABLE();
 800066c:	4b26      	ldr	r3, [pc, #152]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 8000672:	4927      	ldr	r1, [pc, #156]	; (8000710 <CLK_InitSYSCLK+0xe4>)
 8000674:	400a      	ands	r2, r1
 8000676:	601a      	str	r2, [r3, #0]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U);
 8000678:	46c0      	nop			; (mov r8, r8)
 800067a:	4b23      	ldr	r3, [pc, #140]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 800067c:	681a      	ldr	r2, [r3, #0]
 800067e:	2380      	movs	r3, #128	; 0x80
 8000680:	049b      	lsls	r3, r3, #18
 8000682:	4013      	ands	r3, r2
 8000684:	d1f9      	bne.n	800067a <CLK_InitSYSCLK+0x4e>
	__HAL_RCC_PLL_CONFIG(CLK_PLL_SRC, CLK_PLL_MUL_CFG, CLK_PLL_DIV_CFG);
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 8000688:	68db      	ldr	r3, [r3, #12]
 800068a:	4a22      	ldr	r2, [pc, #136]	; (8000714 <CLK_InitSYSCLK+0xe8>)
 800068c:	401a      	ands	r2, r3
 800068e:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 8000690:	2188      	movs	r1, #136	; 0x88
 8000692:	03c9      	lsls	r1, r1, #15
 8000694:	430a      	orrs	r2, r1
 8000696:	60da      	str	r2, [r3, #12]
	__HAL_RCC_PLL_ENABLE();
 8000698:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	4b1a      	ldr	r3, [pc, #104]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 800069e:	2180      	movs	r1, #128	; 0x80
 80006a0:	0449      	lsls	r1, r1, #17
 80006a2:	430a      	orrs	r2, r1
 80006a4:	601a      	str	r2, [r3, #0]
	while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U);
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	049b      	lsls	r3, r3, #18
 80006b0:	4013      	ands	r3, r2
 80006b2:	d0f9      	beq.n	80006a8 <CLK_InitSYSCLK+0x7c>
	 * CONFIGURE CLOCKS
	 * Select the sources and dividers for internal clocks
	 */

	// Configure AHBCLK divider
	MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 80006b6:	68da      	ldr	r2, [r3, #12]
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 80006ba:	21f0      	movs	r1, #240	; 0xf0
 80006bc:	438a      	bics	r2, r1
 80006be:	60da      	str	r2, [r3, #12]

	// Apply SYSCLK source
	__HAL_RCC_SYSCLK_CONFIG(CLK_SYSCLK_SRC);
 80006c0:	4b11      	ldr	r3, [pc, #68]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 80006c2:	68da      	ldr	r2, [r3, #12]
 80006c4:	4b10      	ldr	r3, [pc, #64]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 80006c6:	2103      	movs	r1, #3
 80006c8:	430a      	orrs	r2, r1
 80006ca:	60da      	str	r2, [r3, #12]
#elif (CLK_SYSCLK_SRC == RCC_SYSCLKSOURCE_STATUS_HSI)
	while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI);
#elif (CLK_SYSCLK_SRC == RCC_SYSCLKSOURCE_STATUS_HSE)
	while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE);
#elif (CLK_SYSCLK_SRC == RCC_SYSCLKSOURCE_PLLCLK)
	while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK);
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 80006d0:	68db      	ldr	r3, [r3, #12]
 80006d2:	220c      	movs	r2, #12
 80006d4:	4013      	ands	r3, r2
 80006d6:	2b0c      	cmp	r3, #12
 80006d8:	d1f9      	bne.n	80006ce <CLK_InitSYSCLK+0xa2>
#endif

	// Configure PCLK dividers (peripheral clock)
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV1);
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 80006dc:	68da      	ldr	r2, [r3, #12]
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 80006e0:	490d      	ldr	r1, [pc, #52]	; (8000718 <CLK_InitSYSCLK+0xec>)
 80006e2:	400a      	ands	r2, r1
 80006e4:	60da      	str	r2, [r3, #12]

#ifdef STM32L0
	// STM32L0's have a second PCLK. The shift by 3 is defined like this in the HAL.
	MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV1 << 3);
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 80006e8:	68da      	ldr	r2, [r3, #12]
 80006ea:	4b07      	ldr	r3, [pc, #28]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 80006ec:	490b      	ldr	r1, [pc, #44]	; (800071c <CLK_InitSYSCLK+0xf0>)
 80006ee:	400a      	ands	r2, r1
 80006f0:	60da      	str	r2, [r3, #12]

#ifndef CLK_USE_HSI
	__HAL_RCC_HSI_CONFIG(RCC_HSI_OFF);
#endif
#ifndef CLK_USE_MSI
	__HAL_RCC_MSI_DISABLE();
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	4b04      	ldr	r3, [pc, #16]	; (8000708 <CLK_InitSYSCLK+0xdc>)
 80006f8:	4909      	ldr	r1, [pc, #36]	; (8000720 <CLK_InitSYSCLK+0xf4>)
 80006fa:	400a      	ands	r2, r1
 80006fc:	601a      	str	r2, [r3, #0]
#endif
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40022000 	.word	0x40022000
 8000708:	40021000 	.word	0x40021000
 800070c:	ffffe0ff 	.word	0xffffe0ff
 8000710:	feffffff 	.word	0xfeffffff
 8000714:	ff02ffff 	.word	0xff02ffff
 8000718:	fffff8ff 	.word	0xfffff8ff
 800071c:	ffffc7ff 	.word	0xffffc7ff
 8000720:	fffffeff 	.word	0xfffffeff

08000724 <GPIO_Deinit>:
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
	GPIO_Init(gpio, pin, GPIO_Mode_Analog);
 800072e:	6839      	ldr	r1, [r7, #0]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	2203      	movs	r2, #3
 8000734:	0018      	movs	r0, r3
 8000736:	f000 f915 	bl	8000964 <GPIO_Init>
}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b002      	add	sp, #8
 8000740:	bd80      	pop	{r7, pc}
	...

08000744 <CLK_GetHCLKFreq>:
/*
 * INLINE FUNCTION DEFINITIONS
 */

static inline uint32_t CLK_GetHCLKFreq(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	return CLK_SYSCLK_FREQ;
 8000748:	4b01      	ldr	r3, [pc, #4]	; (8000750 <CLK_GetHCLKFreq+0xc>)
}
 800074a:	0018      	movs	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	01e84800 	.word	0x01e84800

08000754 <CORE_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void CORE_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
#if defined(STM32L0)
	__HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000758:	4b15      	ldr	r3, [pc, #84]	; (80007b0 <CORE_Init+0x5c>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <CORE_Init+0x5c>)
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	430a      	orrs	r2, r1
 8000762:	601a      	str	r2, [r3, #0]

#elif defined(STM32F0)
	__HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000764:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <CORE_Init+0x60>)
 8000766:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000768:	4b12      	ldr	r3, [pc, #72]	; (80007b4 <CORE_Init+0x60>)
 800076a:	2101      	movs	r1, #1
 800076c:	430a      	orrs	r2, r1
 800076e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_RCC_PWR_CLK_ENABLE();
 8000770:	4b10      	ldr	r3, [pc, #64]	; (80007b4 <CORE_Init+0x60>)
 8000772:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <CORE_Init+0x60>)
 8000776:	2180      	movs	r1, #128	; 0x80
 8000778:	0549      	lsls	r1, r1, #21
 800077a:	430a      	orrs	r2, r1
 800077c:	639a      	str	r2, [r3, #56]	; 0x38
#ifdef STM32L0
#ifndef USB_ENABLE
	// This seems to disrupt USB. Future investigation needed.
	SET_BIT(PWR->CR, PWR_CR_ULP | PWR_CR_FWU); // Enable Ultra low power mode & Fast wakeup
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <CORE_Init+0x64>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <CORE_Init+0x64>)
 8000784:	21c0      	movs	r1, #192	; 0xc0
 8000786:	00c9      	lsls	r1, r1, #3
 8000788:	430a      	orrs	r2, r1
 800078a:	601a      	str	r2, [r3, #0]
#endif
	__HAL_PWR_VOLTAGESCALING_CONFIG(CORE_VOLTAGE_RANGE);
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <CORE_Init+0x64>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <CORE_Init+0x68>)
 8000792:	401a      	ands	r2, r3
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <CORE_Init+0x64>)
 8000796:	2180      	movs	r1, #128	; 0x80
 8000798:	0109      	lsls	r1, r1, #4
 800079a:	430a      	orrs	r2, r1
 800079c:	601a      	str	r2, [r3, #0]
#endif

	CLK_InitSYSCLK();
 800079e:	f7ff ff45 	bl	800062c <CLK_InitSYSCLK>
	CORE_InitSysTick();
 80007a2:	f000 f813 	bl	80007cc <CORE_InitSysTick>
	CORE_InitGPIO();
 80007a6:	f000 f829 	bl	80007fc <CORE_InitGPIO>
#ifdef	US_ENABLE
	US_Init();
#endif
}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40022000 	.word	0x40022000
 80007b4:	40021000 	.word	0x40021000
 80007b8:	40007000 	.word	0x40007000
 80007bc:	ffffe7ff 	.word	0xffffe7ff

080007c0 <CORE_Idle>:

void CORE_Idle(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	// As long as systick is on, this will at least return each millisecond.
	__WFI();
 80007c4:	bf30      	wfi
}
 80007c6:	46c0      	nop			; (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <CORE_InitSysTick>:
/*
 * PRIVATE FUNCTIONS
 */

void CORE_InitSysTick(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
	HAL_SYSTICK_Config(CLK_GetHCLKFreq() / CORE_SYSTICK_FREQ);
 80007d0:	f7ff ffb8 	bl	8000744 <CLK_GetHCLKFreq>
 80007d4:	0002      	movs	r2, r0
 80007d6:	23fa      	movs	r3, #250	; 0xfa
 80007d8:	0099      	lsls	r1, r3, #2
 80007da:	0010      	movs	r0, r2
 80007dc:	f7ff fc94 	bl	8000108 <__udivsi3>
 80007e0:	0003      	movs	r3, r0
 80007e2:	0018      	movs	r0, r3
 80007e4:	f7ff ff15 	bl	8000612 <HAL_SYSTICK_Config>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80007e8:	2301      	movs	r3, #1
 80007ea:	425b      	negs	r3, r3
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	0018      	movs	r0, r3
 80007f2:	f7ff fee9 	bl	80005c8 <HAL_NVIC_SetPriority>
}
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}

080007fc <CORE_InitGPIO>:

void CORE_InitGPIO(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <CORE_InitGPIO+0x7c>)
 8000804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000806:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <CORE_InitGPIO+0x7c>)
 8000808:	2101      	movs	r1, #1
 800080a:	430a      	orrs	r2, r1
 800080c:	62da      	str	r2, [r3, #44]	; 0x2c
 800080e:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <CORE_InitGPIO+0x7c>)
 8000810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000812:	2201      	movs	r2, #1
 8000814:	4013      	ands	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
#ifdef DEBUG
	// SWCLK and SWDIO on PA13, PA14
	GPIO_Deinit(GPIOA, GPIO_PIN_All & ~(GPIO_PIN_13 | GPIO_PIN_14));
 800081a:	4a18      	ldr	r2, [pc, #96]	; (800087c <CORE_InitGPIO+0x80>)
 800081c:	23a0      	movs	r3, #160	; 0xa0
 800081e:	05db      	lsls	r3, r3, #23
 8000820:	0011      	movs	r1, r2
 8000822:	0018      	movs	r0, r3
 8000824:	f7ff ff7e 	bl	8000724 <GPIO_Deinit>
#else
	GPIO_Deinit(GPIOA, GPIO_PIN_All);
#endif

	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <CORE_InitGPIO+0x7c>)
 800082a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <CORE_InitGPIO+0x7c>)
 800082e:	2102      	movs	r1, #2
 8000830:	430a      	orrs	r2, r1
 8000832:	62da      	str	r2, [r3, #44]	; 0x2c
 8000834:	4b10      	ldr	r3, [pc, #64]	; (8000878 <CORE_InitGPIO+0x7c>)
 8000836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000838:	2202      	movs	r2, #2
 800083a:	4013      	ands	r3, r2
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	68bb      	ldr	r3, [r7, #8]
	GPIO_Deinit(GPIOB, GPIO_PIN_All);
 8000840:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <CORE_InitGPIO+0x84>)
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <CORE_InitGPIO+0x88>)
 8000844:	0011      	movs	r1, r2
 8000846:	0018      	movs	r0, r3
 8000848:	f7ff ff6c 	bl	8000724 <GPIO_Deinit>

	__HAL_RCC_GPIOC_CLK_ENABLE();
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <CORE_InitGPIO+0x7c>)
 800084e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <CORE_InitGPIO+0x7c>)
 8000852:	2104      	movs	r1, #4
 8000854:	430a      	orrs	r2, r1
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
 8000858:	4b07      	ldr	r3, [pc, #28]	; (8000878 <CORE_InitGPIO+0x7c>)
 800085a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800085c:	2204      	movs	r2, #4
 800085e:	4013      	ands	r3, r2
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	687b      	ldr	r3, [r7, #4]
	GPIO_Deinit(GPIOC, GPIO_PIN_All);
 8000864:	4a06      	ldr	r2, [pc, #24]	; (8000880 <CORE_InitGPIO+0x84>)
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <CORE_InitGPIO+0x8c>)
 8000868:	0011      	movs	r1, r2
 800086a:	0018      	movs	r0, r3
 800086c:	f7ff ff5a 	bl	8000724 <GPIO_Deinit>

#if defined(GPIOD)
	__HAL_RCC_GPIOD_CLK_ENABLE();
	GPIO_Deinit(GPIOD, GPIO_PIN_All);
#endif
}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b004      	add	sp, #16
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40021000 	.word	0x40021000
 800087c:	00009fff 	.word	0x00009fff
 8000880:	0000ffff 	.word	0x0000ffff
 8000884:	50000400 	.word	0x50000400
 8000888:	50000800 	.word	0x50000800

0800088c <SysTick_Handler>:
/*
 * INTERRUPT ROUTINES
 */

void SysTick_Handler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	gTicks += MS_PER_SYSTICK;
 8000890:	4b03      	ldr	r3, [pc, #12]	; (80008a0 <SysTick_Handler+0x14>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	1c5a      	adds	r2, r3, #1
 8000896:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <SysTick_Handler+0x14>)
 8000898:	601a      	str	r2, [r3, #0]
	if (gTickCallback != NULL)
	{
		gTickCallback();
	}
#endif
}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000058 	.word	0x20000058

080008a4 <GPIO_Set>:
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
 80008ac:	6039      	str	r1, [r7, #0]
	gpio->BSRR = (uint32_t)pin;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	619a      	str	r2, [r3, #24]
}
 80008b4:	46c0      	nop			; (mov r8, r8)
 80008b6:	46bd      	mov	sp, r7
 80008b8:	b002      	add	sp, #8
 80008ba:	bd80      	pop	{r7, pc}

080008bc <GPIO_Reset>:
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	gpio->BRR = (uint32_t)pin;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	683a      	ldr	r2, [r7, #0]
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b002      	add	sp, #8
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <GPIO_Write>:
/*
 * PUBLIC FUNCTIONS
 */

void GPIO_Write(GPIO_t * gpio, uint32_t pin, GPIO_State_t state)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	60f8      	str	r0, [r7, #12]
 80008dc:	60b9      	str	r1, [r7, #8]
 80008de:	1dfb      	adds	r3, r7, #7
 80008e0:	701a      	strb	r2, [r3, #0]
	if (state)
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d006      	beq.n	80008f8 <GPIO_Write+0x24>
	{
		GPIO_Set(gpio, pin);
 80008ea:	68ba      	ldr	r2, [r7, #8]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	0011      	movs	r1, r2
 80008f0:	0018      	movs	r0, r3
 80008f2:	f7ff ffd7 	bl	80008a4 <GPIO_Set>
	}
	else
	{
		GPIO_Reset(gpio, pin);
	}
}
 80008f6:	e005      	b.n	8000904 <GPIO_Write+0x30>
		GPIO_Reset(gpio, pin);
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	0011      	movs	r1, r2
 80008fe:	0018      	movs	r0, r3
 8000900:	f7ff ffdc 	bl	80008bc <GPIO_Reset>
}
 8000904:	46c0      	nop			; (mov r8, r8)
 8000906:	46bd      	mov	sp, r7
 8000908:	b004      	add	sp, #16
 800090a:	bd80      	pop	{r7, pc}

0800090c <GPIO_OnChange>:
	GPIO_Init(gpio, pin, GPIO_Mode_Alternate | GPIO_Speed_High | flags);
}

#ifdef GPIO_USE_IRQS
void GPIO_OnChange(GPIO_t * gpio, uint32_t pin, GPIO_IT_Dir_t dir, VoidFunction_t callback)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b086      	sub	sp, #24
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	603b      	str	r3, [r7, #0]
 8000918:	1dfb      	adds	r3, r7, #7
 800091a:	701a      	strb	r2, [r3, #0]
	int n = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
	while ((pin & (1 << n)) == 0) { n++; }
 8000920:	e002      	b.n	8000928 <GPIO_OnChange+0x1c>
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	3301      	adds	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
 8000928:	2201      	movs	r2, #1
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	409a      	lsls	r2, r3
 800092e:	0013      	movs	r3, r2
 8000930:	001a      	movs	r2, r3
 8000932:	68bb      	ldr	r3, [r7, #8]
 8000934:	4013      	ands	r3, r2
 8000936:	d0f4      	beq.n	8000922 <GPIO_OnChange+0x16>

	gCallback[n] = callback;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <GPIO_OnChange+0x54>)
 800093a:	697a      	ldr	r2, [r7, #20]
 800093c:	0092      	lsls	r2, r2, #2
 800093e:	6839      	ldr	r1, [r7, #0]
 8000940:	50d1      	str	r1, [r2, r3]

	GPIO_ConfigInterrupt(gpio, n, dir);
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	6979      	ldr	r1, [r7, #20]
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	0018      	movs	r0, r3
 800094c:	f000 f87a 	bl	8000a44 <GPIO_ConfigInterrupt>

	EXTIx_EnableIRQn(n);
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	0018      	movs	r0, r3
 8000954:	f000 f938 	bl	8000bc8 <EXTIx_EnableIRQn>
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b006      	add	sp, #24
 800095e:	bd80      	pop	{r7, pc}
 8000960:	2000005c 	.word	0x2000005c

08000964 <GPIO_Init>:
#endif //GPIO_USE_IRQS

void GPIO_Init(GPIO_t * gpio, uint32_t pins, GPIO_Flag_t mode)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	1dbb      	adds	r3, r7, #6
 8000970:	801a      	strh	r2, [r3, #0]
	uint32_t pinmask = GPIO_SWARBitDouble(pins);
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	0018      	movs	r0, r3
 8000976:	f000 f8eb 	bl	8000b50 <GPIO_SWARBitDouble>
 800097a:	0003      	movs	r3, r0
 800097c:	61fb      	str	r3, [r7, #28]

	GPIO_Mode_t dir = mode & GPIO_Mode_MASK;
 800097e:	1dbb      	adds	r3, r7, #6
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	b2da      	uxtb	r2, r3
 8000984:	201b      	movs	r0, #27
 8000986:	183b      	adds	r3, r7, r0
 8000988:	2103      	movs	r1, #3
 800098a:	400a      	ands	r2, r1
 800098c:	701a      	strb	r2, [r3, #0]

	if (dir == GPIO_Mode_Alternate || dir == GPIO_Mode_Output)
 800098e:	183b      	adds	r3, r7, r0
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b02      	cmp	r3, #2
 8000994:	d004      	beq.n	80009a0 <GPIO_Init+0x3c>
 8000996:	231b      	movs	r3, #27
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	d126      	bne.n	80009ee <GPIO_Init+0x8a>
	{
		uint32_t speed = (mode & GPIO_Speed_MASK) >> GPIOCFG_SPEED_POS;
 80009a0:	1dbb      	adds	r3, r7, #6
 80009a2:	881b      	ldrh	r3, [r3, #0]
 80009a4:	121b      	asrs	r3, r3, #8
 80009a6:	001a      	movs	r2, r3
 80009a8:	2303      	movs	r3, #3
 80009aa:	4013      	ands	r3, r2
 80009ac:	617b      	str	r3, [r7, #20]
		MODIFY_REG( gpio->OSPEEDR, pinmask * GPIO_OSPEEDER_OSPEED0, pinmask * speed );
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	6899      	ldr	r1, [r3, #8]
 80009b2:	69fa      	ldr	r2, [r7, #28]
 80009b4:	0013      	movs	r3, r2
 80009b6:	005b      	lsls	r3, r3, #1
 80009b8:	189b      	adds	r3, r3, r2
 80009ba:	43db      	mvns	r3, r3
 80009bc:	400b      	ands	r3, r1
 80009be:	001a      	movs	r2, r3
 80009c0:	69fb      	ldr	r3, [r7, #28]
 80009c2:	6979      	ldr	r1, [r7, #20]
 80009c4:	434b      	muls	r3, r1
 80009c6:	431a      	orrs	r2, r3
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	609a      	str	r2, [r3, #8]
		MODIFY_REG( gpio->OTYPER, pins, (mode & GPIO_Flag_OpenDrain) ? pins : 0 );
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	68ba      	ldr	r2, [r7, #8]
 80009d2:	43d2      	mvns	r2, r2
 80009d4:	401a      	ands	r2, r3
 80009d6:	1dbb      	adds	r3, r7, #6
 80009d8:	8819      	ldrh	r1, [r3, #0]
 80009da:	2380      	movs	r3, #128	; 0x80
 80009dc:	015b      	lsls	r3, r3, #5
 80009de:	400b      	ands	r3, r1
 80009e0:	d001      	beq.n	80009e6 <GPIO_Init+0x82>
 80009e2:	68bb      	ldr	r3, [r7, #8]
 80009e4:	e000      	b.n	80009e8 <GPIO_Init+0x84>
 80009e6:	2300      	movs	r3, #0
 80009e8:	431a      	orrs	r2, r3
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	605a      	str	r2, [r3, #4]
	}

	MODIFY_REG( gpio->MODER, pinmask * GPIO_MODER_MODE0, pinmask * dir);
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	6819      	ldr	r1, [r3, #0]
 80009f2:	69fa      	ldr	r2, [r7, #28]
 80009f4:	0013      	movs	r3, r2
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	189b      	adds	r3, r3, r2
 80009fa:	43db      	mvns	r3, r3
 80009fc:	400b      	ands	r3, r1
 80009fe:	001a      	movs	r2, r3
 8000a00:	231b      	movs	r3, #27
 8000a02:	18fb      	adds	r3, r7, r3
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	69f9      	ldr	r1, [r7, #28]
 8000a08:	434b      	muls	r3, r1
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	601a      	str	r2, [r3, #0]
	uint32_t pull = (mode & GPIO_Pull_MASK) >> GPIOCFG_PULL_POS;
 8000a10:	1dbb      	adds	r3, r7, #6
 8000a12:	881b      	ldrh	r3, [r3, #0]
 8000a14:	111b      	asrs	r3, r3, #4
 8000a16:	001a      	movs	r2, r3
 8000a18:	2303      	movs	r3, #3
 8000a1a:	4013      	ands	r3, r2
 8000a1c:	613b      	str	r3, [r7, #16]
	MODIFY_REG( gpio->PUPDR, pinmask * GPIO_PUPDR_PUPD0, pinmask * pull);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	68d9      	ldr	r1, [r3, #12]
 8000a22:	69fa      	ldr	r2, [r7, #28]
 8000a24:	0013      	movs	r3, r2
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	189b      	adds	r3, r3, r2
 8000a2a:	43db      	mvns	r3, r3
 8000a2c:	400b      	ands	r3, r1
 8000a2e:	001a      	movs	r2, r3
 8000a30:	69fb      	ldr	r3, [r7, #28]
 8000a32:	6939      	ldr	r1, [r7, #16]
 8000a34:	434b      	muls	r3, r1
 8000a36:	431a      	orrs	r2, r3
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	60da      	str	r2, [r3, #12]
}
 8000a3c:	46c0      	nop			; (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	b008      	add	sp, #32
 8000a42:	bd80      	pop	{r7, pc}

08000a44 <GPIO_ConfigInterrupt>:
	}
}

#ifdef GPIO_USE_IRQS
static void GPIO_ConfigInterrupt( GPIO_t * gpio, int n, GPIO_IT_Dir_t dir)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b088      	sub	sp, #32
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	701a      	strb	r2, [r3, #0]
	uint32_t pin = 1 << n;
 8000a52:	2201      	movs	r2, #1
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	409a      	lsls	r2, r3
 8000a58:	0013      	movs	r3, r2
 8000a5a:	61fb      	str	r3, [r7, #28]
	if (dir == GPIO_IT_None)
 8000a5c:	1dfb      	adds	r3, r7, #7
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d107      	bne.n	8000a74 <GPIO_ConfigInterrupt+0x30>
	{
		// Disable the EXTI channel.
		CLEAR_BIT(EXTI->IMR, pin);
 8000a64:	4b35      	ldr	r3, [pc, #212]	; (8000b3c <GPIO_ConfigInterrupt+0xf8>)
 8000a66:	681a      	ldr	r2, [r3, #0]
 8000a68:	69fb      	ldr	r3, [r7, #28]
 8000a6a:	43d9      	mvns	r1, r3
 8000a6c:	4b33      	ldr	r3, [pc, #204]	; (8000b3c <GPIO_ConfigInterrupt+0xf8>)
 8000a6e:	400a      	ands	r2, r1
 8000a70:	601a      	str	r2, [r3, #0]
		// Configure the EXTI channel
		SET_BIT(EXTI->IMR, pin);
		MODIFY_REG(EXTI->RTSR, pin, (dir & GPIO_IT_Rising) ? pin : 0);
		MODIFY_REG(EXTI->FTSR, pin, (dir & GPIO_IT_Falling) ? pin : 0);
	}
}
 8000a72:	e05e      	b.n	8000b32 <GPIO_ConfigInterrupt+0xee>
		__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a74:	4b32      	ldr	r3, [pc, #200]	; (8000b40 <GPIO_ConfigInterrupt+0xfc>)
 8000a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a78:	4b31      	ldr	r3, [pc, #196]	; (8000b40 <GPIO_ConfigInterrupt+0xfc>)
 8000a7a:	2101      	movs	r1, #1
 8000a7c:	430a      	orrs	r2, r1
 8000a7e:	635a      	str	r2, [r3, #52]	; 0x34
		uint32_t gpio_index = GPIO_GET_INDEX(gpio);
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	23a0      	movs	r3, #160	; 0xa0
 8000a84:	05db      	lsls	r3, r3, #23
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d00d      	beq.n	8000aa6 <GPIO_ConfigInterrupt+0x62>
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	4a2d      	ldr	r2, [pc, #180]	; (8000b44 <GPIO_ConfigInterrupt+0x100>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d007      	beq.n	8000aa2 <GPIO_ConfigInterrupt+0x5e>
 8000a92:	68fb      	ldr	r3, [r7, #12]
 8000a94:	4a2c      	ldr	r2, [pc, #176]	; (8000b48 <GPIO_ConfigInterrupt+0x104>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d101      	bne.n	8000a9e <GPIO_ConfigInterrupt+0x5a>
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	e004      	b.n	8000aa8 <GPIO_ConfigInterrupt+0x64>
 8000a9e:	2306      	movs	r3, #6
 8000aa0:	e002      	b.n	8000aa8 <GPIO_ConfigInterrupt+0x64>
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	e000      	b.n	8000aa8 <GPIO_ConfigInterrupt+0x64>
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61bb      	str	r3, [r7, #24]
		uint32_t offset = (n & 0x3) * 4;
 8000aaa:	68bb      	ldr	r3, [r7, #8]
 8000aac:	2203      	movs	r2, #3
 8000aae:	4013      	ands	r3, r2
 8000ab0:	009b      	lsls	r3, r3, #2
 8000ab2:	617b      	str	r3, [r7, #20]
		MODIFY_REG(SYSCFG->EXTICR[n >> 2], 0xF << offset, gpio_index << offset);
 8000ab4:	4a25      	ldr	r2, [pc, #148]	; (8000b4c <GPIO_ConfigInterrupt+0x108>)
 8000ab6:	68bb      	ldr	r3, [r7, #8]
 8000ab8:	109b      	asrs	r3, r3, #2
 8000aba:	3302      	adds	r3, #2
 8000abc:	009b      	lsls	r3, r3, #2
 8000abe:	589b      	ldr	r3, [r3, r2]
 8000ac0:	210f      	movs	r1, #15
 8000ac2:	697a      	ldr	r2, [r7, #20]
 8000ac4:	4091      	lsls	r1, r2
 8000ac6:	000a      	movs	r2, r1
 8000ac8:	43d2      	mvns	r2, r2
 8000aca:	401a      	ands	r2, r3
 8000acc:	0011      	movs	r1, r2
 8000ace:	69ba      	ldr	r2, [r7, #24]
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	409a      	lsls	r2, r3
 8000ad4:	481d      	ldr	r0, [pc, #116]	; (8000b4c <GPIO_ConfigInterrupt+0x108>)
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	109b      	asrs	r3, r3, #2
 8000ada:	430a      	orrs	r2, r1
 8000adc:	3302      	adds	r3, #2
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	501a      	str	r2, [r3, r0]
		SET_BIT(EXTI->IMR, pin);
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <GPIO_ConfigInterrupt+0xf8>)
 8000ae4:	6819      	ldr	r1, [r3, #0]
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <GPIO_ConfigInterrupt+0xf8>)
 8000ae8:	69fa      	ldr	r2, [r7, #28]
 8000aea:	430a      	orrs	r2, r1
 8000aec:	601a      	str	r2, [r3, #0]
		MODIFY_REG(EXTI->RTSR, pin, (dir & GPIO_IT_Rising) ? pin : 0);
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <GPIO_ConfigInterrupt+0xf8>)
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	69fa      	ldr	r2, [r7, #28]
 8000af4:	43d2      	mvns	r2, r2
 8000af6:	401a      	ands	r2, r3
 8000af8:	0011      	movs	r1, r2
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2201      	movs	r2, #1
 8000b00:	4013      	ands	r3, r2
 8000b02:	d001      	beq.n	8000b08 <GPIO_ConfigInterrupt+0xc4>
 8000b04:	69fa      	ldr	r2, [r7, #28]
 8000b06:	e000      	b.n	8000b0a <GPIO_ConfigInterrupt+0xc6>
 8000b08:	2200      	movs	r2, #0
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <GPIO_ConfigInterrupt+0xf8>)
 8000b0c:	430a      	orrs	r2, r1
 8000b0e:	609a      	str	r2, [r3, #8]
		MODIFY_REG(EXTI->FTSR, pin, (dir & GPIO_IT_Falling) ? pin : 0);
 8000b10:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <GPIO_ConfigInterrupt+0xf8>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	69fa      	ldr	r2, [r7, #28]
 8000b16:	43d2      	mvns	r2, r2
 8000b18:	401a      	ands	r2, r3
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	1dfb      	adds	r3, r7, #7
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2202      	movs	r2, #2
 8000b22:	4013      	ands	r3, r2
 8000b24:	d001      	beq.n	8000b2a <GPIO_ConfigInterrupt+0xe6>
 8000b26:	69fa      	ldr	r2, [r7, #28]
 8000b28:	e000      	b.n	8000b2c <GPIO_ConfigInterrupt+0xe8>
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <GPIO_ConfigInterrupt+0xf8>)
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	60da      	str	r2, [r3, #12]
}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	46bd      	mov	sp, r7
 8000b36:	b008      	add	sp, #32
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	40010400 	.word	0x40010400
 8000b40:	40021000 	.word	0x40021000
 8000b44:	50000400 	.word	0x50000400
 8000b48:	50000800 	.word	0x50000800
 8000b4c:	40010000 	.word	0x40010000

08000b50 <GPIO_SWARBitDouble>:
#endif

static uint32_t GPIO_SWARBitDouble(uint32_t s)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	s = (s & ~0xFF00FF00) | ((s & 0xFF00FF00) << 8);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4a14      	ldr	r2, [pc, #80]	; (8000bac <GPIO_SWARBitDouble+0x5c>)
 8000b5c:	401a      	ands	r2, r3
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	0219      	lsls	r1, r3, #8
 8000b62:	23ff      	movs	r3, #255	; 0xff
 8000b64:	041b      	lsls	r3, r3, #16
 8000b66:	400b      	ands	r3, r1
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	607b      	str	r3, [r7, #4]
	s = (s & ~0xF0F0F0F0) | ((s & 0xF0F0F0F0) << 4);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <GPIO_SWARBitDouble+0x60>)
 8000b70:	401a      	ands	r2, r3
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	011b      	lsls	r3, r3, #4
 8000b76:	490f      	ldr	r1, [pc, #60]	; (8000bb4 <GPIO_SWARBitDouble+0x64>)
 8000b78:	400b      	ands	r3, r1
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	607b      	str	r3, [r7, #4]
	s = (s & ~0xCCCCCCCC) | ((s & 0xCCCCCCCC) << 2);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4a0d      	ldr	r2, [pc, #52]	; (8000bb8 <GPIO_SWARBitDouble+0x68>)
 8000b82:	401a      	ands	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	009b      	lsls	r3, r3, #2
 8000b88:	490c      	ldr	r1, [pc, #48]	; (8000bbc <GPIO_SWARBitDouble+0x6c>)
 8000b8a:	400b      	ands	r3, r1
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	607b      	str	r3, [r7, #4]
	s = (s & ~0xAAAAAAAA) | ((s & 0xAAAAAAAA) << 1);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a0b      	ldr	r2, [pc, #44]	; (8000bc0 <GPIO_SWARBitDouble+0x70>)
 8000b94:	401a      	ands	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	490a      	ldr	r1, [pc, #40]	; (8000bc4 <GPIO_SWARBitDouble+0x74>)
 8000b9c:	400b      	ands	r3, r1
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	607b      	str	r3, [r7, #4]
	return s;
 8000ba2:	687b      	ldr	r3, [r7, #4]
}
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b002      	add	sp, #8
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	00ff00ff 	.word	0x00ff00ff
 8000bb0:	0f0f0f0f 	.word	0x0f0f0f0f
 8000bb4:	0f0f0f00 	.word	0x0f0f0f00
 8000bb8:	33333333 	.word	0x33333333
 8000bbc:	33333330 	.word	0x33333330
 8000bc0:	55555555 	.word	0x55555555
 8000bc4:	55555554 	.word	0x55555554

08000bc8 <EXTIx_EnableIRQn>:
		gCallback[n]();
	}
}

static void EXTIx_EnableIRQn(int n)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	if (n <= 1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	dc03      	bgt.n	8000bde <EXTIx_EnableIRQn+0x16>
	{
		HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000bd6:	2005      	movs	r0, #5
 8000bd8:	f7ff fd0b 	bl	80005f2 <HAL_NVIC_EnableIRQ>
	}
	else
	{
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
	}
}
 8000bdc:	e009      	b.n	8000bf2 <EXTIx_EnableIRQn+0x2a>
	else if (n <= 3)
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	dc03      	bgt.n	8000bec <EXTIx_EnableIRQn+0x24>
		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000be4:	2006      	movs	r0, #6
 8000be6:	f7ff fd04 	bl	80005f2 <HAL_NVIC_EnableIRQ>
}
 8000bea:	e002      	b.n	8000bf2 <EXTIx_EnableIRQn+0x2a>
		HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000bec:	2007      	movs	r0, #7
 8000bee:	f7ff fd00 	bl	80005f2 <HAL_NVIC_EnableIRQ>
}
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b002      	add	sp, #8
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <CLK_GetPCLKFreq>:

static inline uint32_t CLK_GetPCLKFreq(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
	return CLK_SYSCLK_FREQ;
 8000c00:	4b01      	ldr	r3, [pc, #4]	; (8000c08 <CLK_GetPCLKFreq+0xc>)
}
 8000c02:	0018      	movs	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	01e84800 	.word	0x01e84800

08000c0c <TIM_Init>:
/*
 * PUBLIC FUNCTIONS
 */

void TIM_Init(TIM_t * tim, uint32_t freq, uint32_t reload)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	60f8      	str	r0, [r7, #12]
 8000c14:	60b9      	str	r1, [r7, #8]
 8000c16:	607a      	str	r2, [r7, #4]
	TIMx_Init(tim);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f000 f878 	bl	8000d10 <TIMx_Init>

	uint32_t cr1 = tim->Instance->CR1;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	617b      	str	r3, [r7, #20]
	cr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS | TIM_CR1_CKD | TIM_CR1_ARPE);
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	4a0d      	ldr	r2, [pc, #52]	; (8000c60 <TIM_Init+0x54>)
 8000c2c:	4013      	ands	r3, r2
 8000c2e:	617b      	str	r3, [r7, #20]
	cr1 |= TIM_AUTORELOAD_PRELOAD_ENABLE | TIM_CLOCKDIVISION_DIV1 | TIM_COUNTERMODE_UP;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	2280      	movs	r2, #128	; 0x80
 8000c34:	4313      	orrs	r3, r2
 8000c36:	617b      	str	r3, [r7, #20]
	tim->Instance->CR1 = cr1;
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	697a      	ldr	r2, [r7, #20]
 8000c3e:	601a      	str	r2, [r3, #0]

	TIM_SetFreq(tim, freq);
 8000c40:	68ba      	ldr	r2, [r7, #8]
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	0011      	movs	r1, r2
 8000c46:	0018      	movs	r0, r3
 8000c48:	f000 f80c 	bl	8000c64 <TIM_SetFreq>
	TIM_SetReload(tim, reload);
 8000c4c:	687a      	ldr	r2, [r7, #4]
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	0011      	movs	r1, r2
 8000c52:	0018      	movs	r0, r3
 8000c54:	f000 f81d 	bl	8000c92 <TIM_SetReload>
}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b006      	add	sp, #24
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	fffffc0f 	.word	0xfffffc0f

08000c64 <TIM_SetFreq>:

void TIM_SetFreq(TIM_t * tim, uint32_t freq)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
	uint32_t clk = CLK_GetPCLKFreq();
 8000c6e:	f7ff ffc5 	bl	8000bfc <CLK_GetPCLKFreq>
 8000c72:	0003      	movs	r3, r0
 8000c74:	60fb      	str	r3, [r7, #12]
	tim->Instance->PSC = (clk / freq) - 1;
 8000c76:	6839      	ldr	r1, [r7, #0]
 8000c78:	68f8      	ldr	r0, [r7, #12]
 8000c7a:	f7ff fa45 	bl	8000108 <__udivsi3>
 8000c7e:	0003      	movs	r3, r0
 8000c80:	001a      	movs	r2, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	3a01      	subs	r2, #1
 8000c88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	b004      	add	sp, #16
 8000c90:	bd80      	pop	{r7, pc}

08000c92 <TIM_SetReload>:

void TIM_SetReload(TIM_t * tim, uint32_t reload)
{
 8000c92:	b580      	push	{r7, lr}
 8000c94:	b082      	sub	sp, #8
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
 8000c9a:	6039      	str	r1, [r7, #0]
	tim->Instance->ARR = reload;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	683a      	ldr	r2, [r7, #0]
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000ca4:	46c0      	nop			; (mov r8, r8)
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	b002      	add	sp, #8
 8000caa:	bd80      	pop	{r7, pc}

08000cac <TIM_Start>:
	}

}

void TIM_Start(TIM_t * tim)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	TIM_Reload(tim);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	0018      	movs	r0, r3
 8000cb8:	f000 f80c 	bl	8000cd4 <TIM_Reload>
	__HAL_TIM_ENABLE(tim);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]
}
 8000ccc:	46c0      	nop			; (mov r8, r8)
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b002      	add	sp, #8
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <TIM_Reload>:


}

static void TIM_Reload(TIM_t * tim)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	// Disable all timer event sources.
	uint32_t itSources = tim->Instance->DIER;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	68db      	ldr	r3, [r3, #12]
 8000ce2:	60fb      	str	r3, [r7, #12]
	tim->Instance->DIER = 0;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]

	// Update the prescalar
	tim->Instance->EGR = TIM_EGR_UG;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	615a      	str	r2, [r3, #20]

	// Clear the event before it occurrs.
	__HAL_TIM_CLEAR_IT(tim, TIM_IT_UPDATE);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	4252      	negs	r2, r2
 8000cfc:	611a      	str	r2, [r3, #16]
	tim->Instance->DIER = itSources;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	60da      	str	r2, [r3, #12]
}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b004      	add	sp, #16
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <TIMx_Init>:

static void TIMx_Init(TIM_t * tim)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
		__HAL_RCC_TIM1_CLK_ENABLE();
	}

#endif
#ifdef TIM2_ENABLE
	if (tim == TIM_2)
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <TIMx_Init+0x48>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	687a      	ldr	r2, [r7, #4]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d108      	bne.n	8000d34 <TIMx_Init+0x24>
	{
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d22:	200f      	movs	r0, #15
 8000d24:	f7ff fc65 	bl	80005f2 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <TIMx_Init+0x4c>)
 8000d2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <TIMx_Init+0x4c>)
 8000d2e:	2101      	movs	r1, #1
 8000d30:	430a      	orrs	r2, r1
 8000d32:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_NVIC_EnableIRQ(TIM17_IRQn);
		__HAL_RCC_TIM17_CLK_ENABLE();
	}
#endif
#ifdef TIM21_ENABLE
	if (tim == TIM_21)
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <TIMx_Init+0x50>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	429a      	cmp	r2, r3
 8000d3c:	d108      	bne.n	8000d50 <TIMx_Init+0x40>
	{
		HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8000d3e:	2014      	movs	r0, #20
 8000d40:	f7ff fc57 	bl	80005f2 <HAL_NVIC_EnableIRQ>
		__HAL_RCC_TIM21_CLK_ENABLE();
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <TIMx_Init+0x4c>)
 8000d46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d48:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <TIMx_Init+0x4c>)
 8000d4a:	2104      	movs	r1, #4
 8000d4c:	430a      	orrs	r2, r1
 8000d4e:	635a      	str	r2, [r3, #52]	; 0x34
	{
		HAL_NVIC_EnableIRQ(TIM22_IRQn);
		__HAL_RCC_TIM22_CLK_ENABLE();
	}
#endif
}
 8000d50:	46c0      	nop			; (mov r8, r8)
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b002      	add	sp, #8
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	20000018 	.word	0x20000018
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	20000034 	.word	0x20000034

08000d64 <TIM_IRQHandler>:
 */

#ifdef TIM_USE_IRQS

static void TIM_IRQHandler(TIM_t * tim)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
	uint32_t irqs = TIM_GET_IRQ_SOURCES(tim);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	691a      	ldr	r2, [r3, #16]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60fb      	str	r3, [r7, #12]
	if(irqs & TIM_FLAG_CC1)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2202      	movs	r2, #2
 8000d80:	4013      	ands	r3, r2
 8000d82:	d007      	beq.n	8000d94 <TIM_IRQHandler+0x30>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC1);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2203      	movs	r2, #3
 8000d8a:	4252      	negs	r2, r2
 8000d8c:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[0]();
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC2)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2204      	movs	r2, #4
 8000d98:	4013      	ands	r3, r2
 8000d9a:	d007      	beq.n	8000dac <TIM_IRQHandler+0x48>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC2);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2205      	movs	r2, #5
 8000da2:	4252      	negs	r2, r2
 8000da4:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[1]();
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC3)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2208      	movs	r2, #8
 8000db0:	4013      	ands	r3, r2
 8000db2:	d007      	beq.n	8000dc4 <TIM_IRQHandler+0x60>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC3);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2209      	movs	r2, #9
 8000dba:	4252      	negs	r2, r2
 8000dbc:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[2]();
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	691b      	ldr	r3, [r3, #16]
 8000dc2:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_CC4)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2210      	movs	r2, #16
 8000dc8:	4013      	ands	r3, r2
 8000dca:	d007      	beq.n	8000ddc <TIM_IRQHandler+0x78>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_CC4);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2211      	movs	r2, #17
 8000dd2:	4252      	negs	r2, r2
 8000dd4:	611a      	str	r2, [r3, #16]
		tim->PulseCallback[3]();
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	695b      	ldr	r3, [r3, #20]
 8000dda:	4798      	blx	r3
	}
	if(irqs & TIM_FLAG_UPDATE)
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	2201      	movs	r2, #1
 8000de0:	4013      	ands	r3, r2
 8000de2:	d007      	beq.n	8000df4 <TIM_IRQHandler+0x90>
	{
		__HAL_TIM_CLEAR_IT(tim, TIM_IT_UPDATE);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2202      	movs	r2, #2
 8000dea:	4252      	negs	r2, r2
 8000dec:	611a      	str	r2, [r3, #16]
		tim->ReloadCallback();
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	4798      	blx	r3
	}
}
 8000df4:	46c0      	nop			; (mov r8, r8)
 8000df6:	46bd      	mov	sp, r7
 8000df8:	b004      	add	sp, #16
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <TIM2_IRQHandler>:
	TIM_IRQHandler(TIM_1);
}
#endif
#ifdef TIM2_ENABLE
void TIM2_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_2);
 8000e00:	4b03      	ldr	r3, [pc, #12]	; (8000e10 <TIM2_IRQHandler+0x14>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	0018      	movs	r0, r3
 8000e06:	f7ff ffad 	bl	8000d64 <TIM_IRQHandler>
}
 8000e0a:	46c0      	nop			; (mov r8, r8)
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	20000018 	.word	0x20000018

08000e14 <TIM21_IRQHandler>:
	TIM_IRQHandler(TIM_17);
}
#endif
#ifdef TIM21_ENABLE
void TIM21_IRQHandler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
	TIM_IRQHandler(TIM_21);
 8000e18:	4b03      	ldr	r3, [pc, #12]	; (8000e28 <TIM21_IRQHandler+0x14>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	0018      	movs	r0, r3
 8000e1e:	f7ff ffa1 	bl	8000d64 <TIM_IRQHandler>
}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000034 	.word	0x20000034

08000e2c <__libc_init_array>:
 8000e2c:	b570      	push	{r4, r5, r6, lr}
 8000e2e:	2600      	movs	r6, #0
 8000e30:	4d0c      	ldr	r5, [pc, #48]	; (8000e64 <__libc_init_array+0x38>)
 8000e32:	4c0d      	ldr	r4, [pc, #52]	; (8000e68 <__libc_init_array+0x3c>)
 8000e34:	1b64      	subs	r4, r4, r5
 8000e36:	10a4      	asrs	r4, r4, #2
 8000e38:	42a6      	cmp	r6, r4
 8000e3a:	d109      	bne.n	8000e50 <__libc_init_array+0x24>
 8000e3c:	2600      	movs	r6, #0
 8000e3e:	f000 f819 	bl	8000e74 <_init>
 8000e42:	4d0a      	ldr	r5, [pc, #40]	; (8000e6c <__libc_init_array+0x40>)
 8000e44:	4c0a      	ldr	r4, [pc, #40]	; (8000e70 <__libc_init_array+0x44>)
 8000e46:	1b64      	subs	r4, r4, r5
 8000e48:	10a4      	asrs	r4, r4, #2
 8000e4a:	42a6      	cmp	r6, r4
 8000e4c:	d105      	bne.n	8000e5a <__libc_init_array+0x2e>
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	00b3      	lsls	r3, r6, #2
 8000e52:	58eb      	ldr	r3, [r5, r3]
 8000e54:	4798      	blx	r3
 8000e56:	3601      	adds	r6, #1
 8000e58:	e7ee      	b.n	8000e38 <__libc_init_array+0xc>
 8000e5a:	00b3      	lsls	r3, r6, #2
 8000e5c:	58eb      	ldr	r3, [r5, r3]
 8000e5e:	4798      	blx	r3
 8000e60:	3601      	adds	r6, #1
 8000e62:	e7f2      	b.n	8000e4a <__libc_init_array+0x1e>
 8000e64:	08000e8c 	.word	0x08000e8c
 8000e68:	08000e8c 	.word	0x08000e8c
 8000e6c:	08000e8c 	.word	0x08000e8c
 8000e70:	08000e90 	.word	0x08000e90

08000e74 <_init>:
 8000e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e7a:	bc08      	pop	{r3}
 8000e7c:	469e      	mov	lr, r3
 8000e7e:	4770      	bx	lr

08000e80 <_fini>:
 8000e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e86:	bc08      	pop	{r3}
 8000e88:	469e      	mov	lr, r3
 8000e8a:	4770      	bx	lr
